[
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/sep1-experience-and-education\/",
        "markdown-es": "## Experiencia y Educaci\u00f3n\n\u00bfAlguna vez has escrito una historia sobre ti? Bueno, esta puede ser la primera vez! Escribir\u00e1s la historia de tu historia profesional.\n\nQueremos que comience por contarnos sobre su educaci\u00f3n y experiencia laboral. Pero no empieces todav\u00eda, hay una forma correcta de hacerlo :) Sigue leyendo y te diremos c\u00f3mo se hace.\n\n### Instruciones\n 1. Lea atentamente el siguiente contenido.\n 2. Estar\u00e1s haciendo tu segund pull request! Por favor busque el [repositorio de perfil externo del estudiante](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) otra vez.\n 3. Encuentra el archivo `.YML` correspondiente a su estudiante dentro de la carpeta` src \/ students \/ `.\n 4. Actualiza la secci\u00f3n sobre su experiencia laboral relevante y educaci\u00f3n siguiendo las indicaciones proporcionadas en el resto de este documento.\n \n ## \u00bfC\u00f3mo escribir tu experiencia y educaci\u00f3n?\n\n### Experiencia laboral\nTu ** historial de trabajo ** es el componente m\u00e1s importante de tu curr\u00edculum. Los empleadores querr\u00e1n saber d\u00f3nde has trabajado, cu\u00e1ndo trabajaste all\u00ed y qu\u00e9 responsabilidades tuviste en cada funci\u00f3n que has tenido. Buscar\u00e1n ver c\u00f3mo se alinea tu experiencia con lo que buscan en los posibles empleados.\n\n - Enumera los trabajos y las pasant\u00edas que has desempe\u00f1ado en orden cronol\u00f3gico inverso, con las posiciones m\u00e1s recientes en primer lugar.\n - Para cada puesto, incluya: t\u00edtulo del trabajo, compa\u00f1\u00eda, ubicaci\u00f3n, fechas de empleo y una lista con vi\u00f1etas de los logros m\u00e1s s\u00f3lidos para cada trabajo.\n - El tiempo verbal debe estar en tiempo presente para su trabajo actual si est\u00e1 empleado, y el tiempo pasado para el empleo anterior.\n\n#### Cosas para recordar:\n - *Experiencia m\u00e1s reciente primero:* Orden cronol\u00f3gico inverso.\n - *Estructura b\u00e1sica:* Nombre de la empresa, t\u00edtulo de la posici\u00f3n, fecha, ciudad \/ estado.\n - *Bullets:*\n\t - *Voz activa:* Comience cada una con una palabra de acci\u00f3n.\n\t - *Cuantifique:* Cuantifique los resultados y el alcance de su trabajo.\n\t - *Habilidades:* Habilidades espec\u00edficas utilizadas para lograr ese resultado\n\t - *Orden:* Balas m\u00e1s fuertes en la parte superior.\n\n### Educaci\u00f3n\nLa **secci\u00f3n de educaci\u00f3n** generalmente viene despu\u00e9s. Solo necesita enumerar los t\u00edtulos obtenidos, primero con los m\u00e1s altos, cuando ha estado fuera de la escuela durante algunos a\u00f1os.\n\nSi eres un estudiante o reci\u00e9n graduado, la secci\u00f3n de educaci\u00f3n de tu curr\u00edculum puede aparecer arriba de tu historial de empleo. Si tienes experiencia laboral, an\u00f3tela debajo de esa secci\u00f3n. La educaci\u00f3n debe aparecer en orden cronol\u00f3gico inverso, con la educaci\u00f3n m\u00e1s reciente y avanzada en primer lugar. Incluye el nombre de la escuela, el grado obtenido y la fecha en que se gradu\u00f3.\n\nSi incluyes tu GPA en su curr\u00edculum vitae, depende de cu\u00e1nto tiempo hace que te graduaste y qu\u00e9 tan alto es su GPA.\n\n#### Cosas para recordar:\n - *Educaci\u00f3n superior:* Mayor, Menor, Instituci\u00f3n, fecha de graduaci\u00f3n.\n - *Graduados recientes:* Incluya GPA si es un trabajo de 3.0+ y relevante.\n - *Campos de entrenamiento y cursos:* Incluya el nombre del curso \/ campo de entrenamiento, el nombre de la instituci\u00f3n y las fechas.\n - *Posicionamiento de p\u00e1ginas:* La experiencia siempre es lo primero, a menos que seas un reci\u00e9n graduado.\n\n\n> Escrito con [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMjgwMTc4MTc2LDQxNTQwODEzOSwxMjEzOT\nA5NDAwXX0=\n-->",
        "status": "published",
        "visibility": "internal",
        "title": "Update your Career Experiences and Education",
        "slug": "sep1-experience-and-education",
        "duration": 3,
        "description": "Update the experience and education on your student profile",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/sep1-experience-and-education\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/sep1-experience-and-education\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "sep1-experience-and-education"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/sep2-projects\/",
        "markdown-es": "## Proyectos\nAhora, aqu\u00ed es donde vas a decirnos c\u00f3mo eres un desarrollador IMPRESIONANTE. Sabemos que eres un desarrollador incre\u00edble, ya te conocemos y en esta secci\u00f3n queremos que lo muestres a todos los dem\u00e1s :).\n\n### Instruciones\n 1. Lea atentamente el siguiente contenido.\n 2. Estar\u00e1s haciendo tu tercer pull request! Por favor busque el [repositorio de perfil externo del estudiante](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Encuentre el archivo `.YML` correspondiente a su estudiante dentro de la carpeta `src \/ students \/`.\n 4. Actualiza la secci\u00f3n sobre tus proyectos relevantes siguiendo las indicaciones proporcionadas en el resto de este documento.\n\n### Secci\u00f3n de Proyectos\nLa secci\u00f3n **proyectos** es fundamental para demostrar su experiencia t\u00e9cnica en entornos reales.\n\nEstrat\u00e9gicamente **seleccione dos o tres proyectos** de los que est\u00e9s particularmente orgulloso y demuestre la amplitud de su experiencia t\u00e9cnica o resalte diferentes habilidades y competencias.\n\nAseg\u00farate de incluir **enlaces de trabajo a GitHub** a todas las demostraciones en vivo de tu proyecto y que el c\u00f3digo sea accesible para una posible revisi\u00f3n, el c\u00f3digo debe tener un archivo README.md con ~ 500 palabras sobre el proyecto: Qu\u00e9 hace, tecnolog\u00edas Desaf\u00edos usados e interesantes que tuvo que superar al desarrollarlo. Y por \u00faltimo, se recomienda agregar una peque\u00f1a demostraci\u00f3n GIF animada como esta:\n<p align=\"center\">\n<img src=\"https:\/\/ucarecdn.com\/c16892ee-ef76-4733-9448-9360a845ea73\/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4644745a675239795a4a564d4f784a5443542f67697068792e676966.gif\" height=\"250\"  \/>\n<\/p>\nHazlo brillar!\n\nLa descripci\u00f3n de proyectos como parte de tu trayectoria profesional ofrece varias ventajas distintivas:\n-   Te establece como un profesional experimentado en tu campo.\n-   Demuestra un historial probado de \u00e9xito.\n-   Permite que los posibles empleadores te inserten mentalmente en una posici\u00f3n que requiere un conjunto de habilidades similar.\n-   Demuestra habilidades de liderazgo e iniciativa.\n\n### Cosas para recordar:\n - Enf\u00f3cate en algunos proyectos \u00fanicos o interesantes que demuestren dominio de habilidades cr\u00edticas.\n - Vincular tus proyectos a tu sitio web o al repositorio de GitHub puede animar a los revisores curiosos a profundizar.\n\n### C\u00f3mo listar un proyecto:\n[Name of the project]: [short description of the project]\n\n*Ejemplo:*\n**Proyecto: Agricultural Corpus**: [github.com\/jodth07\/mscottee](github.com\/jodth07\/mscotee)\nCrea una base de datos de b\u00fasqueda de documentos agr\u00edcolas usando Django con la base de datos MySQL. Tambi\u00e9n us\u00f3 Python para limpiar los datos antes de agregarlos a la base de datos. Los resultados de la b\u00fasqueda proporcionaron texto de contexto paginado antes y despu\u00e9s del texto buscado.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTEwOTQ0MjA0ODQsLTE1MzUwODMxNzNdfQ\n==\n-->\n",
        "status": "published",
        "visibility": "internal",
        "title": "Update your project portfolio",
        "slug": "sep2-projects",
        "duration": 3,
        "description": "Update your project experience on your Student Profile",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/sep2-projects\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/sep2-projects\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "sep2-projects"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/sep3-skills\/",
        "markdown-es": "## Habilidades\n\u00bfSabes en qu\u00e9 eres bueno? No, los videojuegos no son una habilidad t\u00e9cnica, tampoco es mirar deportes o blogs de moda;) Aunque podr\u00edas incluirlos como datos divertidos personales en tu Resumen, lo que buscamos aqu\u00ed son las habilidades relevantes para lo que quieres hacer pro-fe-sio-nal-men-te.\n\n### Instruciones\n 1. Lee atentamente el siguiente contenido.\n 2. Estar\u00e1s haciendo el cuarto pull request! Por favor busque el [repositorio de perfil externo del estudiante](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Encuentra el archivo `.YML` correspondiente a tu estudiante dentro de la carpeta `src \/ students \/`.\n 4. Actualice la secci\u00f3n sobre sus habilidades blandas, duras y t\u00e9cnicas relevantes siguiendo las indicaciones proporcionadas en el resto de este documento.\n \n### Recursos\nEl examen en l\u00ednea de Red Bull Wingfinder: fortalezas y personalidad, puede ser \u00fatil para ayudarlo a identificar sus fortalezas y habilidades:\nhttps:\/\/www.wingfinder.com\/\n\n### Secci\u00f3n de Habilidades\nLa secci\u00f3n de **habilidades** de tu curr\u00edculum es un lugar donde puedes mostrar tus fortalezas e individualidad. Adapta tu secci\u00f3n de habilidades\nal tipo de trabajo que te gustar\u00eda presentar, incluidas las habilidades que se mencionan expl\u00edcitamente en las ofertas de trabajo o que se sabe que son valoradas en las organizaciones.\n\nNo dudes en agregar habilidades que pueden no ser t\u00e9cnicas de posiciones anteriores que hayas tenido, ya que a\u00fan son valoradas por los empleadores y vale la pena enfatizarlas. De particular inter\u00e9s para el desarrollo son las habilidades de gesti\u00f3n, comunicaciones, marketing y dise\u00f1o, que son todas complementarias en las responsabilidades t\u00edpicas del d\u00eda a d\u00eda.\n\n - Enumera las habilidades que son m\u00e1s relevantes para el trabajo que busca. Piensa en lo que el empleador est\u00e1 buscando en relaci\u00f3n con lo que has hecho y qui\u00e9n eres t\u00fa como persona.\n - No olvides enumerar programas de computadora muy avanzados (solo programas de dise\u00f1o gr\u00e1fico si est\u00e1 interesado en la programaci\u00f3n de aplicaciones para el usuario) o tecnolog\u00edas con las que haya tenido experiencia; La competencia puede ser vista como un valor agregado.\n\n### Ejemplos de Habilidades:\n**Front End**\nHTML5\nCSS3\nJavascript\nReact.js\nAngular\n\n**Databases\/Data Management**\nSQL\/MySQL\/SQL Server\nMongoDB\nPostgres\nNatural Language Processing\n\n**Backend and Server Side**\nNodeJS\nPython\nDjango\nRest API\nAJAX\nPHP\nSwagger Documentation\n\n**Otras habilidades inform\u00e1ticas**\nGithub\nPostman\nProficient in Photoshop & Illustrator\nMicrosoft Dynamics\n\n**Lenguajes**\nEnglish\nSpanish\nCantonese\n\n**Habilidades blandas**\nOrientado a los detalles, creativo, proactivo, adaptable, organizado, Capacidad para comprender los requisitos empresariales y traducirlos en requisitos t\u00e9cnicos.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTU4MjU2NzY4M119\n-->",
        "status": "published",
        "visibility": "internal",
        "title": "Update your Skills",
        "slug": "sep3-skills",
        "duration": 3,
        "description": "Update the skills on your student profile",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/sep3-skills\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/sep3-skills\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "sep3-skills"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/sep4-summary-statement\/",
        "markdown-es": "## Resumen de la declaraci\u00f3n\nYou don't have to be Hemingway or Charles Dickens to complete this section, but you'll have to invoke your best writing abilities and each of the nine goddesses, daughters of Zeus and Mnemosyne, who preside over the arts and sciences ^^'.\n\n### Instructions\n 1.  Lee atentamente el siguiente contenido.\n 2. Estar\u00e1s haciendo el quinto pull request! Por favor busque el [repositorio de perfil externo del estudiante](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Encuentra el archivo `.YML` correspondiente a tu estudiante dentro de la carpeta `src \/ students \/`.\n 4. Lea la siguiente informaci\u00f3n y escribe tu propio resumen declarado, \u00fanico y particular.\n 5. Aseg\u00farate de incluir tus habilidades de desarrollador reci\u00e9n adquiridas, as\u00ed como tu enfoque profesional (desarrollo web, desarrollo de software, backend, frontend, etc.).\n 6. Puedes compartir tu declaraci\u00f3n con nuestro equipo de apoyo profesional para obtener comentarios de ellos.\n\n### Secci\u00f3n de Resumen declarado\nUn **resumen declarado* es un p\u00e1rrafo corto que destaca sus habilidades y experiencia profesional. Le da a los gerentes de contrataci\u00f3n un vistazo a su experiencia antes de sumergirse en su curr\u00edculum. El objetivo de una declaraci\u00f3n resumida es demostrar tu valor \u00fanico a trav\u00e9s de tu historia profesional, tus habilidades y tus logros.\n\nComo los gerentes de contrataci\u00f3n pueden leer cientos de curr\u00edculos en una semana, un resumen declarado s\u00f3lido puede ser justo lo que necesitas para sobresalir del paquete.\n\nSi tienes experiencia laboral relevante, manten tu resumen super corto. La pieza que realmente deseas que lea el gerente de contrataci\u00f3n es tu experiencia laboral m\u00e1s reciente.\n\nEl resumen declarado es solo un \"puente\" para que el gerente de contrataciones obtenga tu experiencia.\n\nSin embargo, si est\u00e1 cambiando de carrera o est\u00e1 buscando trabajo sin ninguna experiencia laboral, la secci\u00f3n de resumen debe sobresalir por s\u00ed sola y debe ser m\u00e1s larga.\n\n### Cosas para recordar:\n\n - Esta es la oportunidad de mostrar tus fortalezas a la luz del tipo de trabajo que desea realizar.\n - Mant\u00e9n tu resumen breve si tiene experiencia laboral relevante.\n - Aseg\u00farate de hablar sobre tus fortalezas, habilidades superiores y logros.\n\n### Pruebas de un Resumen declarado\n#### Prueba 1\n\"_Gestor de proyectos experimentado con amplia experiencia en TI. Las habilidades incluyen redes de computadoras, pensamiento anal\u00edtico y resoluci\u00f3n creativa de problemas. Capaz de aplicar conceptos de servicio al cliente a TI para mejorar la experiencia del usuario para clientes, empleados y administraci\u00f3n._\"\n\n#### Prueba 2\n\"_Gerente de Marketing con m\u00e1s de ocho a\u00f1os de experiencia. \u00c9xito comprobado en la ejecuci\u00f3n de campa\u00f1as de marketing por correo electr\u00f3nico e implementaci\u00f3n de estrategias de marketing que han logrado un aumento del 20% en clientes potenciales calificados Competente en contenido, redes sociales y estrategias de marketing inbound. Especializado, creativo e innovador._\"\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTEyMzM1Nzc0OTJdfQ==\n-->",
        "status": "published",
        "visibility": "internal",
        "title": "Update your Career Summary",
        "slug": "sep4-summary-statement",
        "duration": 3,
        "description": "Update the summary on your student profile",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/sep4-summary-statement\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/sep4-summary-statement\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "sep4-summary-statement"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/sep5-resume\/",
        "markdown-es": "## Resumen\nA esta parte del proyecto nos gusta llamar \"Inception\", no solo porque probablemente vas a tener pesadillas sobre esto, sino tambi\u00e9n porque se trata de crear un perfil dentro de tu perfil: D. Es algo como PHP (descubra lo que significa la primera P en PHP), pero m\u00e1s simple ^^. Y tambi\u00e9n, este es el *inicio* de tu proceso de b\u00fasqueda de empleo, as\u00ed que trata de disfrutarlo con confianza y positivismo;).\n\n### Instruciones\n 1. Toma todas las secciones de tu Perfil externo del estudiante (SEP), en las que ya has trabajado, y conviert\u00e9las en un documento de una sola p\u00e1gina de largo, usando este dise\u00f1o: (enlaza un pdf de la Gu\u00eda del curr\u00edculum)\n 2. Guarda tu documento de Word como pdf y ll\u00e1melo \"Reanudar [Nombre Apellido]\".\n 3. Agrega una nueva secci\u00f3n a tu SEP llamada Reanudar.\n 4. Lea atentamente el siguiente contenido.\n 5. Estar\u00e1s haciendo tu \u00faltimo pull request! Por favor busque el [repositorio de perfil externo del estudiante](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) otra vez.\n 6. Encuentre el archivo `.YML` correspondiente a su estudiante dentro de la carpeta `src \/ students \/`.\n 7. Sube tu archivo pdf.\n\n### Recursos\nPuede utilizar el siguiente documento como gu\u00eda de formato:\n - [Reanudar la gu\u00eda de construcci\u00f3n](https:\/\/ucarecdn.com\/d189146c-89d2-4dff-9c5a-40b7812e55ab\/ResumeSetupGuide4Geeks.pdf)\n\nUse la siguiente gu\u00eda para escribir una carta de presentaci\u00f3n en caso de que necesites:\n - [Gu\u00eda de carta de presentaci\u00f3n](https:\/\/ucarecdn.com\/b2577c7c-f990-4367-a080-f000777f0bdc\/4GeeksCoverLetterGuide.pdf)\n\n### Secci\u00f3n del curriculum vitae\nEn esta secci\u00f3n, simplemente deber\u00e1s cargar un archivo pdf con tu curr\u00edculum. Pero primero, tienes que construir tu curr\u00edculum. Crear tu curr\u00edculum es el primer paso para conseguir un trabajo.\n\nTu curr\u00edculum debe tener las siguientes secciones, que ya has completado:\n 1. Informaci\u00f3n del contacto\n 2. Resumen declarado\n 3. Habilidades\n 4. Proyectos\n 5. Experiencia y Educaci\u00f3n\n\nTambi\u00e9n puedes incluir:\n - Cursos relevantes y certificaciones\n - Trabajo voluntario\n - Premios\n - Intereses personales y otras actividades\n\n### Palabras clave\nUna consideraci\u00f3n importante al crear tu curr\u00edculum es usar palabras clave espec\u00edficas del trabajo. Los empleadores a menudo buscan en los bancos de curr\u00edculos palabras especiales o requisitos espec\u00edficos para una descripci\u00f3n del trabajo. La inclusi\u00f3n de palabras clave en las secciones de resumen, experiencia, habilidades y premios de tu curr\u00edculum aumentar\u00e1 tus posibilidades de ser marcado como una posible coincidencia. Tambi\u00e9n debes usar esas palabras clave en el t\u00edtulo y una breve descripci\u00f3n de ti que la mayor\u00eda de los sitios de trabajo solicitan.\n\nLas palabras clave tienden a ser sustantivos que son calificaciones, habilidades o t\u00e9rminos espec\u00edficos de la industria. Algunos ejemplos de palabras clave incluyen t\u00edtulos o certificaciones, t\u00edtulos de trabajo, jerga inform\u00e1tica, jerga de la industria, nombres de productos, nombres de compa\u00f1\u00edas y organizaciones profesionales.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMzYzNjk5MDQ5XX0=\n-->",
        "status": "published",
        "visibility": "internal",
        "title": "Last update to your Resume",
        "slug": "sep5-resume",
        "duration": 3,
        "description": "Final review to your Student Public Profile",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/sep5-resume\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/sep5-resume\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "sep5-resume"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/career-support\/student-external-profile\/",
        "markdown-es": " # Perfil externo del estudiante\n\nEs hora de comenzar tu primera contribuci\u00f3n de GitHub. Git ofrece una forma de insertar c\u00f3digo en un repositorio sin poseerlo, o incluso ser invitado a \u00e9l, se llama `Pull request` y el objetivo principal de este ejercicio es crear tu primer `Pull request`.\n\nAl mismo tiempo, comenzar\u00e1s a construir tu perfil de estudiante, uno de los logros m\u00e1s importantes que puedes tener en la academia porque:\n- Ser\u00e1 la primera versi\u00f3n de tu portafolio de desarrolladores.\n- Ser\u00e1 la primera versi\u00f3n de tu curr\u00edculum (como un desarrollador).\n- Le dar\u00e1 m\u00e1s contexto a tu experiencia de aprendizaje: puedes ver una tabla de todo lo que aprender\u00e1s a lo largo del curso.\n\nEste `Student Showcase` todav\u00eda est\u00e1 en fase beta y tu eres uno de los primeros estudiantes en convertirse en colaborador. Puedes encontrar la lista de estudiantes que ya tienen su perfil construido en la [SIGUIENTE URL](http:\/\/sep.4geeksacademy.co\/students\/), Tambi\u00e9n puedes hacer click en el nombre de los estudiantes para encontrar una versi\u00f3n beta de c\u00f3mo se ve el perfil de los estudiantes en este momento.\n\n## \u00bfC\u00f3mo construir tu propio perfil dentro de Student Showcase?\n\n1. Haz Fork en [el repositorio](https:\/\/github.com\/4GeeksAcademy\/student-external-profile\/).\n\n  ![alt-text](https:\/\/github-images.s3.amazonaws.com\/help\/bootcamp\/Bootcamp-Fork.png)\n  \n  Se crear\u00e1 un nuevo repositorio en su cuenta.\n  \n2. Clona el nuevo repositorio en tu *espacio de trabajo*.\n  \n  ```$ git clone <url_of_repository> ```\n  \n3. En tu *espacio de trabajo*, crea un archivo `<your_github_username> .yml` dentro de `\/ src \/ students \/` con tu informaci\u00f3n de perfil.\n\n  El archivo `YML` debe contener toda tu informaci\u00f3n personal y profesional. Verifica los detalles en [Completando el archivo YML](#completing-the-yml-file)\n  \n  Por ejemplo: [rigoberto.yml](https:\/\/github.com\/4GeeksAcademy\/student-external-profile\/blob\/master\/src\/students\/example.yml).\n  \n  ```\n  Importante: deber\u00edas probar tu sint\u00e1xis de `YML`aqui: http:\/\/www.yamllint.com\/\n  ```\n\n4. Commit y push tus cambios.\n\n  `$ git add .`\n  \n  `$ git commit -m \"my profile\"`\n  \n  `$ git push origin master`\n  \n\n5. Volver a [Github](https:\/\/github.com) y busca el repositorio creado recientemente. En \u00e9l, encontrar\u00e1s un bot\u00f3n para \"pull request\" de tus cambios nuevamente al repositorio principal.\n\n  ![alt-text](https:\/\/github-images.s3.amazonaws.com\/help\/pull_requests\/recently_pushed_branch.png)\n\n\nDespu\u00e9s de completar el PR (Pull Request), la aplicaci\u00f3n generar\u00e1 autom\u00e1ticamente tu propio portafolio de estudiantes, para verlo, ve si tu nombre aparece aqu\u00ed:\n\n**[http:\/\/sep.4geeksacademy.co\/students](http:\/\/sep.4geeksacademy.co\/students)**\n\nTu perfil debe verse como el siguiente:\n\n<p align=\"center\">\n  <img height=\"350\" src=\"https:\/\/raw.githubusercontent.com\/4GeeksAcademy\/student-external-profile\/master\/preview.png\">\n<\/p>\n\n<p align=\"center\">\n  <a href=\"http:\/\/sep.4geeksacademy.co\/sharu725\" target=\"_blank\">Wach Live Demo Here<\/a>\n<\/p>\n\n## Completando el archivo YML\n\nEl archivo YML consta de 4 secciones principales:\n```yml\ntheme: You can choose a theme and skin colors.\nbasic_info: Personal info\neducation: Previous studies.\nexperiences: Previous jobs.\nprojects: Describe the projects you've built as a developer.\npublications: Any articles you have published.\nskills: List your skills with a percentage of expertise.\n```\n\n<p align=\"center\">\n  <img height=\"350\" src=\"https:\/\/raw.githubusercontent.com\/4GeeksAcademy\/student-external-profile\/master\/static\/yml.png\">\n<\/p>\n\nPuede elegir una plantilla y un aspecto diferentes, por ejemplo:\n\n```yml\ntemplate: \"online-cv\"\nskin: \"orange\"\n```\n",
        "preview": "..\/p\/career-support\/student-external-profile\/\/preview.png",
        "title": "Student External Profile",
        "slug": "student-external-profile",
        "visibility": "internal",
        "status": "published",
        "solution": "",
        "duration": 1,
        "description": "Build the first version of your student external profile that recruiters will see",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            },
            {
                "badge": "git-brancher",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            }
        ],
        "info-path": "..\/p\/career-support\/student-external-profile\/info.json",
        "name": "json",
        "url": "..\/p\/career-support\/student-external-profile\/",
        "technology": "career-support",
        "difficulty": null,
        "category": "career-support",
        "folder-name": "student-external-profile"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/css\/junior\/bootstrap-red-dashboard\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) The Red Dashboard\n\nBootstrap no solo funciona para crear sitios web t\u00edpicos, tambi\u00e9n puede usarlo para crear lo que se denomina [\"plantilla de administrador\"](https:\/\/www.quora.com\/What-is-an-admin-template)\n\n## Meta\n\nConstruye una plantilla de administrador usando bootstrap.\n\n## Tecnolog\u00edas\n\nHTML5 y CSS.",
        "title": "Bootstrap Red Dashboard Interface",
        "status": "draft",
        "slug": "bootstrap-red-theme",
        "description": "Build a user interface using bootstrap",
        "info-path": "..\/p\/css\/junior\/bootstrap-red-dashboard\/info.json",
        "name": "json",
        "url": "..\/p\/css\/junior\/bootstrap-red-dashboard\/",
        "visibility": "public",
        "technology": "css",
        "difficulty": "junior",
        "category": "css",
        "folder-name": "bootstrap-red-dashboard"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/css\/junior\/drawing\/goku\/",
        "markdown-es": "# Son Goku con CSS3\n\nDibujar con CSS es sorprendente porque los dibujos resultantes son s\u00faper ligeros en peso (casi un 90% menos que sus dibujos PNG o JPG equivalentes).\n\n## Instruciones\n\nPor favor, use su conocimiento de CSS para dibujar la siguiente imagen.\n\n![Son Goku Image](https:\/\/projects.breatheco.de\/json?slug=instagram-feed-bootstrap&preview)",
        "preview": "..\/p\/css\/junior\/drawing\/goku\/\/preview.gif",
        "title": "CSS Drawing Goku",
        "slug": "css-drawing-goku",
        "status": "published",
        "duration": 6,
        "description": "Use your CSS knowledge to draw Goku using Position and Display properties.",
        "talents": [
            {
                "badge": "identator",
                "points": 5
            },
            {
                "badge": "tag-master",
                "points": 5
            },
            {
                "badge": "select-everything",
                "points": 10
            },
            {
                "badge": "be-dry",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 10
            }
        ],
        "info-path": "..\/p\/css\/junior\/drawing\/goku\/info.json",
        "name": "json",
        "url": "..\/p\/css\/junior\/drawing\/goku\/",
        "visibility": "public",
        "technology": "css",
        "difficulty": "junior",
        "category": "css",
        "folder-name": "drawing"
    },
    {
        "translations": [
            "us"
        ],
        "readme": "..\/p\/css\/junior\/spotify-landing-page\/",
        "preview": "..\/p\/css\/junior\/spotify-landing-page\/\/preview.png",
        "title": "Spotify Landing Page",
        "slug": "spotify-landing-page",
        "status": "published",
        "duration": 6,
        "description": "Replicate a professional real-life landing page using bootstrap",
        "talents": [
            {
                "badge": "identator",
                "points": 10
            },
            {
                "badge": "tag-master",
                "points": 10
            },
            {
                "badge": "path-master",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 10
            },
            {
                "badge": "be-dry",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 10
            }
        ],
        "info-path": "..\/p\/css\/junior\/spotify-landing-page\/info.json",
        "name": "json",
        "url": "..\/p\/css\/junior\/spotify-landing-page\/",
        "visibility": "public",
        "technology": "css",
        "difficulty": "junior",
        "category": "css",
        "folder-name": "spotify-landing-page"
    },
    {
        "translations": [
            "us"
        ],
        "readme": "..\/p\/data-modeling\/beginner\/instagram-data-modeling\/",
        "preview": "..\/p\/data-modeling\/beginner\/instagram-data-modeling\/\/preview.png",
        "status": "published",
        "title": "Building Instagram.com User Stories",
        "slug": "instagram-data-modeling",
        "duration": 3,
        "description": "Use your recently adquired knowledge to build instagram.com user stories",
        "talents": [
            {
                "badge": "fully-committed",
                "points": 5
            }
        ],
        "info-path": "..\/p\/data-modeling\/beginner\/instagram-data-modeling\/info.json",
        "name": "json",
        "url": "..\/p\/data-modeling\/beginner\/instagram-data-modeling\/",
        "visibility": "public",
        "technology": "data-modeling",
        "difficulty": "beginner",
        "category": "data-modeling",
        "folder-name": "instagram-data-modeling"
    },
    {
        "translations": [
            "us"
        ],
        "readme": "..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/",
        "title": "Demo Day Preparation for Full-Stack Software Development",
        "visibility": "internal",
        "slug": "full-stack-demo-day-preparation",
        "status": "published",
        "duration": 20,
        "description": "Final presentation for the Full-stack Software Development Course",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/",
        "technology": "final-project",
        "difficulty": "full-stack",
        "category": "final-project",
        "folder-name": "full-stack-demo-day-preparation"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/full-stack\/full-stack-mvc\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Making the Prototipe Dynamic\n\nAhora que est\u00e1 al tanto de Flux, es hora de aplicarlo en su proyecto, de esa manera practicar\u00e1 m\u00e1s y m\u00e1s hasta que lo domine.\n\nYa tienes los prototipos de proyecto en HTML y CSS usando Bootstrap.\n\n## Instrucciones:\n\nCree un MyStore.js y MyActions.js centralizados y comience a codificar todas sus historias de usuario utilizando Flux.\n\n## Flujo de trabajo:\n\n##### 1) Lea su lista completa de Historias de usuarios y establezca prioridades para comenzar a trabajar con las simples primero.\n\n##### 2) Una excelente manera de comenzar es codificar el estado de su tienda con datos falsos y hacer la primera funci\u00f3n 'getter' para que sus vistas puedan recuperar lo que necesiten.\n\n##### Pasos para endurecer la tienda con datos falsos y hacer que los captadores:\n\n2.1) Inicialice la variable en el constructor de tienda:\n    \n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            constructor(){\n                super();\n                this.state = {\n                    'products': [\n                        \/\/ ..a bunch of fake products here...\n                        { id: 1, title: 'Amazing T-shirt', color: 'read'},\n                        { id: 1, title: 'Amazing T-shirt 2', color: 'blue'},\n                        { id: 1, title: 'Amazing T-shirt 3', color: 'green'}\n                    ],\n                }\n            }\n        }\n```\n2.2) A\u00f1adir el getter:\n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            ...\n            getProducts(){\n                return this.state.products;\n            }\n            ...\n        }\n        export default new MyStore();\n```\n\n2.3) Ahora puede cambiar todas sus vistas y hacer que reanuden los productos de la tienda.\n\n```js\nclass AnyView extends Flux.View{\n    constructor(){\n        super();\n        \/\/initialize the local state\n        this.state = {\n            products: []\n        }\n    }\n    ...\n    componentDidMount(){\n        \/\/ you have to re-set the state after the component has been loaded.\n        this.setState({\n            products: MyStore.getProducts()\n        });\n    }\n    ...\n    render(){\n        \/\/ convert the array of products into an array of <Product> components\n        let productsInHTML = this.state.products.map((p) => <Product id={p.id} title={p.title} \/>));\n        \n        \/\/ render the entire array of <Products>\n        return (\n            <div>{productsInHTML}<\/div>\n        );\n    }\n}\n\n```\n##### 3. Una vez que sus vistas sean capaces de representar correctamente desde la tienda, proceda a codificar las funcionalidades \"agregar\" o \"eliminar\".\n\nPor ejemplo: si est\u00e1 haciendo una tarjeta de la tienda en l\u00ednea (comercio electr\u00f3nico), puede hacer primero 'eliminar producto' y 'agregar producto', y dejar el producto de edici\u00f3n para m\u00e1s adelante.\n\n```js\n\/\/ Let's say we are doind the delete, on the html you have to add the listener to the DOM element that will trigger the delete\n<button onClick={() => MyActions.deleteProduct(productId)}>delete product<\/button>\n\n\/\/ On MyActions.js you have to add the deleteProduct function\nclass MyActions extends Flux.Action{\n    deleteProduct(productId){\n        \/\/delete your product here\n        \n        \/\/and dispatch later\n        this.dispatch('MyStore.setProducts', arrayWithProducts);\n    }\n}\n```\nNota: Para cada historia de usuario en su proyecto, es probable que tenga que crear una funci\u00f3n en MyActions.js\n\n##### 4. Finalice enlazando las vistas con las tiendas para escuchar los cambios de la tienda.\n",
        "title": "Use MVC to make your Project Dynamic",
        "slug": "full-stack-project-mvc",
        "visibility": "internal",
        "status": "published",
        "duration": 20,
        "description": "Making the prototipe dynamic using MVC",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/full-stack\/full-stack-mvc\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/full-stack\/full-stack-mvc\/",
        "technology": "final-project",
        "difficulty": "full-stack",
        "category": "final-project",
        "folder-name": "full-stack-mvc"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/full-stack\/full-stack-project-prototype\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Creating the Prototype\n\nLa mejor manera de experimentar c\u00f3mo se usar\u00e1 su producto, en realidad es usarlo. \u00bfNo? :)\n\nConstruyamos un prototipo codificando nuestras p\u00e1ginas m\u00e1s importantes utilizando CSS, HTML, Bootstrap y React Components.\n\n## Pasos\n1. Enf\u00f3cate solo en tus ~ 3 p\u00e1ginas m\u00e1s importantes\n2. Construye tu HTML y CSS basado en el Wireframe\n3. Una vez que se termina el HTML, mueva todo a los componentes de React.js\n4. Conecte sus componentes utilizando React Router.\n5. Crea un repositorio y c\u00e1rgalo todo.",
        "title": "First Prototype",
        "slug": "full-stack-project-prototype",
        "visibility": "internal",
        "status": "published",
        "duration": 20,
        "description": "Create the product prototype",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/full-stack\/full-stack-project-prototype\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/full-stack\/full-stack-project-prototype\/",
        "technology": "final-project",
        "difficulty": "full-stack",
        "category": "final-project",
        "folder-name": "full-stack-project-prototype"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Full-Stack Final Project\n\nEs hora de pensar en lo que va a construir, tendr\u00e1s que desarrollar un producto completo, preparar una presentaci\u00f3n y demostrar el producto y la idea a familiares, amigos y socios contratantes.\n\n## Instrucciones\n\n1. Por favor, crea una tabla trello con las columnas KANBAN: Backlog, Todo, Haciendo, Hecho, Realmente hecho\n2. Agrega todas tus historias de usuario en tu tablero de trello.\n\n### Requerimientos Tecnol\u00f3gicos:\n\n1. Varias p\u00e1ginas de HTML5 + CSS3 + Bootstrap.\n2. Autentificaci\u00f3n de usuario (Login + Registro + Recordar Contrase\u00f1a).\n3. API hecha a medida con OAuth.\n4. La integraci\u00f3n de API de terceros (las incrustaciones y los iframes no cuentan), tiene que ser una integraci\u00f3n de back-end.\n5. Aplicaci\u00f3n React.js usando Flux y React Router.\n6. Cualquier otra cosa que el estudiante quiera agregar.\n\n### Metodolog\u00eda de Requerimientos\n\n1. Asociarse con alguien m\u00e1s para el desarrollo (grupos de 2 personas).\n2. Empieza por hacer los wireframes (tienes que entregarlos).\n3. Crea todas las historias de usuario con criterios de aceptaci\u00f3n.\n4. Use un tablero Kanban para el seguimiento en [Tableros de proyectos Github](https:\/\/help.github.com\/articles\/about-project-boards\/)\n5. \n\n# Construyendo el Wireframe\n\nUna excelente manera de pulir sus historias de usuario es hacer un borrador de todos sus wireframes de aplicaci\u00f3n.\n\nCree todos los wireframes para su [MVP de la aplicaci\u00f3n](https:\/\/www.youtube.com\/watch?v=joNKkWPafZs).\n\n## PAsos\n- Empieza por construir un mapa del sitio.\n- A continuaci\u00f3n, haga el wireframe de su p\u00e1gina de inicio.\n- Contin\u00faa dibujando las p\u00e1ginas m\u00e1s importantes.\n- Cada vez que dibujes una p\u00e1gina, identifica y resalta las partes reutilizables para convertirlas en componentes.\n- Trata de reutilizar todo el tiempo. Cuanto menos c\u00f3digo, mejor!\n- \u00a1Mantenlo simple!\n\n# [BE LEAN!](https:\/\/www.youtube.com\/watch?v=jBlrLqsjIDw)\n# [Like Really LEAN!](https:\/\/www.youtube.com\/watch?v=X2YoHFuWkqs)\n\n\n",
        "preview": "..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/\/preview.png",
        "title": "Final Project User Stories & Wireframes",
        "slug": "full-stack-project-stories-and-wireframes",
        "status": "published",
        "visibility": "internal",
        "duration": 8,
        "description": "Create the users stories for your final project",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 15
            }
        ],
        "info-path": "..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/",
        "technology": "final-project",
        "difficulty": "full-stack",
        "category": "final-project",
        "folder-name": "full-stack-project-stories-and-wireframes"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/web-development\/fluxify\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Haciendo el Prototipe Din\u00e1mico\n\nAhora que conoces Flux, es el momento de aplicarlo en tu proyecto.\nDe esa manera practicar\u00e1s m\u00e1s y m\u00e1s hasta que lo domines.\n\nYa tienes los prototipos de proyecto en HTML y CSS usando Bootstrap.\n\n## Instrucciones:\n\nCrea un MyStore.js centralizado y MyActions.js\ny comienza a codificar todas tus historias de usuario utilizando Flux.\n\n## Flujo de Trabajo:\n\n##### 1) Lea su lista completa de Historias de usuarios y establezca prioridades para comenzar a trabajar con las simples primero.\n\n##### 2) Una excelente manera de comenzar es codificar el estado de su tienda con datos falsos y hacer la primera funci\u00f3n 'getter' para que sus vistas puedan recuperar lo que necesiten.\n\n##### Pasos para codificar el store con data falsa y crear getter:\n\n2.1) Inicializa la variable en el store del constructor:\n\n```js\n        \/\/ Este es un ejemplo de una tienda falsa ideal para un sitio web de comercio electr\u00f3nico codificado con un mont\u00f3n de productos falsos.\n        class MyStore extends Flux.Store{\n            constructor(){\n                super();\n                this.state = {\n                    'products': [\n                        \/\/ ..a bunch of fake products here...\n                        { id: 1, title: 'Amazing T-shirt', color: 'read'},\n                        { id: 1, title: 'Amazing T-shirt 2', color: 'blue'},\n                        { id: 1, title: 'Amazing T-shirt 3', color: 'green'}\n                    ],\n                }\n            }\n        }\n```\n2.2) Agrega el getter:\n```js\n        \/\/ Este es un ejemplo de una tienda falsa ideal para un sitio web de comercio electr\u00f3nico codificado con un mont\u00f3n de productos falsos.\n        class MyStore extends Flux.Store{\n            ...\n            getProducts(){\n                return this.state.products;\n            }\n            ...\n        }\n        export default new MyStore();\n```\n\n2.3) Ahora puedes cambiar todas tus vistas y hacer que reanuden los productos del store.\n\n```js\nclass AnyView extends Flux.View{\n    constructor(){\n        super();\n        \/\/inicializa el local state\n        this.state = {\n            products: []\n        }\n    }\n    ...\n    componentDidMount(){\n        \/\/ debes restablecer el state despu\u00e9s de que se haya cargado el componente.\n        this.setState({\n            products: MyStore.getProducts()\n        });\n    }\n    ...\n    render(){\n        \/\/ convertir el arreglo de productos en un arreglo de componentes <Producto>\n        let productsInHTML = this.state.products.map((p) => <Product id={p.id} title={p.title} \/>));\n\n        \/\/ renderizar todo el arreglo de <Products>\n        return (\n            <div>{productsInHTML}<\/div>\n        );\n    }\n}\n\n```\n##### 3. Una vez que tus vistas sean capaces de presentarse correctamente desde el store, procede a codificar las funcionalidades \"agregar\" o \"eliminar\".\n\nPor ejemplo: si est\u00e1s haciendo un card de un Ecomerce (comercio electr\u00f3nico), puedes hacer primero 'eliminar producto' y 'agregar producto', y dejar el producto de edici\u00f3n para m\u00e1s adelante.\n\n```js\n\/\/ Digamos que estamos haciendo la eliminaci\u00f3n, en el html tiene que agregar el listener al elemento DOM que activar\u00e1 la eliminaci\u00f3n\n<button onClick={() => MyActions.deleteProduct(productId)}>delete product<\/button>\n\n\/\/ En MyActions.js tiene que agregar la funci\u00f3n deleteProduct\nclass MyActions extends Flux.Action{\n    deleteProduct(productId){\n        \/\/elimina tu producto aqui\n\n        \/\/and dispatch later\n        this.dispatch('MyStore.setProducts', arrayWithProducts);\n    }\n}\n```\nNota: Para cada historia de usuario en tu proyecto, es probable que tengas que crear una funci\u00f3n en MyActions.js\n\n##### 4. Finalice enlazando las vistas con el store para detectar los cambios del store.\n",
        "title": "First Prototype",
        "visibility": "internal",
        "slug": "web-development-project-fluxify",
        "status": "published",
        "duration": 20,
        "description": "Making the prototipe dynamic using Flux",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/web-development\/fluxify\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/web-development\/fluxify\/",
        "technology": "final-project",
        "difficulty": "web-development",
        "category": "final-project",
        "folder-name": "fluxify"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/web-development\/prototype\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Creando el Prototipo\n\nLa mejor forma de experimentar como tu producto va a ser usado, es realmente usandolo. no? :)\n\nConstruyamos un prototipo codificando nuestras p\u00e1ginas m\u00e1s importantes utilizando CSS, HTML, Bootstrap y React Components.\n\n## Pasos\n1. Concentrate solo en tus ~3 paginas m\u00e1s importante.\n2. Construye tu HTML y CSS basado en el Wireframe.\n3. Una vez el HTML este terminado, trasladato todo a componentes de React.js.\n4. Conecta tus componentes usando React Router.\n5. Crea un repositorio y carga todo en \u00e9l.",
        "title": "First Prototype",
        "visibility": "internal",
        "slug": "web-development-project-prototype",
        "status": "published",
        "duration": 20,
        "description": "Create the product prototype",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/web-development\/prototype\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/web-development\/prototype\/",
        "technology": "final-project",
        "difficulty": "web-development",
        "category": "final-project",
        "folder-name": "prototype"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/web-development\/user-stories\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Proyecto Final Full-Stack\n\nEs hora de pensar en lo que vas a construir, tendr\u00e1s que desarrollar un producto completo, preparar una presentaci\u00f3n y demostrar el producto y la idea a familiares, amigos y socios contratantes.\n\n## Instrucciones\n\n1. Por favor, crea una tabla trello con las columnas KANBAN: Backlog, Por Hacer (ToDo), Haciendo, Hecho, Realmente hecho\n2. Agrega todas tus historias de usuario en tu tablero de trello.\n\n### Requeriemientos Tecnol\u00f3gicos:\n\n1. Varias p\u00e1ginas de HTML5 + CSS3 + Bootstrap.\n2. Autentificaci\u00f3n de usuario (Login + Registro + Recordar Contrase\u00f1a).\n3. API hecha a medida con OAuth.\n4. La integraci\u00f3n de API de terceros (las incrustaciones y los iframes no cuentan), tiene que ser una integraci\u00f3n de back-end.\n5. Aplicaci\u00f3n React.js usando Flux y React Router.\n6. Cualquier otra cosa que el estudiante quiera agregar.\n\n### Requerimientos en la Metodolog\u00eda:\n\n1. Asociarse con alguien m\u00e1s para el desarrollo (grupos de 2 o 3 personas).\n2. Empieza por hacer los wireframes (tienes que entregarlos).\n3. Crea todas las historias de usuario con criterios de aceptaci\u00f3n.\n4. Usa una tabla Kanban para el seguimiento en Trello.com\n\n\n",
        "title": "Final Project User Stories",
        "slug": "web-development-project-stories",
        "visibility": "internal",
        "status": "published",
        "duration": 8,
        "description": "Create the users stories for your final project",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/web-development\/user-stories\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/web-development\/user-stories\/",
        "technology": "final-project",
        "difficulty": "web-development",
        "category": "final-project",
        "folder-name": "user-stories"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/final-project\/web-development\/wireframes\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Wireframing\n\nUna excelente manera de pulir sus historias de usuario es hacer un borrador de todos sus wireframes de aplicaci\u00f3n.\n\nPlease create all the wireframes for your [application's MVP](https:\/\/www.youtube.com\/watch?v=joNKkWPafZs).\n\n## Steps\n- Start by building a sitemap\n- A continuaci\u00f3n, haga el wireframe de su p\u00e1gina de inicio.\n- Contin\u00faa dibujando las p\u00e1ginas m\u00e1s importantes.\n- Cada vez que dibujes una p\u00e1gina, identifica y resalta las partes reutilizables para convertirlas en componentes.\n- Trata de reutilizar todo el tiempo. Cuanto menos c\u00f3digo, mejor!\n- Mantenlo simple!\n\n# [BE LEAN!](https:\/\/www.youtube.com\/watch?v=jBlrLqsjIDw)\n# [Like Really LEAN!](https:\/\/www.youtube.com\/watch?v=X2YoHFuWkqs)",
        "title": "Final Project Wireframes",
        "slug": "web-development-project-wireframes",
        "visibility": "internal",
        "status": "published",
        "duration": 8,
        "description": "Create the wireframe stories for your final project",
        "talents": [
            {
                "badge": "docu-lover",
                "points": 5
            }
        ],
        "info-path": "..\/p\/final-project\/web-development\/wireframes\/info.json",
        "name": "json",
        "url": "..\/p\/final-project\/web-development\/wireframes\/",
        "technology": "final-project",
        "difficulty": "web-development",
        "category": "final-project",
        "folder-name": "wireframes"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/beginner\/conditional-profile-card\/",
        "markdown-es": "# Conditional Profile Card\n\nComo desarrollador web, estar\u00e1s creando muchos HTML din\u00e1micos + CSS usando algoritmos de Javascript.\n\nEn este ejercicio, debes crear el c\u00f3digo HTML necesario para representar una tarjeta de perfil. El c\u00f3digo final cambiar\u00e1 en tiempo de ejecuci\u00f3n en funci\u00f3n de una serie de variables que podr\u00edan cambiar. Aqu\u00ed hay un ejemplo de la tarjeta de perfil:\n\n![Conditional Profile Card](https:\/\/projects.breatheco.de\/p\/javascript\/beginner\/conditional-profile-card\/preview.gif)\n\n## Valores de variables iniciales\n\n| Nombre | Tipo | Valor por Defecto | Descripci\u00f3n |\n| --- | --- | --- | --- |\n| background | string | null | la url de la imagen que se utilizar\u00e1 como fondo para la portada del perfil |\n| includeCover | boolean | true | Determina si debe mostrarse la portada. |\n| avatarURL | string | null | la url para el perfil de la imagen del avatar |\n| socialMediaPosition | string | \"right\" | puede ser `left` o` right` y determina d\u00f3nde colocar la barra de redes sociales |\n| twitter | string | null | El nombre de usuario de Twitter que se mostrar\u00e1 en el perfil. |\n| github | string | null | El nombre de usuario de Github que se mostrar\u00e1 en el perfil. |\n| linkedin | string | null | El nombre de usuario de linkedin que se mostrar\u00e1 en el perfil. |\n| instagram | string | null | El nombre de usuario de Instagram para ser mostrado en el perfil. |\n| name | string | null | El nombre del usuario que se mostrar\u00e1 en el perfil.|\n| lastname | string | null | El nombre del usuario que se mostrar\u00e1 en el perfil. |\n| role | string | null | El nombre del t\u00edtulo del trabajo que se mostrar\u00e1 en el perfil. |\n| country | string | null | El pa\u00eds de residencia del usuario que se mostrar\u00e1 en el perfil. |\n| city | string | null | La ciudad de residencia del usuario que se mostrar\u00e1 en el perfil.|\n\n## Ejemplo de HTML codificado\n\nEste es un ejemplo de una posible **salida (output)** HTML, debe reemplazar: \n  *name*,           \/\/h1 \n  *lastname*,       \/\/h1\n  *role*,           \/\/h2\n  *city*,           \/\/h3\n  *country*,        \/\/h3\n  *social networks*,\/\/ul\n  *photo*,          \/\/img\n  *background*,     \/\/div->img\n\nCon valores reales.\n\n```html\n<div class=\"widget\">\n  <div class=\"cover\"><img src=\"https:\/\/the_url.com\/for_the_background.png\" \/><\/div>\n  <img src=\"https:\/\/the_url.com\/for_the_image.png\" class=\"photo\" \/>\n  <h1>Ryan Boylett<\/h1>\n  <h2>Web Developer<\/h2>\n  <h3>Miami, USA<\/h3>\n  <ul class=\"position-right\">\n    <li><a href=\"https:\/\/twitter.com\/alesanchezr\"><i class=\"fa fa-twitter\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/github.com\/alesanchezr\"><i class=\"fa fa-github\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/linkedin.com\/alesanchezr\"><i class=\"fa fa-linkedin\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/instagram.com\/alesanchezr\"><i class=\"fa fa-instagram\"><\/i><\/a><\/li>\n  <\/ul>\n<\/div>\n```\n\n## Instalaci\u00f3n\n\n1. Clona este repositorio para descargar la plantilla inicial:\n\n`git clone https:\/\/github.com\/breatheco-de\/exercise-conditional-profile-card`\n\n2. Entra en la carpeta del proyecto: \n\n`cd exercise-conditional-profile-card`\n\n3. Instala los paquetes NPM:\nNota: si est\u00e1 utilizando c9, aseg\u00farese de estar ejecutando la \u00faltima versi\u00f3n de node: \n\n`nvm install 8`\n\n`nvm use 8`\n\n\n`npm install`\n\n4. Construir por primera vez: \n\n`npm run build`\n\n5.Si est\u00e1s usando la cloud 9, haga clic con el bot\u00f3n derecho en el archivo `public \/ index.html` y haga clic en \"ejecutar\" para iniciar el servidor y obtener el enlace de su sitio web p\u00fablico.\n\n6. Comience a actualizar la funci\u00f3n `render` dentro del archivo `index.js`, ese es el \u00fanico archivo que tiene que hacer de nuevo `npm run build` y actualice la url de su sitio web p\u00fablico.\n\nNota: cada vez que actualice un archivo, tendr\u00e1 que volver a compilarlo para actualizar el paquete.\n",
        "preview": "..\/p\/javascript\/beginner\/conditional-profile-card\/\/preview.gif",
        "title": "Conditional Profile Card Generator",
        "slug": "conditional-profile-card",
        "status": "published",
        "solution": "https:\/\/github.com\/breatheco-de\/conditional-profile-card",
        "duration": 4,
        "description": "Practice conditions, render a profile card based on a series of variables that could change in value during runtime like: username, avatar, etc.",
        "talents": [
            {
                "badge": "identator",
                "points": 6
            },
            {
                "badge": "tag-master",
                "points": 3
            },
            {
                "badge": "window-lover",
                "points": 3
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 5
            }
        ],
        "info-path": "..\/p\/javascript\/beginner\/conditional-profile-card\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/beginner\/conditional-profile-card\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "beginner",
        "category": "javascript",
        "folder-name": "conditional-profile-card"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/beginner\/domain-name-generator\/",
        "markdown-es": "# The Domain Name Generator\n\nEncontrar un nombre de dominio es dif\u00edcil, \u00bfpor qu\u00e9 no automatizarlo? :)\n\n## Instrucciones\n\nCrea un script que genere todas las combinaciones posibles de nombres de dominio.\nde una lista de pronombres, adjetivos y sustantivos, por ejemplo:\n\n```\n  var pronoun = ['the','our'];\n  var adj = ['great', 'big' ];\n  var noun = ['jogger','racoon'];\n```\n\nDebe generar algo como:\n\n```\nthegreatjogger.com\nthegreatracoon.com\nourgreatjogger.com\nourgreatracoon.com\nthebigjogger.com\nthebigracoon.com\nourbigjogger.com\nourbigracoon.com\n```\n\nSugerencia: deber\u00e1 usar los bucles anidados para mezclar los diferentes valores.\n\nSus herramientas: Para bucle, concatenaci\u00f3n de cuerdas.\n\n## Un poco de historia sobre el proyecto (lee solo si te importa)\n\nAntes de que el mercado de dominios fuera centralizado y convertido en una mafia.\ncontrolado por Godaddy, Enom y algunos otros. Ciudadanos como t\u00fa y yo\nFueron capaces de comprar un dominio .com de forma realmente f\u00e1cil. \n\nDe hecho, este proyecto fue construido originalmente en 2002 por uno de los maestros de 4Geeks\nmientras intentaba encontrar nombres de dominio para comprar para varios proyectos.\n\n",
        "title": "Domain Name Generator",
        "slug": "domain-generator",
        "status": "published",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/domain-generator",
        "duration": 4,
        "description": "The domain mafia is far from over, with more domain extensions every day is a good idea to chase for great domain available to buy. Who knows, maybe you get lucky and become a millionaire!",
        "talents": [
            {
                "badge": "identator",
                "points": 6
            },
            {
                "badge": "tag-master",
                "points": 3
            },
            {
                "badge": "window-lover",
                "points": 3
            },
            {
                "badge": "looper",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 5
            }
        ],
        "info-path": "..\/p\/javascript\/beginner\/domain-name-generator\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/beginner\/domain-name-generator\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "beginner",
        "category": "javascript",
        "folder-name": "domain-name-generator"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/beginner\/html5-form-validations\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  HTML5 Form Validations\n\nDespu\u00e9s de crear el HTML y el CSS para este formulario, debemos asegurarnos de que evite que el usuario env\u00ede un formulario con la informaci\u00f3n o el formato incorrectos. En el desarrollo web, lo llamamos: Validaci\u00f3n de formularios.\n\nPara evitar que se env\u00ede un formulario, tenemos que escuchar el evento \"enviar\" que se activa con el formulario cuando el usuario presiona: la tecla Intro \/ Retorno o el bot\u00f3n Enviar.\n\nHere is a little more about preventing an event from occurring: [https:\/\/www.youtube.com\/watch?v=I_fVO_NzT2g&t=401s](https:\/\/www.youtube.com\/watch?v=I_fVO_NzT2g&t=401s)\n\n![Form Validations Preview](https:\/\/projects.breatheco.de\/json?slug=html5-form-validations&preview)\n\n## Instrucciones\n\nAfter the user submits the form:\n1. Aseg\u00farate de detener el flujo del env\u00edo utilizando `preventDefault ()`, [aqu\u00ed hay un poco m\u00e1s sobre preventDefault ()](https:\/\/www.youtube.com\/watch?v=3SNyh57XSIA).\n2. Despu\u00e9s de evitar el env\u00edo, aseg\u00farese de que todos los valores de entrada sean correctos y tengan el formato correcto.\n3. Si hay una o m\u00e1s entradas con un valor no v\u00e1lido, muestre un error claro en la parte superior del formulario con un mensaje muy expl\u00edcito sobre lo que sucedi\u00f3.\n4. Cambie el color de fondo de las entradas relevantes (las que tienen datos incorrectos).\n\n## \u00bfQu\u00e9 hacer si est\u00e1s atascado?\n\n\u00a1No te sientas frustrado y pide ayuda! Despu\u00e9s de probarte por tu cuenta durante 20 minutos, es hora de dejar de trabajar y pedir ayuda.",
        "preview": "..\/p\/javascript\/beginner\/html5-form-validations\/\/preview.gif",
        "status": "published",
        "title": "Use JS to validate an HTML Form",
        "slug": "html5-form-validations",
        "duration": 4,
        "solution": "https:\/\/codepen.io\/alesanchezr\/pen\/zeaaVx",
        "description": "Use Javascript to validate the inputs of an HTML form (on submit)",
        "talents": [
            {
                "badge": "form-inputs",
                "points": 10
            },
            {
                "badge": "form-designer",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 10
            },
            {
                "badge": "identator",
                "points": 5
            },
            {
                "badge": "tag-master",
                "points": 5
            },
            {
                "badge": "be-dry",
                "points": 5
            },
            {
                "badge": "abc",
                "points": 5
            }
        ],
        "info-path": "..\/p\/javascript\/beginner\/html5-form-validations\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/beginner\/html5-form-validations\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "beginner",
        "category": "javascript",
        "folder-name": "html5-form-validations"
    },
    {
        "video-id": "CMMNdoTJMJM",
        "timeline": [
            {
                "seconds": "1",
                "description": "Introduction"
            }
        ],
        "video-path": "..\/p\/javascript\/beginner\/simple-counter-react\/video.json",
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/beginner\/simple-counter-react\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Simple Counter with React\n\nReact mejora la creaci\u00f3n de componentes personalizados, que puedes representar a trav\u00e9s de tu aplicaci\u00f3n web utilizando el m\u00e9todo **ReactDOM.render()**. Un componente personalizado te permite dividir y conquistar, separando los desaf\u00edos l\u00f3gicos y visuales en partes m\u00e1s peque\u00f1as, lo que le brinda un mayor control sobre la pantalla y las funcionalidades de cada parte de la aplicaci\u00f3n web.\n\nPor ejemplo, para crear un bootstrap &#x3C;Card \/&#x3E; componente codificar\u00edas esto:\n\n```\nfunction Card(props){\n    render (\n        <div className=\"card\">\n            <img className=\"card-img-top\" src=\"http:\/\/via.placeholder.com\/350x150\" alt=\"Card image cap\" \/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Card title<\/h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and fill the card's content.<\/p>\n                <a href=\"#\" className=\"btn btn-primary\">Go somewhere<\/a>\n            <\/div>\n        <\/div>\n    );\n}\n```\n\nDespu\u00e9s de declararlo, puedes **importar** y **utilizar** en tu aplicaci\u00f3n web de esta manera:\n\n```\n\/\/import react into the bundle\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from '.\/component\/Card.jsx'\n\nReactDOM.render(<Card \/>, document.quertSelector('#root'));\n```\n\nAdicionalmente, puedes pasar informaci\u00f3n a trav\u00e9s de **props**:\n\n```html\n\n<!-- Uso del componente personalizado. -->\n<Card imageUrl=\"http:\/\/via.placeholder.com\/350x150\" title=\"A nice image\" \/>\n\n```\n\n... para uso dentro del m\u00e9todo de renderizaci\u00f3n de su componente:\n\n```\n\/\/Declaration of custom component (Card.jsx)\n\nfunction Card(props){\n    render (\n        <div className=\"card\">\n            <img className=\"card-img-top\" src={props.imageUrl} alt=\"Card image cap\" \/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{props.title}<\/h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and fill the card's content.<\/p>\n                <a href=\"#\" className=\"btn btn-primary\">Go somewhere<\/a>\n            <\/div>\n        <\/div>\n    );\n}\n```\n\n# Instrucciones\n\nCrea un componente de contador de segundos, llamado ***SecondsCounter***. Deber\u00eda verse [como este](https:\/\/projects.breatheco.de\/json?slug=simple-counter-react&preview).\n\n- El prop\u00f3sito principal del componente es mostrar cu\u00e1ntos segundos han pasado desde que el sitio web termin\u00f3 de cargarse (onLoad).\n- Use el ***ReactDOM.render()*** para representar el componente en la aplicaci\u00f3n web.\n- Use la funci\u00f3n ***setInterval()*** para volver a renderizar el componente cada segundo.\n- El componente no necesita un estado local, puede pasar la cantidad de segundos como **props** de la siguiente manera:\n```\n<SecondsCounter seconds={3434} \/>\n\n```\n- Puede encontrar el \u00edcono del reloj a la izquierda del componente en fuente impresionante.\n",
        "preview": "..\/p\/javascript\/beginner\/simple-counter-react\/\/preview.gif",
        "title": "Simple Counter",
        "slug": "simple-counter-react",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/simple-counter-react",
        "status": "published",
        "duration": 4,
        "description": "Use your react.js skills to make a simple counter component",
        "talents": [
            {
                "badge": "functional-developer",
                "points": 6
            }
        ],
        "info-path": "..\/p\/javascript\/beginner\/simple-counter-react\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/beginner\/simple-counter-react\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "beginner",
        "category": "javascript",
        "folder-name": "simple-counter-react"
    },
    {
        "video-id": "w06bq6_fRYw",
        "timeline": [
            {
                "seconds": "1",
                "description": "Introduction"
            }
        ],
        "video-path": "..\/p\/javascript\/beginner\/traffic-light-react\/video.json",
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/beginner\/traffic-light-react\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Traffic Light with React\n\nTambi\u00e9n es posible crear componentes de reacci\u00f3n utilizando una declaraci\u00f3n de clase.\n\nPor ejemplo, para crear un &#x3C;TrafficLight \/&#x3E; componente utilizando la declaraci\u00f3n de clase puede escribir este c\u00f3digo:\n```\nclass TrafficLight extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            \/\/your state properties here\n        }\n    }\n    render(){\n        return (\n            \/\/return your html here\n        )\n    }\n}\n```\n\nEl uso de la declaraci\u00f3n de clase es excelente porque permite que los componentes tengan un estado que se puede cambiar durante el ciclo de vida del componente o durante el tiempo de ejecuci\u00f3n de la aplicaci\u00f3n.\n\n# Instrucciones\n\nSimulemos un sem\u00e1foro [como este](https:\/\/projects.breatheco.de\/json?slug=traffic-light-react&preview).\n\nLa luz tiene que brillar cuando se hace clic.\n\n- Todo el prop\u00f3sito del componente es mostrar un sem\u00e1foro con luces de lectura, amarillas y verdes.\n- Cuando se hace clic (se selecciona) alguna luz, \u00e9sta debe brillar, pero las otras luces deben dejar de brillar.\n- El componente debe tener un estado que almacene el color actual que debe brillar, por eso debe declarar el componente como una clase (no como una funci\u00f3n) de esta manera:\n```js\nclass TrafficLight extends React.Component{\n    \/\/Tu constructor y m\u00e9todo de renderizaci\u00f3n aqu\u00ed.\n}\n```\n- Utilice ReactDOM.render para procesar el componente en el DOM de esta manera\n```js\nReactDOM.render(<TrafficLight \/>, document.querySelector('#app'));\n```",
        "preview": "..\/p\/javascript\/beginner\/traffic-light-react\/\/preview.gif",
        "title": "Traffic Light",
        "slug": "traffic-light-react",
        "status": "published",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/traffic-light-react",
        "duration": 4,
        "description": "Create a small react component with its own state and event listeners",
        "talents": [
            {
                "badge": "functional-developer",
                "points": 6
            }
        ],
        "info-path": "..\/p\/javascript\/beginner\/traffic-light-react\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/beginner\/traffic-light-react\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "beginner",
        "category": "javascript",
        "folder-name": "traffic-light-react"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/calculator\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Calculator\n\nLa calculadora es un proyecto ideal para\nhttps:\/\/projects.breatheco.de\/json?slug=calculator&preview",
        "title": "The Calculator",
        "slug": "the-calculator",
        "status": "draft",
        "info-path": "..\/p\/javascript\/junior\/calculator\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/calculator\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "calculator"
    },
    {
        "video-id": "CmdPegEyyVs",
        "menuname": "Learn Flux creating a Contact List",
        "timeline": [
            {
                "seconds": "0",
                "description": "Introduction"
            },
            {
                "seconds": "145",
                "description": "Why Flux"
            },
            {
                "seconds": "320",
                "description": "Reduct vs Flux"
            },
            {
                "seconds": "372",
                "description": "React Component vs React Page\/View"
            },
            {
                "seconds": "518",
                "description": "The basic workflow"
            },
            {
                "seconds": "660",
                "description": "Flux Workflow in detail"
            },
            {
                "seconds": "795",
                "description": "Start coding! (setup)"
            },
            {
                "seconds": "1000",
                "description": "Simplifying the HTML"
            },
            {
                "seconds": "1115",
                "description": "Action: Creating the \"addContact\" action"
            },
            {
                "seconds": "1220",
                "description": "Store: Declaring the Flux Store"
            },
            {
                "seconds": "1412",
                "description": "View: Listening to store changes (subscription)"
            },
            {
                "seconds": "1788",
                "description": "Integrating everything together (View+Action+Store)"
            },
            {
                "seconds": "2215",
                "description": "Debugging (How to know what is happening)"
            },
            {
                "seconds": "2518",
                "description": "Deleting a contact (view+action+store)"
            },
            {
                "seconds": "3055",
                "description": "Editing a contact (view+action+store)"
            },
            {
                "seconds": "4576",
                "description": "Final summary"
            }
        ],
        "video-path": "..\/p\/javascript\/junior\/contact-list\/video.json",
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/contact-list\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Contact Managment Application \n\nTecnolog\u00edas: HTML, CSS, JS, React, React Router and Flux.\n\n\u00a1Hola! Es hora de empezar a hacer aplicaciones frontales profesionales. Esta vez\nCrearemos una peque\u00f1a aplicaci\u00f3n de gesti\u00f3n de contactos que permitir\u00e1 a los usuarios:\nCrear, actualizar, eliminar y leer contactos. [Compru\u00e9balo aqu\u00ed!](https:\/\/projects.breatheco.de\/json?slug=contact-list&preview)\n\n***Utiliza la arquitectura de Flux para esto:*** La arquitectura de Flux es una de las propuestas m\u00e1s utilizadas para las arquitecturas de aplicaciones web..\n\n### \u00bfComo empezar?\n\nClona el repositorio con el boilerplate, no contiene funcionalidades reales\npero tiene 99.99% del HTML \/ CSS que necesitar\u00e1s para el proyecto,\nTe permite centrarte en la funcionalidad.\n\n### El proyecto se divide en:\n\n#### Dos vistas diferentes:\n\n1. Contacto: Contiene la lista de contactos.\n2. Agregar contacto: es solo un formulario que puede usar para crear o actualizar contactos.\n\n#### Hay un componente adicional:\nTarjeta de contacto: componente ideal para mostrar solo un contacto.\n\n## Funcionalidades esperadas\n\n- Debe agregar el c\u00f3digo necesario para que su aplicaci\u00f3n cree, edite,\ny eliminar contactos de la lista.\n\n- (Opcional, pero es un punto a favor) P\u00eddale al usuario la confirmaci\u00f3n antes de borrar, use la\nComponente modal para eso.\n\n## Pasos para instalar este proyecto\n\n##### 1. Clona el repository\n```\n$ git clone https:\/\/github.com\/breatheco-de\/exercise-contact-list.git\n```\n##### 2. Instala el \/node_modules\n```\n$ npm install\n```\n##### 3. Ejecutar el servidor de desarrollo webpack.\n```\n$ npm run c9\n```\n\n\u00a1Eso es! Comience a codificar su aplicaci\u00f3n ReactJS + Flux.",
        "preview": "..\/p\/javascript\/junior\/contact-list\/\/preview.gif",
        "title": "Contact List App Using React & Flux",
        "slug": "contact-list",
        "status": "published",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/contact-list",
        "duration": 24,
        "description": "Create a simple contact list application using the React.js framework and Flux Architecture",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 5
            },
            {
                "badge": "be-dry",
                "points": 5
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "source-inspector",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 10
            },
            {
                "badge": "js-inspector",
                "points": 10
            },
            {
                "badge": "sass-master",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            },
            {
                "badge": "the-console",
                "points": 10
            },
            {
                "badge": "mouse-god",
                "points": 5
            },
            {
                "badge": "conditionals",
                "points": 5
            },
            {
                "badge": "looper",
                "points": 5
            },
            {
                "badge": "model-master",
                "points": 5
            },
            {
                "badge": "control-freak",
                "points": 20
            },
            {
                "badge": "model-master",
                "points": 20
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/contact-list\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/contact-list\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "contact-list"
    },
    {
        "translations": [],
        "title": "Shuffle the Deck",
        "slug": "deck-shuffler",
        "status": "draft",
        "info-path": "..\/p\/javascript\/junior\/deck-shuffler\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/deck-shuffler\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "deck-shuffler"
    },
    {
        "translations": [
            "us"
        ],
        "readme": "..\/p\/javascript\/junior\/hangman\/",
        "title": "The Hangman",
        "slug": "hangman",
        "status": "draft",
        "info-path": "..\/p\/javascript\/junior\/hangman\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/hangman\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "hangman"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/meetup-clone-react\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Contact Managment Application \n\nTecnologias: HTML, CSS, JS, React, React Router and React Context API.\n\n\u00a1Hola! Es hora de empezar a hacer aplicaciones frontales profesionales. Esta vez\nCrearemos una peque\u00f1a aplicaci\u00f3n de Meetup.com que permita a los usuarios navegar y confirmar eventos, muy similar a c\u00f3mo funciona Meetup.com.\n\n**Event**s  son la entidad central en el sistema, la vista principal (Home) tendr\u00e1 una lista de **Event**s organizado por fechas.\nCada **Event** esta vinculado _a single **Meetup**_.\nUn **Meetup** puede ser vinculado _one or more_ **Event**s.\n\n_Optimizado para grupos de 2-3 estudiantes._\n\n## Este proyecto est\u00e1 destinado a realizarse en dos fases.\n\nPrimero queremos enfocarnos en las im\u00e1genes, asegurarnos de que las estructuras visibles est\u00e9n funcionando correctamente.\nEn segundo lugar, debemos implementar la visualizaci\u00f3n din\u00e1mica de datos.\n\n### Fase 1: Crea las vistas, luego vinc\u00falalas con React Router en su componente de dise\u00f1o.\n\nCada grupo debe crear los proyectos ***ver componentes***: \n- Home (Lista de Eventos)\n- Detalle del Event\n- Detalle del Meetup\n\nUsa contenido ficticio inicialmente.\n\nEn Meetup.com, Meetups son los grupos u organizaciones anfitrionas de los eventos. \n\n##### Cada Meetup debe tener:\n- Titulo\n- Descripci\u00f3n\n\n\nEn contraste, los eventos son los eventos espec\u00edficos que el grupo est\u00e1 organizando durante el mes. \n\n##### Cada Evento debe tener:\n- Titulo\n- Descripci\u00f3n\n- Fecha\n- Hora\n- Meetup\n\n\n\nNota: Piensa en DRY (Don't repeat yourself) y declara solo ***un*** componente y usa ```props``` para manejar una estructura similar pero contenido diferente.\n\nRECUERDA: Las etiquetas de anclaje provocar\u00e1n un redireccionamiento, que no deseas en React. Aseg\u00farate de usar el componente ``` Link ``` de React Router para implementar la navegaci\u00f3n entre vistas.\n\n```jsx\n...\n\n<Link to=\"\/event\">\n\tTitle of event\n<\/Link>\n\n...\n```\n\n\n### Fase 2: dinamizar la aplicaci\u00f3n implementando React Context.\n\n***Utiliza el store para rellenar el contenido ficticio *** dentro de las vistas\/componentes. Se puede acceder a el store utilizando el ```Context.Consumer```\n\n##### Referencia: Usando el Context\n\nThe `store` structure (```\/store\/store.js```):\n\nAlgunos contenidos ficticios.\n\n```javascript\nstore = {\n    events:[\n        {\n            ID: 36,\n            post_content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nec libero consectetur risus vehicula interdum eu at elit. Proin a commodo erat, eu molestie ipsum. Aliquam tristique nunc a est tristique, et convallis risus ullamcorper. Fusce nec massa ac enim pellentesque ornare. Pellentesque non sapien varius, pellentesque tellus sit amet, facilisis justo. Duis rhoncus nunc id elementum dapibus. Sed dictum lacinia vestibulum.\",\n            post_title: \"Lorem Event\",\n            meta_keys: {\n                day: \"20180428\",\n                time: \"07:00:00\",\n                _meetup: \"9\",\n                _rsvpNo: [\n                    \"robert\",\n                    \"jjtime\",\n                    \"username2\"\n                ],\n                _rsvpYes: {\n                    \"cheeselover\",\n                    \"neweradude\",\n                    \"james1996\"\n                }\n            }\n        },\n        ...\n    ],\n    meetups:[\n        {\n            ID: 9,\n            post_content: \"The nicest Meetup ever\",\n            post_title: \"Tech Enthusiasts\",\n        },\n        ...\n    ],\n    session:{\n        ID: 2,\n        username: \"theUser\",\n        password: \"1234\",\n        token: \"qwerty12345asdfgzxcv\"\n    }\n    ]\n};\n```\n\nPara tener acceso a los datos globales, debe importar el contexto:\n```jsx\n\nimport {Context} from '\/path\/to\/store\/appContext.jsx';\n\n...\n\n\/\/Then use the Consumer within the render method\n    render(){\n        return(\n            <Context.Consumer>\n                {\n                    ({store}) => {\n                        \/\/Then you can use the data structure within store into \n                        return (<span> hello, {store.events[0].post_title} <\/span>);\n                        \n                    }\n                }\n            <\/Context.Consumer>\n        );\n    }\n...\n\n```\n\nTodo tu Fetch\/AJAX estar\u00e1 en la secci\u00f3n ```componentDidMount()``` del archivo appContext.jsx.\n\n### \u00bfComo empezar?\n\nComienza con el boilerplate (plantilla) de React.\n\n## Pasos para instalar el boilerplate\n\nNota: breathecode-cli usa nvm 8:\n\n```$ nvm install 8```\n\n```$ nvm use 8```\n\n##### 0. Aseg\u00farate de tener instalado el breathecode-cli en tu entorno. [Instrucciones detalladas](https:\/\/www.npmjs.com\/package\/@breathecode\/breathecode-cli)\n```\n$ npm install -g breathecode-cli\n````\n\n##### 1. Comienza con boilerplate de React\n```\n$ breathecode start:react-project\n```\n##### 2. Instala el \/node_modules\n```\n$ npm install\n```\n##### 3. Ejecutar el servidor de desarrollo webpack.\n```\n$ npm run c9\n```\n\n\u00a1Eso es! Tiempo para codificar.\n\n_\"El momento m\u00e1s espantoso es siempre antes de empezar.\"_\n\n-_Stephen King_\n\n",
        "title": "The Meetup.com Clone using react.js",
        "slug": "meetup-clone-react",
        "status": "published",
        "solution": "#",
        "duration": 24,
        "description": "Use React and HTTP Fetch to create a Meetup.com clone",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 5
            },
            {
                "badge": "be-dry",
                "points": 5
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "source-inspector",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 10
            },
            {
                "badge": "js-inspector",
                "points": 10
            },
            {
                "badge": "sass-master",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            },
            {
                "badge": "the-console",
                "points": 10
            },
            {
                "badge": "mouse-god",
                "points": 5
            },
            {
                "badge": "conditionals",
                "points": 5
            },
            {
                "badge": "looper",
                "points": 5
            },
            {
                "badge": "model-master",
                "points": 5
            },
            {
                "badge": "control-freak",
                "points": 20
            },
            {
                "badge": "model-master",
                "points": 20
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/meetup-clone-react\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/meetup-clone-react\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "meetup-clone-react"
    },
    {
        "translations": [],
        "title": "Memory Game",
        "slug": "memory",
        "status": "draft",
        "info-path": "..\/p\/javascript\/junior\/memory\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/memory\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "memory"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/multi-view-react-website\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Multi view Website with React \n\nTecnolog\u00edas: HTML, CSS, JS, React, react-router, react context.\n\nBasta con las p\u00e1ginas de destino y los proyectos de vista \u00fanica, es hora de crear nuestra primera aplicaci\u00f3n web.\n\nEste es un proyecto de colaboraci\u00f3n, la clase se dividir\u00e1 en 4 grupos y cada uno crear\u00e1 una parte de un sitio web de vista m\u00faltiple.\n\n### Piezas\/Grupos:\n\n- NavBar\/Footer\/Login View (Session) |\nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/carousel\/ & https:\/\/getbootstrap.com\/docs\/4.1\/examples\/sign-in\/\n- Landing Page with Carousel (Products and Posts) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/carousel\/\n- Blog\/Post View (Posts) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/blog\/\n- Store\/Checkout (Products) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/product\/ & https:\/\/getbootstrap.com\/docs\/4.1\/examples\/checkout\/\n\n### Este proyecto est\u00e1 destinado a realizarse en dos fases.\n\n#### Fase 1: configurar las vistas. Reaccionar enrutador.\n\nCada grupo tendr\u00e1 que crear el ***componente vista ***  correspondiente con contenido ficticio (inicialmente) y tantos componentes \"m\u00e1s peque\u00f1os\" como sea necesario.\n\nNota: Piensa DRY (Don't repeat yourself) y declare solo un componente *** y use `` `props``` para manejar contenido diferente.\n\n#### Fase 2: dinamizar la aplicaci\u00f3n. React Context.\n\nEach group must use the Consumer given by the instructor in order to ***use the store to fill the content*** of the pieces:\n\n- Navbar: debe mostrar el nombre de usuario y la imagen del usuario (suponga que el usuario est\u00e1 conectado).\n- Login: Mostrar el formulario de inicio de sesi\u00f3n.\n- Landing Page: debe mostrar 3 publicaciones en el carrusel, 3 publicaciones en una cuadr\u00edcula y 3 productos en la secci\u00f3n de productos.\n- Blog: debe mostrar 6 entradas de blog\n- Post View: debe mostrar los detalles de la publicaci\u00f3n pulsada.\n\n##### Usando el Context\n\nThe `store` structure:\n\n```javascript\nstore = {\n    posts:[\n        {\n            title: 'This is a World Post',\n            content: 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',\n            date: 'Oct 15',\n            tags: ['World'],\n            author: 'Denise A',\n            image: 'https:\/\/venturebeat.com\/wp-content\/uploads\/2015\/09\/Screen-Shot-2015-09-03-at-13.43.14-e1441259794560.png',\n            thumbnail: 'https:\/\/media.takealot.com\/covers_tsins\/50045787\/50045787-1-listgrid.jpg'\n        },\n        ...\n    ],\n    \n    products:[\n        {\n            name: 'Vintage Phone',\n            image: 'https:\/\/images.pexels.com\/photos\/9165\/hand-top-white-old.jpg?auto=compress&cs=tinysrgb&h=500&w=500',\n            price: 300.67,\n            description: 'Embrace nostagia with a brand new flip phone'\n        },\n        ...\n    ],\n    \n    session:{\n        username:'Rigo',\n        email: 'rigocodes@gmail.com',\n        loggedIn: false\n    },\n    \n    cart:[\n        {\n            name: 'Polaroid Camera',\n            image: 'https:\/\/images.pexels.com\/photos\/191160\/pexels-photo-191160.jpeg?auto=compress&cs=tinysrgb&h=500&w=500',\n            price: 129.99,\n            description: 'Get instant photos'\n        },\n        ...\n    ]\n};\n```\n\nPara tener acceso a los datos globales, deber\u00e1 importar el archivo principal del contexto:\n```jsx\nimport {Context} from '\/path\/to\/store\/appContext.jsx';\n\n...\n\n\/\/Then use the Consumer within the render method\n    render(){\n        return(\n            <Context.Consumer>\n                {\n                    ({store}) => {\n                        \/\/Then you can use the data structure within store into \n                        return (<span> hello, {store.session.username} <\/span>);\n                        \n                    }\n                }\n            <\/Context.Consumer>\n        );\n    }\n...\n\n```\n\nSugerencia: puede ver un ejemplo de ```Context.Consumer``` en acci\u00f3n en:\n\n```\ndemo.jsx\n - demoList.jsx\n - demoProducts.jsx\n```\n\n### \u00bfComo Empezar?\n\n##### 1. Clonar el repositorio inicial del instructor.\n```\n$ git clone <repository_url>\n```\n##### 2. Instala el \/node_modules\n```\n$ npm install\n```\n##### 3. Ejecutar el servidor de desarrollo webpack.\n```\n$ npm run c9\n```\n\nListo!\n*tap* *tap* *tap* (Start coding!)\n",
        "title": "Multi View React Web App",
        "slug": "multi-view-react-website",
        "status": "published",
        "solution": "",
        "duration": 24,
        "description": "Create a web app using React router and Context",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 5
            },
            {
                "badge": "be-dry",
                "points": 10
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "source-inspector",
                "points": 5
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 10
            },
            {
                "badge": "js-inspector",
                "points": 10
            },
            {
                "badge": "git-creator",
                "points": 10
            },
            {
                "badge": "the-console",
                "points": 10
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/multi-view-react-website\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/multi-view-react-website\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "multi-view-react-website"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/sorting-cards-with-bubble\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Sorting Cards with Bubble algorithm\n\nLa clasificaci\u00f3n se considera un concepto importante en muchos lenguajes de programaci\u00f3n, ya que nos ayuda a ubicar elementos de una manera m\u00e1s r\u00e1pida y sencilla.\n\nEl algoritmo de clasificaci\u00f3n de burbujas es uno de los m\u00e1s f\u00e1ciles de aprender y ese es el primero que se ense\u00f1a normalmente. Aqu\u00ed hay una explicaci\u00f3n de 5 minutos sobre c\u00f3mo funciona el algoritmo de burbuja:\n[https:\/\/www.youtube.com\/watch?v=xli_FI7CuzA](https:\/\/www.youtube.com\/watch?v=xli_FI7CuzA)\n\n## Instrucciones\n\n1. Crea una funci\u00f3n que genere una lista de cartas al azar.\n1. Permita que el usuario especifique cu\u00e1ntas tarjetas aleatorias debe generar el sitio web utilizando una entrada de texto.\n2. Agregue un bot\u00f3n de \"sorteo\" que, al hacer clic, hace que esas tarjetas en el sitio web sean hermosas.\n3. Agregue un bot\u00f3n de \"clasificaci\u00f3n\" que ordene las tarjetas usando el algoritmo de clasificaci\u00f3n `bubble`.\n4. Guarde todos los cambios dif\u00edciles de realizar al ordenar la lista de tarjetas en una nueva matriz.\n5. Muestra el registro completo de cambios uno encima del otro.\n\nEsta es una animaci\u00f3n de c\u00f3mo deber\u00eda verse su aplicaci\u00f3n:\n![Bubble Sorting Cards on a website](https:\/\/projects.breatheco.de\/json?slug=sorting-cards-with-bubble&preview)\n\nPista:\n\n1. La estrategia primero, nadie comienza a codificar la soluci\u00f3n antes de tener una estrategia clara.\n2. Ap\u00e9gate a tu estrategia, olv\u00eddate del stackoverflow para la estrategia.\n3. Divide y conquista, intenta separar el ejercicio en ejercicios m\u00e1s peque\u00f1os, por ejemplo:\n    - Cree el CSS y HTML codificados antes de intentar que sea din\u00e1mico, eso le dar\u00e1 una idea clara de qu\u00e9 c\u00f3digo HTML necesita construir con su algoritmo.\n    - Primero genere una matriz de tarjetas aleatorias, aseg\u00farese de que se est\u00e1 generando correctamente (utilizando la consola.log) antes de intentar procesarla en el sitio web.\n    - Cree una funci\u00f3n solo para crear el HTML de UNA tarjeta y luego reutil\u00edcela para renderizar todo.",
        "preview": "..\/p\/javascript\/junior\/sorting-cards-with-bubble\/\/preview.gif",
        "title": "Bubble Sorting Cards",
        "slug": "sorting-cards-with-bubble",
        "status": "published",
        "solution": "https:\/\/jsfiddle.net\/BreatheCode\/x53kugn2\/116\/",
        "duration": 4,
        "description": "Practice building algorithms by doing a bubble-sorting algorithm and displaying it on a website",
        "talents": [
            {
                "badge": "identator",
                "points": 6
            },
            {
                "badge": "tag-master",
                "points": 3
            },
            {
                "badge": "select-everything",
                "points": 10
            },
            {
                "badge": "position-vs-display",
                "points": 10
            },
            {
                "badge": "be-dry",
                "points": 10
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "window-lover",
                "points": 3
            },
            {
                "badge": "source-inspector",
                "points": 5
            },
            {
                "badge": "abc",
                "points": 6
            },
            {
                "badge": "functional-developer",
                "points": 6
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/sorting-cards-with-bubble\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/sorting-cards-with-bubble\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "sorting-cards-with-bubble"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/sorting-cards-with-select\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Sorting Cards using the selection algorithm\n\nEl \"algoritmo de selecci\u00f3n de selecci\u00f3n\" es tambi\u00e9n otro ejemplo simple de c\u00f3mo funcionan las computadoras al ordenar la lista de cosas. Aqu\u00ed hay una explicaci\u00f3n de 5 minutos sobre c\u00f3mo funciona el algoritmo de selecci\u00f3n:\n[https:\/\/www.youtube.com\/watch?v=g-PGLbMth_g](https:\/\/www.youtube.com\/watch?v=g-PGLbMth_g)\n\n## Instrucciones\n\n1. Crea una funci\u00f3n que genere una lista de cartas al azar.\n1. Permita que el usuario especifique cu\u00e1ntas tarjetas aleatorias debe generar el sitio web utilizando una entrada de texto.\n2. Agregue un bot\u00f3n de \"sorteo\" que, al hacer clic, hace que esas tarjetas en el sitio web sean hermosas.\n3. Agregue un bot\u00f3n de \"clasificaci\u00f3n\" que ordene las tarjetas usando el algoritmo de clasificaci\u00f3n `selection`.\n4. Guarde todos los cambios dif\u00edciles de realizar al ordenar la lista de tarjetas en una nueva matriz.\n5. Muestra el registro completo de cambios uno encima del otro.\n\nThis is an example of how your application should look:\n\n![Bubble Sorting Cards on a website](https:\/\/projects.breatheco.de\/json?slug=sorting-cards-with-select&preview)\n\nPista:\n\n1. La estrategia primero, nadie comienza a codificar la soluci\u00f3n antes de tener una estrategia clara.\n2. Ap\u00e9gate a tu estrategia, olv\u00eddate del stackoverflow para la estrategia.\n3. Divide y conquista, intenta separar el ejercicio en ejercicios m\u00e1s peque\u00f1os, por ejemplo:\n    - Cree el CSS y HTML codificados antes de intentar que sea din\u00e1mico, eso le dar\u00e1 una idea clara de qu\u00e9 c\u00f3digo HTML necesita construir con su algoritmo.\n    - Primero genere una matriz de tarjetas aleatorias, aseg\u00farese de que se est\u00e1 generando correctamente (utilizando la consola.log) antes de intentar procesarla en el sitio web.\n    - Cree una funci\u00f3n solo para crear el HTML de UNA tarjeta y luego reutil\u00edcela para renderizar todo.",
        "preview": "..\/p\/javascript\/junior\/sorting-cards-with-select\/\/preview.gif",
        "title": "Sorting Cards with Select",
        "slug": "sorting-cards-with-select",
        "status": "published",
        "solution": "https:\/\/jsfiddle.net\/BreatheCode\/8c36nrk5\/7\/",
        "duration": 4,
        "description": "Practice building algorithms by doing a selection-sorting algorithm and displaying it on a website",
        "talents": [
            {
                "badge": "identator",
                "points": 6
            },
            {
                "badge": "tag-master",
                "points": 3
            },
            {
                "badge": "select-everything",
                "points": 10
            },
            {
                "badge": "position-vs-display",
                "points": 10
            },
            {
                "badge": "be-dry",
                "points": 10
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "window-lover",
                "points": 3
            },
            {
                "badge": "source-inspector",
                "points": 5
            },
            {
                "badge": "abc",
                "points": 6
            },
            {
                "badge": "functional-developer",
                "points": 6
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/sorting-cards-with-select\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/sorting-cards-with-select\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "sorting-cards-with-select"
    },
    {
        "translations": [],
        "title": "Tetris with JS",
        "slug": "tetris-js",
        "draft": true,
        "status": "draft",
        "duration": 16,
        "description": "Create a tetris game using js",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/tetris\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/tetris\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "tetris"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/tictactoe-react\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) TicTacToe Con React\n\nEs hora de empezar a construir cosas geniales, \u00a1codifiquemos nuestro primer juego!\n\n<p align=\"center\"><img height=\"300\" src=\"https:\/\/projects.breatheco.de\/json?slug=tictactoe-react&preview\" \/><\/p>\n\n## \ud83d\udcdd Instrucciones\n\nCrea un tictactoe en React.js al igual que [este](https:\/\/projects.breatheco.de\/json?slug=tictactoe-react&preview). Recuerda seguir el flujo de trabajo recomendado para comenzar la codificaci\u00f3n:\n\n1. Dise\u00f1a tu sitemap: \u00bfCu\u00e1ntas p\u00e1ginas \/ vistas?\n2. Dise\u00f1ando tu estructura (wireframe): \u00bfQu\u00e9 componentes y d\u00f3nde?\n3. Comienza a codificar tus componentes solo para mostrar \"Hola mundo\" en cada uno de ellos (para asegurarse de que funcionan).\n4. Crea una lista de todas las posibles interacciones (eventos) del usuario y del sistema que se producen durante el tiempo de ejecuci\u00f3n (por ejemplo: el usuario hace clic en un bot\u00f3n para iniciar el juego)\n6. Crea unas funciones de javascript que manejen cada uno de esos eventos.\n7. `Console.log` en cada una de esas funciones para asegurarse de que se est\u00e1n llamando.\n9. Contin\u00faa... mira el video si tienes alguna otra duda.\n\n### Conceptos que debes aprender:\n\n- State de los componentes (variables globales)\n- Props\n- Met\u00f3do de Renderizado\n- La funci\u00f3n para comprobar el ganador es un gran algoritmo de aprendizaje.\n\n### Video Tutorial:\n\nAqu\u00ed hay un video que explica c\u00f3mo hacerlo: [https:\/\/www.youtube.com\/watch?v=MQonrbY8Ezg&list=PLx0T51ydRO_7qabdLlT69keo68WmbXkrB](https:\/\/www.youtube.com\/watch?v=MQonrbY8Ezg&list=PLx0T51ydRO_7qabdLlT69keo68WmbXkrB)\n\n",
        "preview": "..\/p\/javascript\/junior\/tictactoe-react\/\/preview.gif",
        "title": "TicTacToe with React.js",
        "slug": "tictactoe-react",
        "status": "published",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/tictactoe-react",
        "duration": 16,
        "description": "Create a simple tictactoe 2 player game (no AI), using the React.js framework",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            },
            {
                "badge": "select-everything",
                "points": 5
            },
            {
                "badge": "be-dry",
                "points": 5
            },
            {
                "badge": "css-inspector",
                "points": 5
            },
            {
                "badge": "source-inspector",
                "points": 10
            },
            {
                "badge": "abc",
                "points": 5
            },
            {
                "badge": "functional-developer",
                "points": 10
            },
            {
                "badge": "js-inspector",
                "points": 10
            },
            {
                "badge": "sass-master",
                "points": 5
            },
            {
                "badge": "git-creator",
                "points": 5
            },
            {
                "badge": "the-console",
                "points": 10
            },
            {
                "badge": "mouse-god",
                "points": 5
            },
            {
                "badge": "conditionals",
                "points": 5
            },
            {
                "badge": "looper",
                "points": 5
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/tictactoe-react\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/tictactoe-react\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "tictactoe-react"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/junior\/todo-list-with-fetch\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Segunda parte de la TODO List, agregando fetch\n\nEste ejercicio est\u00e1 destinado a ser completado despu\u00e9s de la [aplicaci\u00f3n de la TODO List](https:\/\/projects.breatheco.de\/d\/todo-list#readme) porque la primera parte es el boilerplate perfecto para comenzar a usar API's.\n\nPara esta segunda parte, sincronizaremos nuestra lista de tareas con una base de datos real, usando la siguiente [RESTful](http:\/\/content.breatheco.de\/lesson\/understanding-rest-apis) y API p\u00fablica realizada para este ejercicio.\n\n\ud83d\udd17 Click aqu\u00ed para acceder a la [documentaci\u00f3n de la API del TODO-list ](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/).\n\nTodo este ejercicio se trata de la programaci\u00f3n de asincrona porque las interacciones `from` y` to` del servidor deben realizarse de forma as\u00edncrona. De esa manera, el usuario no tiene que esperar a que llegue la informaci\u00f3n.\n\n## Instrucciones:\n\n- Haz que tu TODO List se sincronice con la API de backend cada vez que se agregue o elimine una tarea.\n- Agregue un bot\u00f3n de limpieza de todas las tareas que eliminar\u00e1 toda la lista del servidor y actualizar\u00e1 la lista vac\u00eda en el front-end.\n\nHay 3 momentos cr\u00edticos en la l\u00ednea de tiempo de la aplicaci\u00f3n (denominado El tiempo de ejecuci\u00f3n) para centrarse en su integraci\u00f3n:\n- **Despu\u00e9s de que la lista se carga vac\u00eda por primera vez (componentDidMount)**: debes obtener (GET) los datos de la API y actualizar las tareas cuando la informaci\u00f3n finalmente llegue.\n- **Cuando se agrega una nueva tarea**: debes PONER (PUT) la nueva lista en el servidor.\n- **Cuando se elimina una tarea**: Debes PONER (PUT) la nueva lista en el servidor.\n\n## Pista\n\nUtilice la siguiente fetch call para sincronizar tus tareas con el servidor cada vez que haya un cambio en la lista.\n\n```js\nfetch('http:\/\/assets.breatheco.de\/apis\/fake\/todos\/user\/alesanchezr', {\n      method: \"PUT\",\n      body: JSON.stringify(todos),\n      headers: {\n        \"Content-Type\": \"application\/json\"\n      }\n    })\n    .then(resp => {\n        console.log(resp.ok); \/\/ Ser\u00e1 true (verdad) si la respuesta es exitosa.\n        console.log(resp.status); \/\/ el c\u00f3digo de estado = 200 o c\u00f3digo = 400 etc.\n        console.log(resp.text()); \/\/ Intentar\u00e1 devolver el resultado exacto como cadena (string)\n        return resp.json(); \/\/ (regresa una promesa) will try to parse the result as json as return a promise that you can .then for results\n    })\n    .then(data => {\n        \/\/Aqu\u00ed es donde debe comenzar tu c\u00f3digo despu\u00e9s de que finalice la b\u00fasqueda\n        console.log(data); \/\/esto imprimir\u00e1 en la consola el objeto exacto recibido del servidor\n    })\n    .catch(error => {\n        \/\/manejo de errores\n        console.log(error);\n    });\n```\n\nPara cualquier otra solicitud, debes seguir cambiando las variables en el fetch:El URL, el m\u00e9todo y el payload (carga \u00fatil).\n",
        "preview": "..\/p\/javascript\/junior\/todo-list-with-fetch\/\/preview.gif",
        "title": "Todolist Application Using React and Fetch",
        "slug": "todo-list-with-fetch",
        "status": "published",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/todo-list",
        "duration": 8,
        "description": "Create a simple todo web app using the React.js framework and use the API to sync with the server",
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            }
        ],
        "info-path": "..\/p\/javascript\/junior\/todo-list-with-fetch\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/junior\/todo-list-with-fetch\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "junior",
        "category": "javascript",
        "folder-name": "todo-list-with-fetch"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/semi-senior\/battlefield\/",
        "markdown-es": "# battleship-javascript\nUn juego de acorazado muy simple escrito en JavaScript simple: http:\/\/learntocodela.github.io\/battleship-javascript\/\n\nLea sobre el juego y sus reglas aqu\u00ed: https:\/\/en.wikipedia.org\/wiki\/Battleship_(game)\n\n### Paso 1: Crea tus archivos\n\nReferencias utiles:\n- [Final HTML file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/index.html)\n- [Final CSS file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/style.css)\n- [Final JS file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/battleship.js)\n- [CSS Relative and Absolute Positioning](http:\/\/learnlayout.com\/position.html)\n\n### Paso 2: Crea una cuadr\u00edcula en tu p\u00e1gina HTML para el tablero de juego\n\nReferencias utiles:\n- [Document.getElementById()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/document\/getelementbyid\/)\n- [Document.createElement()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/document\/createelement\/)\n- [appendChild()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/node\/appendchild\/)\n- [style property](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/htmlelement\/style\/)\n- [Loops in JavaScript](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/javascript\/guide\/loops_and_iteration\/)\n\n### Paso 3: Modela el tablero de juego en JavaScript y coloca naves.\n\nReferencias utiles:\n- [Arrays in JavaScript](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/javascript\/reference\/global_objects\/array\/)\n\n### Paso 4: Crea un manejador de eventos y escribe la l\u00f3gica del juego.\n\nReferencias utiles:\n- [Events in JavaScript](http:\/\/www.kirupa.com\/html5\/javascript_events.htm)\n- [Handling Events for Many Elements](http:\/\/www.kirupa.com\/html5\/handling_events_for_many_elements.htm)\n- [Handling Events - Eloquent JavaScript Chapter 14](http:\/\/eloquentjavascript.net\/14_event.html)\n\n### Paso 5: Juega el juego!\n\nJuega el juego ac\u00e1: http:\/\/learntocodela.github.io\/battleship-javascript\/\n\nCaracter\u00edsticas a implementar a continuaci\u00f3n:\n- Mostrar mensajes del juego dentro de la p\u00e1gina HTML en lugar de usar [alert()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/Window\/alert\/)\n- Aleatorizar la colocaci\u00f3n de las naves al comienzo de cada juego.\n- Hacer mejores gr\u00e1ficos, tal vez agregar efectos de sonido?\n- \u00a1Crea una versi\u00f3n para 2 jugadores del juego!\n",
        "title": "Battlefield",
        "slug": "battlefield",
        "instructions": [
            {
                "content": "This will be the first instruction",
                "minutes_duration": 1
            },
            {
                "content": "This will be the second instruction",
                "minutes_duration": 1
            }
        ],
        "info-path": "..\/p\/javascript\/semi-senior\/battlefield\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/semi-senior\/battlefield\/",
        "status": "draft",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "semi-senior",
        "category": "javascript",
        "folder-name": "battlefield"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/semi-senior\/music-player\/",
        "markdown-es": "#MP3 Player\n\nPermite crear un reproductor de MP3 comoSpotify.com!\n\n## Fundamentos\n\nEste ejercicio cubre los siguientes fundamentos:\n1. CSS avanzado y HTML\n2. La etiqueta *audio* para emular un reproductor HTML5.\n3. M\u00f3dulos Javascriopt.\n4. Javascript avanzado de las pr\u00e1cticas de programaci\u00f3n.\n5. Trabajar con el DOM.",
        "title": "Create an MP3 player like Spotify.com",
        "slug": "media-player",
        "status": "draft",
        "description": "Use the audio tag to create your own media player",
        "info-path": "..\/p\/javascript\/semi-senior\/music-player\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/semi-senior\/music-player\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "semi-senior",
        "category": "javascript",
        "folder-name": "music-player"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/javascript\/semi-senior\/music-player-react\/",
        "markdown-es": "# Music Player React\n\nVamos a crear un reproductor de MP3 que funciona de manera similar a Spotify, [aqui esta la demo](https:\/\/projects.breatheco.de\/json\/?slug=music-player-react&preview\/).\n\nLos botones siempre deben permanecer en la parte inferior de la ventana gr\u00e1fica (use la posici\u00f3n fijada para eso).\nSolo necesita implementar los botones Reproducir, Pausa, Siguiente y anterior.\n\n\n## Requerimientos\n- Listar las canciones de [esta API](http:\/\/assets.breatheco.de\/apis\/sound\/)utilizando la funci\u00f3n de fetch.\n- Cuando el usuario hace clic en una canci\u00f3n, el jugador debe comenzar a reproducirla.\n- Cuando el usuario hace clic en el bot\u00f3n \"siguiente\", el reproductor debe comenzar a reproducir la siguiente canci\u00f3n de la lista, si no hay una canci\u00f3n siguiente, debe comenzar nuevamente tocando la primera canci\u00f3n de la lista, lo mismo se aplica a la \"anterior\" bot\u00f3n.\n- Use el atributo reaccionar ref para obtener la etiqueta de audio del DOM.\n- No hay necesidad de volumen, sin embargo, lo puedes agregar si te sientes con confianza\n\n## Recomendaciones\n- Nunca llame a la funci\u00f3n setState porque perder\u00e1 el estado de la etiqueta de audio si se llama a la funci\u00f3n de render",
        "preview": "..\/p\/javascript\/semi-senior\/music-player-react\/\/preview.gif",
        "title": "Audio player like Spotify with React.js",
        "slug": "music-player-react",
        "status": "published",
        "description": "Use the audio tag to create your own music player",
        "solution": "https:\/\/bitbucket.org\/codingacademy\/music-player-react",
        "duration": 16,
        "talents": [
            {
                "badge": "tag-master",
                "points": 10
            }
        ],
        "info-path": "..\/p\/javascript\/semi-senior\/music-player-react\/info.json",
        "name": "json",
        "url": "..\/p\/javascript\/semi-senior\/music-player-react\/",
        "visibility": "public",
        "technology": "javascript",
        "difficulty": "semi-senior",
        "category": "javascript",
        "folder-name": "music-player-react"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/beginner\/contact-list-api\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Lista de Contacto con REST API en Flask\n\nCrear y mantener las API REST es EL trabajo diario para la mayor\u00eda de los desarrolladores backend, por lo que es una habilidad que necesitamos para madurar. En este proyecto practicaremos cada paso del proceso de desarrollo de API.\n\nVamos a construir la API que gestiona una base de datos de contactos y expondr\u00e1 p\u00fablicamente los endpoints para que las aplicaciones del cliente (incluida la nuestra) puedan usarla. Esta vez incluiremos *Groups*, una nueva entidad que permitir\u00e1 al sistema agrupar *Contacts*. Ejemplo: Trabajo, Familia, Amigos. **Sugerencia**: podemos implementar esta l\u00f3gica utilizando una relaci\u00f3n *many-to-many* entre las dos tablas.\n\n## \ud83d\udcdd Instrucciones\n\nCrea una API con los siguientes endpoints:\n\n1. Obtenga una lista de todos los contactos `GET \/contact\/all`\n2. Crear un nuevo Contacto `POST \/contact`\n3. Obtener un Contacto espec\u00edfico (con los objetos del grupo al que pertenece) `GET \/contact\/{contact_id}`\n4. Eliminar un Contacto `DELETE \/contact\/{contact_id}`\n5. Actualiza el Contacto `UPDATE \/contact\/{contact_id}`\n6. Obtener una lista de todos los nombres e IDs del grupo `GET \/group\/all`\n7. Crea un nuevo Grupo `POST \/group`\n8. Obtener un grupo espec\u00edfico (con todos los objetos de contacto relacionados con \u00e9l) `GET \/group\/{group_id}`\n9. Actualizar el nombre de grupo `UPDATE \/group\/{group_id}`\n10. Elimina un Grupo `DELETE \/group\/{group_id}`\n\nUn contacto debe tener la siguiente estructura de datos en la base de datos:\n```python\n# Contact\n    id: (int, primary_key)\n    full_name: (string, mandatory)\n    email: (string, mandatory)\n    address: (string, optional)\n    phone: (string, optional)\n    groups: (list of foreign_key)\n\n# Group\n    id: (int, primary_key)\n    name: (string, mandatory)\n    contacts: (list of foreign_key)\n```\n\n## Documentaci\u00f3n formal DE API\n\n1. GET \/contact\/all\n```\n    REQUEST (application\/json)\n        type: GET\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: [\n            {\n                \"full_name\": \"Dave Bradley\",\n                \"email\": \"dave@gmail.com\",\n                \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n                \"phone\":\"7864445566\",\n                \"groups\": [2,3]\n            },\n            ...\n        ]\n```\n2. Crear un nuevo contacto\n```\n    REQUEST (application\/json)\n        type: POST\n        path: \/contact\n        body: {\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n    RESPONSE (application\/json)\n        code: 200 | 400 | 500\n        body: {\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n```\n3. Obtener un contacto espec\u00edfico\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/contact\/{contact_id}\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [\n                {\n                    \"id\": 2,\n                    \"name\": \"Family\"\n                },{\n                    \"id\": 3,\n                    \"name\": \"Gamers\"\n                }\n             ]\n        }\n```\n4. Actualizar un contacto dado\n```\n    REQUEST (application\/json)\n        type: PUT\n        path: \/contact\/{contact_id}\n        body: {\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n```\n5. Eliminar un contacto por id\n```\n    REQUEST (application\/json)\n        type: DELETE\n        path: \/contact\/{contact_id}\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: {\n            \"deleted\": {\n                \"id\": 12,\n                \"full_name\": \"Dave Bradley\",\n            }\n        }\n```\n6. Listar todos los grupos\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/group\/\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 500\n        body: {\n            \"data\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"Work\"\n                },{\n                    \"id\": 2,\n                    \"name\": \"Gamers\"\n                }\n            ]\n        }\n```\n7. Obtener un grupo espec\u00edfico\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/group\/{group_id}\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 2\n            \"name\": \"Work\",\n            \"contacts\": [\n                {\n                    \"id\": 12\n                    \"full_name\": \"Dave Bradley\",\n                    \"email\": \"dave@gmail.com\",\n                    \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n                    \"phone\":\"7864445566\",\n                    \"groups\": [2,3]\n                }\n             ]\n        }\n```\n8. Actualizar el id de un grupo dado\n```\n    REQUEST (application\/json)\n        type: PUT\n        path: \/group\/{group_id}\n        body: {\n            \"name\": \"Beach Crew\",\n        }\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 2\n            \"name\": \"Beach Crew\",\n        }\n```\n9. Eliminar un grupo por id\n```\n    REQUEST (application\/json)\n        type: DELETE\n        path: \/group\/{group_id}\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: {\n            \"deleted\": {\n                \"id\": 2,\n                \"name\": \"Beach Crew\",\n            }\n        }\n```  \n  \n  \n## \ud83d\udca1 \u00bfComo Comenzar?\n\n1. Comienza leyendo las instrucciones muy cuidadosamente.\n2. Build the database model class Contact and Group.\n3. Implemente el m\u00e9todo (POST) para poder agregar algunos contactos y grupos a la base de datos para asegurarse de que tiene datos ficticios.\n4. Crea el GET(all) endpoints. Lista de contactos y lista de grupos.\n5. Implementa el rest de los endpoints.\n6. Conecta tu aplicaci\u00f3n de React Contact List usando `fetch`.\n  \nSugerencia: use Postman como una herramienta de prueba antes de conectar su aplicaci\u00f3n frontal (React Contact List).\n## \ud83d\udcd6 Fundamentos\n\nEste ejercicio te har\u00e1 practicar los siguientes fundamentos:\n\n1. Leer la Documentaci\u00f3n de la API\n2. Construir una RESTful API\n2. Construir modelos de data\n3. Base de Datos SQL\n4. REST API's\n5. Python Flask\n6. Fetch y async\n  \n  \n",
        "preview": "..\/p\/python\/beginner\/contact-list-api\/\/preview.png",
        "title": "Contact List API",
        "slug": "contact-list-api",
        "status": "published",
        "duration": 16,
        "description": "Create the data structures and endpoints to manage a contact list using a database",
        "talents": [
            {
                "badge": "identator",
                "points": 10
            }
        ],
        "info-path": "..\/p\/python\/beginner\/contact-list-api\/info.json",
        "name": "json",
        "url": "..\/p\/python\/beginner\/contact-list-api\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "beginner",
        "category": "python",
        "folder-name": "contact-list-api"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/junior\/family-static-api\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Family Static API\n\n\u00a1La familia Doe necesita una API est\u00e1tica! Necesitamos construir las *estructuras de datos (data structures)* y crear un API endpoint para interactuar con \u00e9l utilizando Postman.\n\n## \u26a0\ufe0f Descarga el boilerplate\n\nPor favor Descarga uno de los siguientes bolerplates para comenzar a codificar tu ejercicio o \u00e1brelo en gitpod.io:\n- Django: [https:\/\/github.com\/breatheco-de\/exercise-family-static-api-django](https:\/\/github.com\/breatheco-de\/exercise-family-static-api-django)\n- Flask: [https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello](https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello)\n\n- Crea el c\u00f3digo necesario para desarrollar los API endpoints descritos m\u00e1s adelante.\n- Los \u00fanicos dos archivos que tienes que editar son:\n\t- For Django: `api\/family_datastructure.py`, `api\/views.py`.\n\t- For Flask: `src\/family_datastructure.py`, `src\/main.py`.\n- Hemos preparado un conjunto de pruebas automatizadas que te dar\u00e1n una idea de si tu c\u00f3digo es correcto, ejecute las pruebas escribiendo `$ pipenv run tests` en la l\u00ednea de comandos (terminal o consola).\n\n## Estructuras de datos (Data structures)\n\nCada **miembro** de la familia Doe debe ser un diccionario, equivalente a [Objetos literales en JS](https:\/\/www.dyn-web.com\/tutorials\/object-literal\/) - y tienen estos valores:\n```\n    + id: Int\n    + first_name: String\n    + last_name: String (Always Doe)\n    + age: Int > 0\n    + gender: String\n    + lucky_numbers: Array of int\n```\nLa estructura de datos **family** ser\u00e1 una clase con la siguiente estructura:\n\n```python\nclass Family:\n\n\tdef __init__(self, last_name):\n\t\tself.last_name = last_name\n        # example list of members\n        self._members = [{\n            \"id\": self._generateId(),\n            \"first_name\": \"John\"\n        }]\n\n    # read-only: Use this method to generate random members ID's when adding members into the list\n    def _generateId(self):\n        return randint(0, 99999999)\n\n\tdef add_member(self, member):\n        ## you have to implement this method\n        ## append the member to the list of _members\n\t\tpass\n\n\tdef delete_member(self, id):\n        ## you have to implement this method\n        ## loop the list and delete the member with the given id\n\t\tpass\n\n\tdef update_member(self, id, member):\n        ## you have to implement this method\n        ## loop the list and replace the memeber with the given id\n\t\tpass\n\n\tdef get_member(self, id):\n        ## you have to implement this method\n        ## loop all the members and return the one with the given id\n\t\tpass\n\n\tdef get_all_members(self, id):\n\t\treturn self._members\n```\n\n## Estos son los miembros iniciales de la familia.\n\n```md\nJohn Doe\n33 Years old\nMale\nLucky Numbers: 7, 13, 22\n\nJane Doe\n35 Years old\nFemale\nLucky Numbers: 10, 14, 3\n\nJimmy Doe\n5 Years old\nMale\nLucky Numbers: 1\n```\n\n## Endpoints\n\nEsta API debe tener dos endpoints, ambos devuelven JSON:\n\n### 1) Obten todos los miembros de la familia:\nLo que devuelve la informaci\u00f3n de la familia de Doe.. Ejemplo:\n\n```md\nGET \/member\n\nRESPONSE (Application\/JSON):\n\n    c\u00f3digo de estado: 200 si se agreg\u00f3 con \u00e9xito, 400 si no lo hace porque el cliente (solicitud) falla, 500 si el servidor encuentra un error\n    content-type: Application\/JSON\n    body: un Objeto JSON que contiene:\n        - miembros: Arreglo de miembros.\n        - family_name: El apellido de la familia.\n        - lucky_numbers: Una matriz con todos los n\u00fameros de la suerte de los miembros de la familia.\n        - sum_of_lucky: Suma de todos los n\u00fameros de la suerte de los miembros de la familia.\n```\nImportant: Hay dos campos que deben calcularse en tiempo de ejecuci\u00f3n:\n- lucky_numbers es la concatenaci\u00f3n de todos los n\u00fameros de la suerte de los miembros de la familia\n- sum_of_lucky es la suma de todos los n\u00fameros de la suerte de los miembros de la familia.\n\n\n### 2) Recupera solo un miembro\n\n```md\nGET \/member\/<int:member_id>\nLo que retorna el miembro de la familia donde`id == member_id`. E, g:\n\nRESPONSE (application\/json):\n\n    c\u00f3digo de estado: 200 si se agreg\u00f3 con \u00e9xito, 400 si no lo hace porque el cliente (solicitud) falla, 500 si el servidor encuentra un error\n    content_type: Application\/JSON\n    body: the member json object\n```\n\n\n\n### 3) A\u00f1adir (POST) un miembro\n\n```md\nPOST \/member\nLo que agrega un nuevo miembro a la estructura de datos de la familia\n\nRESPONSE (application\/json):\n\n    c\u00f3digo de estado: 200 si se agreg\u00f3 con \u00e9xito, 400 si no lo hace porque el cliente (solicitud) falla, 500 si el servidor encuentra un error\n    content_type: Application\/JSON\n    body: the member json object\n```\n\n\n\n### 4) ELIMINA un miembro\n\n```md\nPOST \/member\/<int:member_id>\nQue elimina un miembro dado por el ID dado\n\nRESPONSE (application\/json):\n\n    status_code: 200 if successfully deleted, 400 if it doesn't because the client-side (request) screw up, 500 if the server encouner an error\n    content_type: Application\/JSON\n    body: the member json object\n```\n\n## Requisitos tecnol\u00f3gicos\n\n- Todas las solicitudes y respuestas deben estar en content\/type: application\/json\n- Los c\u00f3digos de respuesta deben ser `200` para tener \u00e9xito,` 400` para una solicitud incorrecta o `404` para no encontrados.\n- Este ejercicio no incluye una base de datos, todo se debe hacer en la memoria RAM.\n",
        "title": "Family Static API with Flask",
        "slug": "family-static-api",
        "status": "published",
        "duration": 8,
        "description": "Create an API to show family members",
        "talents": [
            {
                "badge": "identator",
                "points": 10
            }
        ],
        "info-path": "..\/p\/python\/junior\/family-static-api\/info.json",
        "name": "json",
        "url": "..\/p\/python\/junior\/family-static-api\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "junior",
        "category": "python",
        "folder-name": "family-static-api"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/junior\/family-tree-static-api\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) API est\u00e1tica del \u00e1rbol geneal\u00f3gico\n\nBasado en las tecnolog\u00edas\/estrategias que hemos aprendido, construye una API est\u00e1tica que maneje un \u00e1rbol familiar. Tu eres libre de usar tu propia informaci\u00f3n familiar, tambi\u00e9n puedes usar datos falsos.\n\n## Requerimientos\n\nSu API debe tener, al menos, 7 miembros distribuidos en 3 generaciones:\n\n**abuelos -> padres -> generaci\u00f3n actual**\n\nEl \u00e1rbol geneal\u00f3gico debe representarse como un \u00e1rbol de objetos estructurados, es decir: cada persona (nodo en el \u00e1rbol) debe tener: id, nombre, apellido, edad y una referencia (id) a sus padres e hijos (si corresponde).\n\nLa API debe exponer un endpoint que devuelva la lista completa de miembros de la familia ordenados por mayor a menor.\n\nLa API debe exponer un endpoint que devuelve a un miembro espec\u00edfico del \u00e1rbol familiar por su id (que debe ser \u00fanico) y la informaci\u00f3n sobre sus hijos y padres.\n\n### tecnolog\u00edas\n\nLa API se debe desarrollar utilizando **Flask** y cada punto final debe devolver un archivo *v\u00e1lido* **JSON**.\n\n### Pista\n\nEs posible que desees dibujar (l\u00e1piz y papel) la estructura de \u00e1rbol para tener una estructura \"visual\" en mente. Usa las l\u00edneas para mostrar las referencias entre padres e hijos.\n\nLas referencias deben ser el n\u00famero de identificaci\u00f3n de los miembros.\n\nCrea tus estructuras de datos antes de crear los puntos finales, use variables globales.\n",
        "title": "Family Tree Static API with Flask",
        "slug": "family-tree-static-api",
        "status": "published",
        "duration": 8,
        "description": "Create an API to read from a family tree structure",
        "talents": [
            {
                "badge": "identator",
                "points": 10
            }
        ],
        "info-path": "..\/p\/python\/junior\/family-tree-static-api\/info.json",
        "name": "json",
        "url": "..\/p\/python\/junior\/family-tree-static-api\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "junior",
        "category": "python",
        "folder-name": "family-tree-static-api"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/junior\/todo-list-api\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) API Lista de Todo\n\nEste proyecto puede considerarse la continuaci\u00f3n de la [Aplicaci\u00f3n de TodoList con React y Fetch](https:\/\/projects.breatheco.de\/d\/todo-list-with-fetch#readme).\nVamos a replicar\/codificar esta api exacta: [http:\/\/assets.breatheco.de\/apis\/fake\/todos\/](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/)\n\n## \ud83d\udcdd Instrucciones\n\nCrea una API que se conecte a una base de datos MySQL e implemente los [siguientes endpoints](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/).\n\n1. `[GET] \/todos\/user\/<username>` Obtener la lista de Todos para un usuario en particular.\n2. `[POST] \/todos\/user\/<username>` Crear una nueva lista de Todos de un usuario en particular.\n3. `[PUT] \/todos\/user\/<username>` Actualizar la lista completa de tareas de un usuario en particular.\n4. `[DELETE] \/todos\/user\/<username>` Eliminar un usuario y todas sus tareas.\n\n## \ud83d\udcd6 Fundamentos\n\nEste ejercicio te har\u00e1 practicar los siguientes fundamentos:\n\n1. Construye una RESTful API.\n2. Construye una base de datos con SQLAlchemy.\n3. Migraciones de la base de datos.",
        "slug": "todo-list-api",
        "title": "Todo List API",
        "description": "Todo List API using Flask or Django",
        "status": "published",
        "live-url": "",
        "duration": 8,
        "technologies": [
            "flask",
            "python",
            "json",
            "logging"
        ],
        "talents": [
            {
                "badge": "identator",
                "points": 10
            }
        ],
        "info-path": "..\/p\/python\/junior\/todo-list-api\/info.json",
        "name": "json",
        "demo": "",
        "url": "..\/p\/python\/junior\/todo-list-api\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "junior",
        "category": "python",
        "folder-name": "todo-list-api"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/semi-senior\/queue-management-api\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Sistema de gesti\u00f3n de filas SMS\n\nPermite crear un sistema de filas: el sistema de filas se utiliza en gran medida en las instituciones gubernamentales, aeropuertos, bancos y muchos otros lugares que buscan organizar el tr\u00e1fico entrante.\nLos sistemas de fila tambi\u00e9n se pueden usar para equilibrar la carga de diferentes aplicaciones como:\n- Establecimiento de prioridades en las solicitudes entrantes de servidores web.\n- Inmigraci\u00f3n y solicitudes de visa que deben ser priorizadas.\n- Paquetes de red.\n- etc.\n\n## \ud83d\udcdd Instrucciones\n\n1. Clona el siguiente texto para [python\/django](https:\/\/github.com\/breatheco-de\/exercise-queue-management-django) y lo siguiente para [python\/flask](https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello).\n2. La API debe integrarse con Twilio para poder enviar SMS para notificar a los usuarios cuando llegue su turno.\n3. Crea una API que permita a los clientes administrar una fila simple, use la siguiente estructura de datos para implementar la fila:\n\n```py\nclass Queue:\n\n    def __init__(self):\n        self._queue = []\n        # depending on the _mode, the queue has to behave like a FIFO or LIFO\n        self._mode = 'FIFO'\n\n    def enqueue(self, item):\n    def dequeue(self):\n    def get_queue(self):\n    def size(self):\n        return len(self._queue)\n```\n\n## Ejemplo de Flujo de Trabajo\n\n1. La API recibe una solicitud para agregar a Bob a la fila (`POST \/ new`) con cualquier prioridad particular (FIFO o LIFO).\n2. La API agrega a Bob y le notifica con un SMS de confirmaci\u00f3n, el SMS debe indicar cu\u00e1ntas personas est\u00e1n frente a \u00e9l en la l\u00ednea.\n3. El sistema ahora espera hasta que el endpoint `GET \/ next` se ejecute para procesar a la persona en la fila.\n4. Cada vez que se recibe una solicitud `GET \/ next`, la siguiente persona en la fila se procesa hasta que sea el turno de Bob.\n5. Cuando Bob es procesado, el sistema le env\u00eda otro SMS para avisarle que ha llegado su turno y lo elimina de la lista.\n\n## M\u00e1s Detalles\n\n1. Tu debes crear 3 endpoints para tu API:\n\n- POST `\/new`: Recibir\u00e1 informaci\u00f3n sobre un usuario y lo agregar\u00e1 a la fila.\n- GET `\/next`: Se procesar\u00e1 un punto de la fila.\n- GET `\/all`: Devolver\u00e1 una lista con todos los que est\u00e9n pendientes de ser procesados (la fila actual).\n\n## \ud83d\udcd6 Fundamentos\n\nEste ejercicio te har\u00e1 practicar los siguientes fundamentos:\n\n1. Aqu\u00ed puedes encontrar information sobre [como enviar un sms con twillio](https:\/\/www.twilio.com\/docs\/sms\/send-messages), tendr\u00e1s que registrarse y crear una cuenta (gratis) y tambi\u00e9n registrar un n\u00famero (gratis)\n4. Construir una RESTful API\n5. Estructuras de datos complejas.\n6. Queue (FIFO vs FILO)\n7. SMS.\n",
        "slug": "queue-management-api",
        "title": "Queue Managment API",
        "description": "Cloud-based queue management API",
        "status": "published",
        "live-url": "",
        "duration": 8,
        "technologies": [
            "flask",
            "python",
            "json",
            "static files",
            "logging"
        ],
        "talents": [
            {
                "badge": "identator",
                "points": 10
            }
        ],
        "info-path": "..\/p\/python\/semi-senior\/queue-management-api\/info.json",
        "name": "json",
        "demo": "",
        "url": "..\/p\/python\/semi-senior\/queue-management-api\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "semi-senior",
        "category": "python",
        "folder-name": "queue-management-api"
    },
    {
        "translations": [
            "us",
            "es"
        ],
        "readme": "..\/p\/python\/semi-senior\/tictactoe-api-django\/",
        "markdown-es": "# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) API de TicTacToe Con Django & REST\n\nEste proyecto es una peque\u00f1a implementaci\u00f3n de API para el Proyecto TicTacToe.\n\n## Instrucciones\n\nUsando el [framework de django](https:\/\/www.djangoproject.com\/) y la libreria de [DjangoRest](http:\/\/www.django-rest-framework.org\/) desarrolla una API que implementa la siguiente API a continuaci\u00f3n, no hay necesidad de implementar ning\u00fan protocolo de autenticaci\u00f3n en este momento.\n\n1. Consigue todos los juegos registrados\n```\n\t[GET] \/games\n\tPARAMS: None\n\tREQUEST BODY: None\n\tRESPONSE BODY:\n\t[\n\t\t{\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n```\n2. A\u00f1adir nuevo juego al registro\n```\n\t[POST] \/game\n\tPARAMS: None\n\tREQUEST BODY:\n\t[\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n\tRESPONSE BODY:\n\t[\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n```\n3. Eliminar todos los registros de juegos\n```\n\t[DELETE] \/games\n\tPARAMS: None\n\tREQUEST BODY: NONE\n\tRESPONSE BODY:\n\t{\n\t\tcode: 200,\n\t\tmessage: \"ok\"\n\t}\n```\n",
        "title": "TicTacToe REST API with django",
        "slug": "tictactoe-api",
        "status": "published",
        "live-url": "https:\/\/assets.breatheco.de\/apis\/tictactoe\/",
        "duration": 16,
        "description": "Create a rest API with django-rest",
        "talents": [
            {
                "badge": "functional-developer",
                "points": 10
            },
            {
                "badge": "git-creator",
                "points": 5
            },
            {
                "badge": "the-console",
                "points": 5
            },
            {
                "badge": "conditionals",
                "points": 5
            },
            {
                "badge": "looper",
                "points": 5
            },
            {
                "badge": "abstract-configer",
                "points": 5
            },
            {
                "badge": "package-composer",
                "points": 5
            },
            {
                "badge": "the-console",
                "points": 5
            },
            {
                "badge": "docu-lover",
                "points": 10
            },
            {
                "badge": "transaction-master",
                "points": 10
            },
            {
                "badge": "client-vs-server",
                "points": 10
            },
            {
                "badge": "http-requester",
                "points": 10
            },
            {
                "badge": "speak-json",
                "points": 5
            },
            {
                "badge": "model-master",
                "points": 10
            },
            {
                "badge": "migrator",
                "points": 10
            },
            {
                "badge": "crud-master",
                "points": 10
            },
            {
                "badge": "speak-json",
                "points": 5
            },
            {
                "badge": "speak-json",
                "points": 5
            }
        ],
        "info-path": "..\/p\/python\/semi-senior\/tictactoe-api-django\/info.json",
        "name": "json",
        "demo": "https:\/\/assets.breatheco.de\/apis\/tictactoe\/",
        "url": "..\/p\/python\/semi-senior\/tictactoe-api-django\/",
        "visibility": "public",
        "technology": "python",
        "difficulty": "semi-senior",
        "category": "python",
        "folder-name": "tictactoe-api-django"
    }
]