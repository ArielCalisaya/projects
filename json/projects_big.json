[{"readme":"..\/p\/career-support\/sep1-experience-and-education\/","markdown":"## Experience & Education\nHave you ever written a story about yourself? Well, this may be the first time! You'll write the story of your professional history.\n\nWe want you to start by telling us about your education and work experience. But don't start just yet, there's a right way to do it :) Keep reading and we'll tell you how it's done.\n\n### Instructions\n 1. Carefully read the following content.\n 2. You will be doing your second pull request! Please look for the [Student Exernal Profile repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Find your corresponding student `.YML` file inside the `src\/students\/` folder.\n 4. Update the section about your relevant work experience & education following the indications provided in the rest of this document.\n \n ## How to write your experience and education?\n\n### Work Experience\nYour **work history** is the most important component of your resume. Employers will want know where you have worked, when you worked there, and what responsibilities you held in each role you have had. They will be looking to see how your experience lines up with what they are looking for in prospective employees.\n\n - List the jobs and internships you have held in reverse chronological order, with the most recent positions first.\n - For each position, include: job title, company, location, dates of employment, and a bulleted list of the strongest accomplishments for each job.\n - Verb tense should be present tense for your current job if you are employed, and past tense for prior employment.\n\n#### Things to remember:\n - *Most recent experience first:* Reverse chronological order.\n - *Basic structure:* Company name, position title, date, city\/state.\n - *Bullets:*\n\t - *Active voice:* Start each with an action word.\n\t - *Quantify:* Quantify results and scope of your work.\n\t - *Skills:* Specific  skills  used  to  achieve  that  result\n\t - *Order:* Stronger bullets at the top\n\n### Education\nThe **education section** generally comes next. You need only to list degrees earned, with the highest first, when you have been out of school for a few years.\n\nIf you\u2019re a student or recent graduate, the education section of your resume can be listed above your employment history. If you have work experience, list it below that section. Education should be listed in reverse chronological order, with the most recent and advanced education first. Include the name of the school, the degree earned, and the date you graduated.\n\nWhether you include your GPA on your resume depends on how long ago you graduated and how high your GPA is.\n\n#### Things to remember:\n - *Higher education:* Major, Minor, Institution, graduation date.\n - *Recent graduates:* Include GPA if it\u2019s a 3.0+ and relevant  coursework.\n - *Bootcamps & Courses:* Include course\/bootcamp name, Institution name, and dates.\n - *Page Positioning:* Experience is always first, unless you\u2019re a recent graduate.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMjgwMTc4MTc2LDQxNTQwODEzOSwxMjEzOT\nA5NDAwXX0=\n-->","status":"published","visibility":"internal","title":"Update your Career Experiences and Education","slug":"sep1-experience-and-education","duration":3,"description":"Update the experience and education on your student profile","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/sep1-experience-and-education\/info.json","name":"p","url":"..\/p\/career-support\/sep1-experience-and-education\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"sep1-experience-and-education"},{"readme":"..\/p\/career-support\/sep2-projects\/","markdown":"## Projects\nNow, this is where you're going to tell us how an AWESOME developer you are. We know you're an awesome developer, we already know you, and in this section we want you to show it to everyone else :).\n\n### Instructions\n 1. Carefully read the following content.\n 2.  You will be doing your third pull request! Please look for the [Student Exernal Profile repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Find your corresponding student `.YML` file inside the `src\/students\/` folder.\n 4. Update the section about your relevant projects following the indications provided in the rest of this document.\n\n### Projects Section\nThe **projects** section is instrumental in demonstrating your technical expertise in real world settings.\n\nStrategically **select two to three projects** that you are particularly proud of and demonstrate the breadth of your technical expertise or highlight different skills and competencies.\n\nMake sure to **include working links to GitHub** to all your project's live demos and that the code is accessible for potential review, the code must have a README.md file with ~500 words about the project: What it does, technologies used and interesting challenges you had to overcome when developing it. And lastly, it is recommended to add a small animated GIF demonstration like this one:\n<p align=\"center\">\n<img src=\"https:\/\/ucarecdn.com\/c16892ee-ef76-4733-9448-9360a845ea73\/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4644745a675239795a4a564d4f784a5443542f67697068792e676966.gif\" height=\"250\"  \/>\n<\/p>\nMake it shine!\n\nDescribing projects as part of your professional trajectory offers several distinct advantages:\n-   It establishes you as a experienced professional in your field.  \n-   It demonstrates a proven track record of success.  \n-   It allows potential employers to mentally insert you into a position that requires a similar skill set.\n-   It demonstrates leadership skills and initiative. \n\n### Things to remember:\n - Focus on a few unique or interesting projects that demonstrate mastery of critical skills.\n - Linking your projects to your website or GitHub repository may encourage curious reviewers to dig deeper.\n\n### How to list a project:\n[Name of the project]: [short description of the project]\n\n*Example:*\n**Project: Agricultural Corpus**: [github.com\/jodth07\/mscottee](github.com\/jodth07\/mscotee)\nCreated a searchable database of agricultural documents using Django with MySQL database. Also used Python to clean up the data prior to adding the to the database. The search results provided paginated context text before and after the searched text.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTEwOTQ0MjA0ODQsLTE1MzUwODMxNzNdfQ\n==\n-->\n","status":"published","visibility":"internal","title":"Update your project portfolio","slug":"sep2-projects","duration":3,"description":"Update your project experience on your Student Profile","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/sep2-projects\/info.json","name":"p","url":"..\/p\/career-support\/sep2-projects\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"sep2-projects"},{"readme":"..\/p\/career-support\/sep3-skills\/","markdown":"## Skills\nDo you know what you're good at? No, video games is not a technical skill, neither is watching sports or fashion blogging ;) Although you could include them as personal fun facts in your Summary, what we're looking for here are the skills relevant to what you want to do pro-fe-ssio-na-lly.\n\n### Instructions\n 1. Carefully read the following content.\n 2.  You will be doing your fourth pull request! Please look for the [Student Exernal Profile repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Find your corresponding student `.YML` file inside the `src\/students\/` folder.\n 4. Update the section about your relevant soft, hard & technical skills following the indications provided in the rest of this document.\n \n### Resources\nThe Red Bull Wingfinder: Strengths & Personality Online Test, may be useful to help you identify your strengths and soft skills: \nhttps:\/\/www.wingfinder.com\/\n\n### Skills Section\nThe **skills** section of your resume is a place where you can show your strengths and individuality. Tailor your skills section\nto the kind of job you'd like to apply, including skills that are explicitly mentioned in job postings or known to be valued at the organizations.\n\nDon't hesitate to add skills that may be nontechnical from previous positions you may have held, as they are still valued by employers and are worth emphasizing. Of particular note for development is management, communications, marketing and design skills which are all complementary in typical day to day responsibilities.\n\n - List skills that are most relevant to the job you seek. Think about what the employer is looking for in relation to what you've done and who you are as a person.\n - Don't forget to list very advanced computer programs (only graphic design programs if you're interested in front-end programming) or technologies you've had experience with; proficiency can be seen as added value.\n\n### Skills examples:\n**Front End**\nHTML5\nCSS3\nJavascript\nReact.js\nAngular\n\n**Databases\/Data Management**\nSQL\/MySQL\/SQL Server\nMongoDB\nPostgres\nNatural Language Processing\n\n**Backend and Server Side**\nNodeJS\nPython\nDjango\nRest API\nAJAX\nPHP\nSwagger Documentation\n\n**Other Computer Skills**\nGithub\nPostman\nProficient in Photoshop & Illustrator\nMicrosoft Dynamics\n\n**Languages**\nEnglish\nSpanish\nCantonese\n\n**Soft Skills**\nDetail oriented, creative, proactive, adaptable, organized, Ability to understand business requirements and translate them into technical requirements.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTU4MjU2NzY4M119\n-->","status":"published","visibility":"internal","title":"Update your Skills","slug":"sep3-skills","duration":3,"description":"Update the skills on your student profile","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/sep3-skills\/info.json","name":"p","url":"..\/p\/career-support\/sep3-skills\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"sep3-skills"},{"readme":"..\/p\/career-support\/sep4-summary-statement\/","markdown":"## Summary Statement\nYou don't have to be Hemingway or Charles Dickens to complete this section, but you'll have to invoke your best writing abilities and each of the nine goddesses, daughters of Zeus and Mnemosyne, who preside over the arts and sciences ^^'.\n\n### Instructions\n 1.  Carefully read the following content.\n 2.  You will be doing your fifth pull request! Please look for the [Student Exernal Profile repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 3. Find your corresponding student `.YML` file inside the `src\/students\/` folder.\n 4. Read the following information and write down your own, unique and particular, summary statement.\n 5. Make sure to include your newly acquired developer skills, as well as your career focus (web development, software development, backend, frontend, etc.).\n 6.  You may share your statement with our Career Support team to get feedback from them.\n\n### Summary Statement Section\nA **summary statement** is a short paragraph that highlights your professional skills and experience. It gives hiring managers a glimpse into your expertise before diving into your resume. The goal of a summary statement is to demonstrate your unique value through your professional story, your skills, and accomplishments.\n\nAs hiring managers may read through hundreds of resumes in a week, a strong summary statement can be just what you need to stand out from the pack.\n\nIf you have relevant work experience, keep your summary super short. The piece you really want the hiring manager reading is your most recent work experience.\n\nThe summary statement is just a \u201cbridge\u201d to get the hiring manager into your experience.\n\nHowever, if you\u2019re  changing careers or you\u2019re looking for jobs without any work experience, the summary section needs to stand on its own, and should be longer.\n\n### Things to remember:\n\n - This is the opportunity to showcase your strengths in light of the type of job you want to target.\n - Keep your summary short if you have relevant work experience.\n - Make sure to talk about your strenghts, tops skills, and accomplishments.\n\n### Summary Statement Samples\n#### Sample 1\n\"_Experienced Project Manager with vast IT experience. Skills include computer networking, analytical thinking and creative problem solving. Able to apply customer service concepts to IT to improve user experience for clients, employees and administration._\"\n\n#### Sample 2\n\"_Marketing Manager with over eight years of experience. Proven success in running email marketing campaigns and implementing marketing strategies that have pulled in a 20% increase in qualified leads. Proficient in content, social media and inbound marketing strategies. Skilled, creative and innovative._\"\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbLTEyMzM1Nzc0OTJdfQ==\n-->","status":"published","visibility":"internal","title":"Update your Career Summary","slug":"sep4-summary-statement","duration":3,"description":"Update the summary on your student profile","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/sep4-summary-statement\/info.json","name":"p","url":"..\/p\/career-support\/sep4-summary-statement\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"sep4-summary-statement"},{"readme":"..\/p\/career-support\/sep5-resume\/","markdown":"## Resume\nTo this part of the project we like to call \"Inception\", not only because you're probably gonna have nightmares about this, but also because it's about building a profile inside your profile :D. It's something like PHP (find out what the first P in PHP stands for), but simpler ^^. And also, this is the *inception* of your job-seeking process, so try to enjoy it with confidence and positivism ;).\n\n### Instructions\n 1. Take all the sections of your Student External Profile (SEP), that you've already worked on, and pour them into a one-page long word document, using this layout: (link a pdf de Resume Guide)\n 2. Save your word document as a pdf and name it \"Resume [Name Last Name]\".\n 3. Add a new section to your SEP called Resume.\n 4.  Carefully read the following content.\n 5. You will be doing your final pull request! Please look for the [Student Exernal Profile repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile) again.\n 6. Find your corresponding student `.YML` file inside the `src\/students\/` folder.\n 7. Upload your pdf file.\n\n### Resources\nYou can use the following document as formatting guide:\n - [Resume Building Guide](https:\/\/ucarecdn.com\/d189146c-89d2-4dff-9c5a-40b7812e55ab\/ResumeSetupGuide4Geeks.pdf)\n\nUse the following guide to write a Cover Letter in case you need to: \n - [Cover Letter Guide](https:\/\/ucarecdn.com\/b2577c7c-f990-4367-a080-f000777f0bdc\/4GeeksCoverLetterGuide.pdf)\n\n### Resume Section\nIn this section, you will simply need to upload a pdf file with your resume. But first, you have to build your resume. Creating your resume is the first step to getting a job. \n\nYour resume must have the following sections, which you already have completed:\n 1. Contact Information\n 2. Summary Statement\n 3. Skills\n 4. Projects\n 5. Experience & Education\n\nAlso may include:\n - Relevant Courses and Certifications\n - Volunteer Work\n - Awards\n - Personal Interests and Other Activities\n\n### Keywords\nAn important consideration when building your resume is using job-specific keywords. Employers often search resume banks for special words or requirements specific to a job description. Including keywords in the summary, experience, skills and awards sections of your resume will increase your chances of being flagged as a potential match. You should also use such keywords in the title and brief description of yourself that most job sites request.\n\nKeywords tend to be nouns that are industry-specific qualifications, skills or terms. Some keyword examples include degrees or certifications, job titles, computer lingo, industry jargon, product names, company names and professional organizations.\n\n\n> Written with [StackEdit](https:\/\/stackedit.io\/).\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMzYzNjk5MDQ5XX0=\n-->","status":"published","visibility":"internal","title":"Last update to your Resume","slug":"sep5-resume","duration":3,"description":"Final review to your Student Public Profile","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/sep5-resume\/info.json","name":"p","url":"..\/p\/career-support\/sep5-resume\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"sep5-resume"},{"readme":"..\/p\/career-support\/student-external-profile\/","markdown":" # Student External Profile\n\n<p align=\"center\"><img src=\"https:\/\/projects.breatheco.de\/json?slug=student-external-profile&preview\" height=\"400\" \/><\/p>  \n \n\nIt is time to start your first GitHub contribution. Git offers a way of pushing code into a repository without owning it, or even being invited to it, it is called `Pull Request` and this exercise's main objective is to create your first `Pull Request` ever.\n  \nAt the same time, you will start building your student profile, one of the most significant accomplishments you can have at the academy because:\n- It will be the first version of your developer portfolio.\n- It will be the first version of your Resume (as a coder).\n- It will give more context to your learning experience: You can see a table of everything you will be learning throughout the course.\n  \nThis `Student Showcase` its still in beta and you are one of the first students to become a contributor. You can find the list of students that have their profile already built on the [FOLLOWING URL](http:\/\/sep.4geeksacademy.co\/students\/), you can also click on the students name to find a beta version of how the student profile looks right now.\n  \nDon't worry about the content of your profile, today its just about the YML and making sure you show up on the [student list](http:\/\/sep.4geeksacademy.co\/students\/).\n\n## How to build your own profile inside the Student Showcase?\n\n1. Fork [the repository](https:\/\/github.com\/4GeeksAcademy\/student-external-profile\/).\n\n  ![alt-text](https:\/\/github-images.s3.amazonaws.com\/help\/bootcamp\/Bootcamp-Fork.png)\n  \n  A new repository will be created in your account.\n  \n2. Clone the new repository into your *workspace*.\n  \n  ```$ git clone <url_of_repository> ```\n  \n3. In your *workspace*, create a file `<your_github_username>.yml` file inside `\/src\/students\/` with your profile information. \n\n  The `YML` file must contain all your personal and professional information. Check the details in [Completing the YML file](#completing-the-yml-file)\n  \n  For example: [rigoberto.yml](https:\/\/github.com\/4GeeksAcademy\/student-external-profile\/blob\/master\/src\/students\/example.yml).\n  \n  ```\n  Importante: You should test your `YML` syntax here: http:\/\/www.yamllint.com\/\n  ```\n\n4. Commit and push your changes.\n\n  `$ git add .`\n  \n  `$ git commit -m \"my profile\"`\n  \n  `$ git push origin master`\n  \n\n5. Go back to [Github](https:\/\/github.com) and look for the recently created repository. In it you will find a button to \"Pull Request\" your changes back into the main repository.\n\n  ![alt-text](https:\/\/github-images.s3.amazonaws.com\/help\/pull_requests\/recently_pushed_branch.png)\n\n\nAfter completing the PR (Pull Request) the application will automatically generate your own student portfolio, to see it, see if your name appears here: \n\n**[http:\/\/sep.4geeksacademy.co\/students](http:\/\/sep.4geeksacademy.co\/students)**\n\nYour profile should look like the following:\n\n<p align=\"center\">\n  <img height=\"350\" src=\"https:\/\/raw.githubusercontent.com\/4GeeksAcademy\/student-external-profile\/master\/preview.png\">\n<\/p>\n\n<p align=\"center\">\n  <a href=\"http:\/\/sep.4geeksacademy.co\/sharu725\" target=\"_blank\">Wach Live Demo Here<\/a>\n<\/p>\n\n## Completing the YML file\n\nThe YML file it's comprised of 4 major sections:\n```yml\ntheme: You can choose a theme and skin colors.\nbasic_info: Personal info\neducation: Previous studies.\nexperiences: Previous jobs.\nprojects: Describe the projects you've built as a developer.\npublications: Any articles you have published.\nskills: List your skills with a percentage of expertise.\n```\n\n<p align=\"center\">\n  <img height=\"350\" src=\"https:\/\/raw.githubusercontent.com\/4GeeksAcademy\/student-external-profile\/master\/static\/yml.png\">\n<\/p>\n\nYou can pick a different template and skin, for example:\n\n```yml\ntemplate: \"online-cv\"\nskin: \"orange\"\n```\n","preview":"..\/p\/career-support\/student-external-profile\/\/preview.png","title":"Student External Profile","slug":"student-external-profile","visibility":"internal","status":"published","solution":"","duration":1,"description":"Build the first version of your student external profile that recruiters will see","talents":[{"badge":"fully-committed","points":5},{"badge":"git-brancher","points":5},{"badge":"git-creator","points":5}],"info-path":"..\/p\/career-support\/student-external-profile\/info.json","name":"p","url":"..\/p\/career-support\/student-external-profile\/","technology":"career-support","difficulty":null,"category":"career-support","folder-name":"student-external-profile"},{"readme":"..\/p\/css\/beginner\/html5-form\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  HTML5 Form\n\nForms are boring, they are difficult to style and we have to start dealing the so many user-related stuff here (Like usability, security, validations, etc.).\n\nOn the other hand, forms are responsable for the Web 2.0, they enable interactive websites and all the fun!\n\nOn this proyect you will learn to style forms like a Pro! Using boorstrap components, HTML5 elements and your first small validations!\n\n## Instructions\n\n1. Please use your bootstrap\/css and HTML5 skills to replicate [this exact same form](https:\/\/projects.breatheco.de\/json?slug=html5-form&preview).\n2. Please, to use all the possible tricks that bootstra gives you to style your forms.\n3. You have to make sure all inputes are being used properly: Input type date, email, Input type number, etc.\n4. You also have to make sure to prevent and validate the form in all ways that HTML5 allows you (required inputs, formats, etc.).\n5. Use the input type=date, don't try to code your own date picker calendar.\n\n## Resources\n\nHere is the bootstrap 4 documentation about forms: [https:\/\/getbootstrap.com\/docs\/4.0\/components\/forms\/](https:\/\/getbootstrap.com\/docs\/4.0\/components\/forms\/)\n\n## What to do if you are stuck?\n\nDon't get frustrated and ask for help! After you try on you own for 30min, it is time to stop trying and ask for help.","preview":"..\/p\/css\/beginner\/html5-form\/\/preview.png","status":"published","title":"Create a HTML5 form","slug":"html5-form","solution":"https:\/\/codepen.io\/alesanchezr\/pen\/zeaaVx","duration":3,"description":"Create a HTML5 form with all the typical inputs","talents":[{"badge":"form-inputs","points":10},{"badge":"form-designer","points":10},{"badge":"select-everything","points":10},{"badge":"identator","points":5},{"badge":"tag-master","points":5},{"badge":"be-dry","points":5},{"badge":"abc","points":5}],"info-path":"..\/p\/css\/beginner\/html5-form\/info.json","name":"p","url":"..\/p\/css\/beginner\/html5-form\/","visibility":"public","technology":"css","difficulty":"beginner","category":"css","folder-name":"html5-form"},{"video-id":"0UrDxsUjF4U","timeline":[{"seconds":"1","description":"Introduction"},{"seconds":"77","description":"Configuring the project"},{"seconds":"115","description":"Creating the index.html structure"},{"seconds":"230","description":"Connecting the styles.css"},{"seconds":"292","description":"The post header, image and description"},{"seconds":"572","description":"Removing the header top margin"},{"seconds":"640","description":"Centering the website"},{"seconds":"811","description":"Padding for text separation"},{"seconds":"896","description":"Using display inline-block"},{"seconds":"1336","description":"Last little details"}],"video-path":"..\/p\/css\/beginner\/instagram-feed\/video.json","readme":"..\/p\/css\/beginner\/instagram-feed\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  The Instagram Photo Feed\n\nCongratulations! If you are about to start this project, it means you already have enough knowledge to start doing interesting stuff.\n\n*Deliver, deliver, deliver!*\n\nFrom now on you are going to be treated as a developer, and good developers are the ones that deliver. We are not going to give you stickers for effort, just like in real life your performance is measured on productivity. Period.\n\n## Instructions\n\nUsing everything you have learned with HTML and CSS3, please create a website that replicates [this picture](https:\/\/projects.breatheco.de\/json?slug=instagram-feed&preview) in every way (pixel perfect).\n\nUse the display property like in the old days or the new flex CSS property to make the posts feed.\n\n## Resources\n\n- [This video](https:\/\/www.youtube.com\/watch?v=Y8zMYaD1bz0) from the net ninja is amazing to start understanding the flexbox.\n\nPlease discuss with your coding partner, any other student or mentor about any questions you may have. Coding is hard for everyone.\n","preview":"..\/p\/css\/beginner\/instagram-feed\/\/preview.gif","title":"Simple Instagram Photo Feed","slug":"instagram-feed","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/instagram-without-bootstrap","duration":6,"description":"Very simple instagram simulation to undestand the basics of CSS and HTML5 and how to use them together to create a website.","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/beginner\/instagram-feed\/info.json","name":"p","url":"..\/p\/css\/beginner\/instagram-feed\/","visibility":"public","technology":"css","difficulty":"beginner","category":"css","folder-name":"instagram-feed"},{"readme":"..\/p\/css\/beginner\/instagram-post\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  The Instagram Post\n\nInstagram is one of the most popular user interfaces in the world, this is the first of three exercises that will make you replicate the most important and difficult parts of Instagram.com\n\nIn this case, we are starting with a single post.\n\n## Instructions\n\nCreate the HTML and CSS needed to replicate [this exact same picture](https:\/\/projects.breatheco.de\/json?slug=instagram-post&preview).\n\n## What to do if you are stuck?\n\nAsk the instructor or classmates right away, do not stay stuck for more than 15min because this is one of your first exercises and your are not expected to know everything. Ask questions!!!\n\n## Fundamentals\nThis exercise covers the following fundamentals:\n1. Basic structure for every HTML5 website.\n2. The *Link* tag to import CSS Rules.\n3. Using google fonts.\n3. Using the different selectors available in CSS.\n4. Working with boxes: border, padding and margins.\n5. Overflow.\n6. Using Flex vs Postion vs Float vs Display.\n7. Using a simple form.","preview":"..\/p\/css\/beginner\/instagram-post\/\/preview.png","title":"Instagram Post","slug":"instagram-post","status":"published","solution":"https:\/\/codepen.io\/alesanchezr\/pen\/zeaaVx","duration":4,"description":"Replicate a single instagram post using HTML and CSS","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/beginner\/instagram-post\/info.json","name":"p","url":"..\/p\/css\/beginner\/instagram-post\/","visibility":"public","technology":"css","difficulty":"beginner","category":"css","folder-name":"instagram-post"},{"video-id":"WbZ4W4SoM0c","timeline":[{"seconds":"1","description":"Introduction"},{"seconds":"38","description":"Create sublime project"},{"seconds":"79","description":"Download Sublime 3"},{"seconds":"173","description":"Basic HTML5 Structure"},{"seconds":"479","description":"Creating the HTML for the website"},{"seconds":"515","description":"Linking the website to an CSS Style Sheet"},{"seconds":"687","description":"Centering the postcard Vertically and Horizontally"},{"seconds":"996","description":"Using float to divide the postcard in to sides"},{"seconds":"1346","description":"Working with overflow: hidden"},{"seconds":"1554","description":"Copying colors from other websites"},{"seconds":"1745","description":"Using Google fonts in your website"},{"seconds":"1999","description":"Using FORMS"}],"video-path":"..\/p\/css\/beginner\/postcard\/video.json","readme":"..\/p\/css\/beginner\/postcard\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  The Postcard\n\nWho does not like postcard's? This is one of your first exercises (if not the first) and it's fun and relatively easy :)\n\nLets create a postcard with HTML5 and CSS and then you can share it with your mom or with your other half, she\/he is going to be proud! :)\n\n## Instructions\n\nCreate the HTML and CSS needed to replicate [this exact same picture](https:\/\/projects.breatheco.de\/json?slug=postcard&preview).\n\nHere the url for 4Geeks logo: [http:\/\/assets.breatheco.de\/apis\/img\/icon\/4geeks.png](http:\/\/assets.breatheco.de\/apis\/img\/icon\/4geeks.png)\n\n## What to do if you are stuck?\n\nThere is a video about this exercise, watch it if you are lost. But don't copy everything, try to code some of your own.\n\n## Fundamentals\nThis exercise covers the following fundamentals:\n1. Basic structure for every HTML5 website.\n2. The *Link* tag to import CSS Rules.\n3. Using google fonts.\n3. Using the different selectors available in CSS.\n4. Working with boxes: border, padding and margins.\n5. Overflow.\n6. Using a simple form.\n","preview":"..\/p\/css\/beginner\/postcard\/\/preview.png","title":"Digital Postcard","slug":"postcard","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/postcard","duration":4,"description":"Replicate this postcard with CSS and HTML","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/beginner\/postcard\/info.json","name":"p","url":"..\/p\/css\/beginner\/postcard\/","visibility":"public","technology":"css","difficulty":"beginner","category":"css","folder-name":"postcard"},{"readme":"..\/p\/css\/junior\/bootstrap-red-dashboard\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) The Red Dashboard\n\nBootstrap not only works to create the tipical websites, you can also use it to what to create what is called an [\"admin template\" theme](https:\/\/www.quora.com\/What-is-an-admin-template)\n\n## Goal\n\nBuild an admin template using bootstrap.\n\n## Technologies\n\nHTML5 and CSS.","title":"Bootstrap Red Dashboard Interface","status":"draft","slug":"bootstrap-red-theme","description":"Build a user interface using bootstrap","info-path":"..\/p\/css\/junior\/bootstrap-red-dashboard\/info.json","name":"p","url":"..\/p\/css\/junior\/bootstrap-red-dashboard\/","visibility":"public","technology":"css","difficulty":"junior","category":"css","folder-name":"bootstrap-red-dashboard"},{"readme":"..\/p\/css\/junior\/drawing\/goku\/","markdown":"# Son Goku con CSS3\n\nDibujar con CSS es sorprendente porque los dibujos resultantes son s\u00faper ligeros en peso (casi un 90% menos que sus dibujos PNG o JPG equivalentes).\n\n## Instruciones\n\nPor favor, use su conocimiento de CSS para dibujar la siguiente imagen.\n\n![Son Goku Image](https:\/\/projects.breatheco.de\/json?slug=instagram-feed-bootstrap&preview)","preview":"..\/p\/css\/junior\/drawing\/goku\/\/preview.gif","title":"CSS Drawing Goku","slug":"css-drawing-goku","status":"published","duration":6,"description":"Use your CSS knowledge to draw Goku using Position and Display properties.","talents":[{"badge":"identator","points":5},{"badge":"tag-master","points":5},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/junior\/drawing\/goku\/info.json","name":"p","url":"..\/p\/css\/junior\/drawing\/goku\/","visibility":"public","technology":"css","difficulty":"junior","category":"css","folder-name":"drawing"},{"readme":"..\/p\/css\/junior\/instagram-feed-bootstrap\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) The Instagram Photo Feed (with Bootstrap)\n\nAs a developer, you are given the task to replicate a picture as a website.\n\n## Instructions\n\n1. Create a website that looks exactly [like this one](https:\/\/projects.breatheco.de\/json?slug=instagram-feed-bootstrap&preview).\n2. Start the CSS and HTML from scratch, please do not re-use from another exercise because you will end up having a mess.\n3. Before starting to code make a drawing of the website will all the bootstrap components you will be using.\n4. Once the components are identified start with the navbar (from top to bottom) and try adapting the examples you find on the internet to what you are asked on the picture. Don't just copy and paste, understand and tweek, if you don't understand the names of the classes used in the component you will end-up hitting a wall and being frustrated.\n5. Use all the possible [bootstrap utilities (helpers)](https:\/\/getbootstrap.com\/docs\/4.1\/utilities), take your time to read them all because it will make your life 99% easier.\n6. The projects have to be 100% responsive using the bootstrap grid system.\n7. Use all the possible bootstrap components, the idea is that you learn them so you can re-use them during the rest of your life.\n\n### Resources\n\nYou have the online lesson about bootstrap and the cheat sheet about bootstrap in the assets section. We also recommend [Net Ninja's video tutorials on bootstrap](https:\/\/www.youtube.com\/watch?v=QAgrHLtG1Yk).\n\n### What to do if you are stuck?\n\n- Clean the cache (always refresh with command+shift+R), using the incognito mode on Google Chrome. \n- Look in google for solutions. \n- Talk to the other students. \n- Talk to senior developers you know. \n- Talk to the mentors over slack.\n\n### What **NOT** to do if you are stuck?\n\n- Don't get frust rated and think you are not good at this: All the developers get stuck all the time, ask around! How do you know if you are good at something that you don't know? \nCoding is a science, facts matter and you have no facts. \n- Don't Keep wondering around for hours without seeking help: Google is only as useful as you are good at googling, please speak to other students or your instructors. \n- Change strategy: Einstein once said, if you do the same stuff you will get the same results.\n","preview":"..\/p\/css\/junior\/instagram-feed-bootstrap\/\/preview.gif","title":"Instagram Photo Feed with Bootstrap","slug":"instagram-feed-bootstrap","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/instagram-with-bootstrap\/","duration":6,"description":"This is an improoved version of the first instagram exercise, now using bootstrap.","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/junior\/instagram-feed-bootstrap\/info.json","name":"p","url":"..\/p\/css\/junior\/instagram-feed-bootstrap\/","visibility":"public","technology":"css","difficulty":"junior","category":"css","folder-name":"instagram-feed-bootstrap"},{"readme":"..\/p\/css\/junior\/landing-page\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Simple Landing Page\n\nThis project was taken from the [Landing Page](https:\/\/startbootstrap.com\/template-overviews\/landing-page\/) is a multipurpose landing page template for [Bootstrap](https:\/\/getbootstrap.com\/)\n\n## Goal\n\nDemonstrate how you can build beautiful landing pages with just a few lines of code, thanks to the\nbootstrap CSS framework.\n\n## Technologies\n\nHTML5 and CSS.","title":"Landing Page","slug":"landing-page","status":"draft","duration":6,"description":"Build a beautiful landing page using bootstrap","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/junior\/landing-page\/info.json","name":"p","url":"..\/p\/css\/junior\/landing-page\/","visibility":"public","technology":"css","difficulty":"junior","category":"css","folder-name":"landing-page"},{"readme":"..\/p\/css\/junior\/spotify-landing-page\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Spotify Landing Page\n\nAs a junior developer you are going to be asked to do lots of HTML\/CSS landing pages for marketing purposes.\n\n## \ud83d\udcdd Instructions\n\nReplicate [this exact landing page](https:\/\/projects.breatheco.de\/json?slug=spotify-landing-page&preview) using bootstrap framework, please use the assets found on [the following link](https:\/\/projects.breatheco.de\/p\/css\/junior\/spotify-landing-page\/assets.zip).\n\n![Spotify Landing Page](https:\/\/projects.breatheco.de\/json?slug=spotify-landing-page&preview)\n\n## Goals\n\n1. Demonstrate the perks of using a framework like bootstrap.\n2. Work in a real life website used by one of the most popular companies in the world.\n3. Replicate a real life working environment, doing a real-life typical task.\n\n## Technologies\n\nHTML5, CSS, Bootstrap.\n","preview":"..\/p\/css\/junior\/spotify-landing-page\/\/preview.png","title":"Spotify Landing Page","slug":"spotify-landing-page","status":"published","duration":6,"description":"Replicate a professional real-life landing page using bootstrap","talents":[{"badge":"identator","points":10},{"badge":"tag-master","points":10},{"badge":"path-master","points":10},{"badge":"select-everything","points":10},{"badge":"be-dry","points":10},{"badge":"abc","points":10}],"info-path":"..\/p\/css\/junior\/spotify-landing-page\/info.json","name":"p","url":"..\/p\/css\/junior\/spotify-landing-page\/","visibility":"public","technology":"css","difficulty":"junior","category":"css","folder-name":"spotify-landing-page"},{"readme":"..\/p\/data-modeling\/beginner\/instagram-data-modeling\/","markdown":"# Instagram Data Modeling\n\n![Instagram Data Modeling Preview](https:\/\/projects.breatheco.de\/json?slug=instagram-data-modeling&preview)\n\n## Install the initial boilerplate\n\nDownload the initial boilerplate for this exercises by cloning the following github repository:\n\n```\ngit clone https:\/\/github.com\/breatheco-de\/exercise-instagram-data-modeling\n```\n\n## Exercise\n\n- Create a UML Diagram of the popular platform: **Instagram**.\n- Try to find 4 entities that represent the platform and are key for it to work.\n- Try to include at least 5 *attributes* per entity (some are invisible for the regular user, but not for a coder).\n- Upload your diagram to a github repository and deliver the project when finished.\n\nInside he `src\/models.py` file you will find have a couple of classes describing an example database.\n\nHere is a 4min video explaining what UML is: [https:\/\/www.youtube.com\/watch?v=UI6lqHOVHic](https:\/\/www.youtube.com\/watch?v=UI6lqHOVHic)\n\n## \ud83d\udcddInstructions\n\nYour Job is to update he `src\/models.py` file with the code needed to replicate he instagram data model.\n\nThe project is using the SQLAlchemy Python library to generate the database.\n\n- What tables you think instagram my have on its database: E.g: Post, User, etc.?\n- What properties should go inside the user? or inside the Post table?\n- Please add at least 4 models with all of its properties.\n- Degenerate the diagram.png file at the end by running `$ python3 models.py` on the console.\n\n## \u2754How to generate the UML diagram?\n\nType `$ python3 models.py` on the console.\nOpen he file `diagram.png` to check out your URML diagram!","preview":"..\/p\/data-modeling\/beginner\/instagram-data-modeling\/\/preview.png","status":"published","title":"Building Instagram.com User Stories","slug":"instagram-data-modeling","duration":3,"description":"Use your recently adquired knowledge to build instagram.com user stories","talents":[{"badge":"fully-committed","points":5}],"info-path":"..\/p\/data-modeling\/beginner\/instagram-data-modeling\/info.json","name":"p","url":"..\/p\/data-modeling\/beginner\/instagram-data-modeling\/","visibility":"public","technology":"data-modeling","difficulty":"beginner","category":"data-modeling","folder-name":"instagram-data-modeling"},{"readme":"..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Demo Day Presentation\n\nYour final presentation day marks the beginning of your coding career. Everything has to be perfect :smile:\n\nThe academy makes a great effort in giving you a great platform to shine:\n\n- Invite your family to support you, there will be seats and refreshments for them to feel more comfortable.\n- Be aware that some of our hiring partners could attend to the presentations looking for devs.\n- Dress casual and remember we will be taking pictures.\n- Presentations are recorded, published on the website and sent to our media partners.\n- Finish a polished out version of your final project, make it look amazing!\n- Your entire presentation should not be longer than 15 minutes.\n- Students from recently started cohorts will also be attending.\n\n\n## Instructions\n\n- Create your google slides presentation [based on this one](https:\/\/docs.google.com\/presentation\/d\/1oqRlXWC3rpC2mMGP5guac0rzEuEvBhDkf2aJdWG098s\/edit#slide=id.p) but make it your own, change the design, add\/remove slides, etc. But try to go over the same topics as the original presentation suggests.\n- Prepare a 5 min live demonstration using the final project, make sure you won't encounter any bugs on that particular presentation flow, we will not allow video demonstrations.\n","title":"Demo Day Preparation for Full-Stack Software Development","visibility":"internal","slug":"full-stack-demo-day-preparation","status":"published","duration":20,"description":"Final presentation for the Full-stack Software Development Course","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/info.json","name":"p","url":"..\/p\/final-project\/full-stack\/full-stack-demo-day-preparation\/","technology":"final-project","difficulty":"full-stack","category":"final-project","folder-name":"full-stack-demo-day-preparation"},{"readme":"..\/p\/final-project\/full-stack\/full-stack-mvc\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Making the Prototipe Dynamic\n\nNow that you are aware of Flux it is time to apply it into your project, that way you will practice more and more until you master it.\n\nYou already the project prototipes in HTML and CSS using Bootstrap.\n\n## Instructions:\n\nCreate a centralized MyStore.js and MyActions.js and start coding all your user stories using Flux.\n\n## Workflow:\n\n##### 1) Read your entire list of User Stories and prioritize to start working with  the simple ones first.\n\n##### 2) A great way to begin is to hard-code your store state with fake data and doin all the 'getter' function's first so that you views are able to retreive whatever they need.\n\n##### Steps to hard-core the store with fake data and make the getters:\n\n2.1) Initilize the variable in the store constructor:\n    \n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            constructor(){\n                super();\n                this.state = {\n                    'products': [\n                        \/\/ ..a bunch of fake products here...\n                        { id: 1, title: 'Amazing T-shirt', color: 'read'},\n                        { id: 1, title: 'Amazing T-shirt 2', color: 'blue'},\n                        { id: 1, title: 'Amazing T-shirt 3', color: 'green'}\n                    ],\n                }\n            }\n        }\n```\n2.2) Add the getter:\n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            ...\n            getProducts(){\n                return this.state.products;\n            }\n            ...\n        }\n        export default new MyStore();\n```\n\n2.3) Now you can change all your views and make them reander the products from the store.\n\n```js\nclass AnyView extends Flux.View{\n    constructor(){\n        super();\n        \/\/initialize the local state\n        this.state = {\n            products: []\n        }\n    }\n    ...\n    componentDidMount(){\n        \/\/ you have to re-set the state after the component has been loaded.\n        this.setState({\n            products: MyStore.getProducts()\n        });\n    }\n    ...\n    render(){\n        \/\/ convert the array of products into an array of <Product> components\n        let productsInHTML = this.state.products.map((p) => <Product id={p.id} title={p.title} \/>));\n        \n        \/\/ render the entire array of <Products>\n        return (\n            <div>{productsInHTML}<\/div>\n        );\n    }\n}\n\n```\n##### 3. After your views are able to properly render from the store, proceed to code the \"add\" or \"delete\" functionalities.\n\nFor Example: If you are doing an Online Store (eCommerce) card you can do the 'delete product' and 'add product' first, and leave the edit product for later.\n\n```js\n\/\/ Let's say we are doind the delete, on the html you have to add the listener to the DOM element that will trigger the delete\n<button onClick={() => MyActions.deleteProduct(productId)}>delete product<\/button>\n\n\/\/ On MyActions.js you have to add the deleteProduct function\nclass MyActions extends Flux.Action{\n    deleteProduct(productId){\n        \/\/delete your product here\n        \n        \/\/and dispatch later\n        this.dispatch('MyStore.setProducts', arrayWithProducts);\n    }\n}\n```\nNote: For each user story in your project it is probable that you will have to create a function instide MyActions.js\n\n##### 4. Finish by binding the views with the stores to listen to the store changes.\n","title":"Use MVC to make your Project Dynamic","slug":"full-stack-project-mvc","visibility":"internal","status":"published","duration":20,"description":"Making the prototipe dynamic using MVC","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/full-stack\/full-stack-mvc\/info.json","name":"p","url":"..\/p\/final-project\/full-stack\/full-stack-mvc\/","technology":"final-project","difficulty":"full-stack","category":"final-project","folder-name":"full-stack-mvc"},{"readme":"..\/p\/final-project\/full-stack\/full-stack-project-prototype\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Creating the Prototype\n\nThe best way to experiment how your product will be used, is actually using it. Right? :)\n\nLets build a prototipe by coding our most important pages using CSS, HTML, Bootstrap and React Components.\n\n## Steps\n1. Focus only on your ~3 most important pages\n2. Build your HTML and CSS based on the Wireframe\n3. Once the HTML is finished, move everything to React.js components\n4. Connect your components using React Router.\n5. Create a repository and upload everything to it.","title":"First Prototype","slug":"full-stack-project-prototype","visibility":"internal","status":"published","duration":20,"description":"Create the product prototype","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/full-stack\/full-stack-project-prototype\/info.json","name":"p","url":"..\/p\/final-project\/full-stack\/full-stack-project-prototype\/","technology":"final-project","difficulty":"full-stack","category":"final-project","folder-name":"full-stack-project-prototype"},{"readme":"..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Full-Stack Final Project\n\nIt's time to thing about what you are going to be building, you'll have to develop an entire product, prepare a presentation & demonstrate the product and the idea to family, friends and hiring partners.\n\nThis project should be started after you have the class about Agile Development because you will have to create User Stories and a Kanban Board.\n\n## Instrutions\n\n1. Create the project repository (one for front-end and one for backend): The front-end code shout never be merged with the backend.\n2. Add all your user stories into the front-end [repository issues](https:\/\/help.github.com\/en\/articles\/about-issues) as it will be the main repository for your project specs.\n3. Please create a [Github Kanban Automated Project](https:\/\/help.github.com\/en\/articles\/about-project-boards) with the KANBAN columns: Backlog, Todo, Doing, Done.\n4. Now add the issues into the project as cards, plan for your first iteration.\n\n\n### Technological Requirements for the project:\n\n1. Several HTML5 + CSS3 + Bootstrap pages.\n2. User authentication (Login+Signup+Remind Password).\n3. Custom made API with OAuth.\n4. 3rd party API integration (embeds and iframes don\u2019t count), it has to be a back-end integration.\n5. React.js application using Flux and React Router.\n6. Anything else the student wants to add.\n\n### Methodology Requirements\n\n1. The project must have between 2 - 3 team members (3 is better than 2)\n2. Start by doing the wireframes and user stories and add them into your repository issues and projects (you have to deliver them).\n3. Create all the user stories with acceptance criteria.\n4. Use a Kanban board for follow up on [Github Project Boards](https:\/\/help.github.com\/articles\/about-project-boards\/)\n\n# Building the Wireframe\n\nA great way to polish your user stories is to draft of all your application wireframes.\n\nPlease create all the wireframes for your [application's MVP](https:\/\/www.youtube.com\/watch?v=joNKkWPafZs).\n\n## Steps\n- Start by building a sitemap\n- Then do the wireframe of your home page.\n- Continue drawing the most important pages.\n- Everytime you draw a page, ideantify and highlite the re-usable parts to convert them into components.\n- Try to re-use everything all the time. The less code, the better!\n- Keep it simple!\n\n# [BE LEAN!](https:\/\/www.youtube.com\/watch?v=jBlrLqsjIDw)\n# [Like Really LEAN!](https:\/\/www.youtube.com\/watch?v=X2YoHFuWkqs)\n\n\n","preview":"..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/\/preview.png","title":"Final Project User Stories & Wireframes","slug":"full-stack-project-stories-and-wireframes","status":"published","visibility":"internal","duration":8,"description":"Create the users stories for your final project","talents":[{"badge":"docu-lover","points":15}],"info-path":"..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/info.json","name":"p","url":"..\/p\/final-project\/full-stack\/full-stack-project-stories-and-wireframes\/","technology":"final-project","difficulty":"full-stack","category":"final-project","folder-name":"full-stack-project-stories-and-wireframes"},{"readme":"..\/p\/final-project\/web-development\/fluxify\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Making the Prototipe Dynamic\n\nNow that you are aware of Flux it is time to apply it into your project, \nthat way you will practice more and more until you master it.\n\nYou already the project prototipes in HTML and CSS using Bootstrap.\n\n## Instructions:\n\nCreate a centralized MyStore.js and MyActions.js \nand start coding all your user stories using Flux.\n\n## Workflow:\n\n##### 1) Read your entire list of User Stories and prioritize to start working with  the simple ones first.\n\n##### 2) A great way to begin is to hard-code your store state with fake data and doin all the 'getter' function's first so that you views are able to retreive whatever they need.\n\n##### Steps to hard-core the store with fake data and make the getters:\n\n2.1) Initilize the variable in the store constructor:\n    \n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            constructor(){\n                super();\n                this.state = {\n                    'products': [\n                        \/\/ ..a bunch of fake products here...\n                        { id: 1, title: 'Amazing T-shirt', color: 'read'},\n                        { id: 1, title: 'Amazing T-shirt 2', color: 'blue'},\n                        { id: 1, title: 'Amazing T-shirt 3', color: 'green'}\n                    ],\n                }\n            }\n        }\n```\n2.2) Add the getter:\n```js\n        \/\/ this is an example of a fake store ideal for an eCommerce website hard-coded with a bunch of fake products\n        class MyStore extends Flux.Store{\n            ...\n            getProducts(){\n                return this.state.products;\n            }\n            ...\n        }\n        export default new MyStore();\n```\n\n2.3) Now you can change all your views and make them reander the products from the store.\n\n```js\nclass AnyView extends Flux.View{\n    constructor(){\n        super();\n        \/\/initialize the local state\n        this.state = {\n            products: []\n        }\n    }\n    ...\n    componentDidMount(){\n        \/\/ you have to re-set the state after the component has been loaded.\n        this.setState({\n            products: MyStore.getProducts()\n        });\n    }\n    ...\n    render(){\n        \/\/ convert the array of products into an array of <Product> components\n        let productsInHTML = this.state.products.map((p) => <Product id={p.id} title={p.title} \/>));\n        \n        \/\/ render the entire array of <Products>\n        return (\n            <div>{productsInHTML}<\/div>\n        );\n    }\n}\n\n```\n##### 3. After your views are able to properly render from the store, proceed to code the \"add\" or \"delete\" functionalities.\n\nFor Example: If you are doing an Online Store (eCommerce) card you can do the 'delete product' and 'add product' first, and leave the edit product for later.\n\n```js\n\/\/ Let's say we are doind the delete, on the html you have to add the listener to the DOM element that will trigger the delete\n<button onClick={() => MyActions.deleteProduct(productId)}>delete product<\/button>\n\n\/\/ On MyActions.js you have to add the deleteProduct function\nclass MyActions extends Flux.Action{\n    deleteProduct(productId){\n        \/\/delete your product here\n        \n        \/\/and dispatch later\n        this.dispatch('MyStore.setProducts', arrayWithProducts);\n    }\n}\n```\nNote: For each user story in your project it is probable that you will have to create a function instide MyActions.js\n\n##### 4. Finish by binding the views with the stores to listen to the store changes.\n","title":"First Prototype","visibility":"internal","slug":"web-development-project-fluxify","status":"published","duration":20,"description":"Making the prototipe dynamic using Flux","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/web-development\/fluxify\/info.json","name":"p","url":"..\/p\/final-project\/web-development\/fluxify\/","technology":"final-project","difficulty":"web-development","category":"final-project","folder-name":"fluxify"},{"readme":"..\/p\/final-project\/web-development\/prototype\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Creating the Prototype\n\nThe best way to experiment how your product will be used, is actually using it. Right? :)\n\nLets build a prototipe by coding our most important pages using CSS, HTML, Bootstrap and React Components.\n\n## Steps\n1. Focus only on your ~3 most important pages\n2. Build your HTML and CSS based on the Wireframe\n3. Once the HTML is finished, move everything to React.js components\n4. Connect your components using React Router.\n5. Create a repository and upload everything to it.","title":"First Prototype","visibility":"internal","slug":"web-development-project-prototype","status":"published","duration":20,"description":"Create the product prototype","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/web-development\/prototype\/info.json","name":"p","url":"..\/p\/final-project\/web-development\/prototype\/","technology":"final-project","difficulty":"web-development","category":"final-project","folder-name":"prototype"},{"readme":"..\/p\/final-project\/web-development\/user-stories\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Full-Stack Final Project\n\nIt's time to thing about what you are going to be building, you'll have to develop an entire product, prepare a presentation & demonstrate the product and the idea to family, friends and hiring partners.\n\n## Instrutions\n\n1. Please create a trello board with the KANBAN columns: Backlog, Todo, Doing, Done, Really done\n2. Add all your user stories into your trello boad.\n\n### Technological Requirements:\n\n1. Several HTML5 + CSS3 + Bootstrap pages.\n2. User authentication (Login+Signup+Remind Password).\n3. Custom made API with OAuth.\n4. 3rd party API integration (embeds and iframes don\u2019t count), it has to be a back-end integration.\n5. React.js application using Flux and React Router.\n6. Anything else the student wants to add.\n\n### Methodology Requirements\n\n1. Partner with someone else for the development (groups of 2 people).\n2. Start by doing the wireframes (you have to deliver them).\n3. Create all the user stories with acceptance criteria.\n4. Use a Kanban board for follow up on Trello.com\n\n\n","title":"Final Project User Stories","slug":"web-development-project-stories","visibility":"internal","status":"published","duration":8,"description":"Create the users stories for your final project","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/web-development\/user-stories\/info.json","name":"p","url":"..\/p\/final-project\/web-development\/user-stories\/","technology":"final-project","difficulty":"web-development","category":"final-project","folder-name":"user-stories"},{"readme":"..\/p\/final-project\/web-development\/wireframes\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Wireframing\n\nA great way to polish your user stories is to draft of all your application wireframes.\n\nPlease create all the wireframes for your [application's MVP](https:\/\/www.youtube.com\/watch?v=joNKkWPafZs).\n\n## Steps\n- Start by building a sitemap\n- Then do the wireframe of your home page.\n- Continue drawing the most important pages.\n- Everytime you draw a page, ideantify and highlite the re-usable parts to convert them into components.\n- Try to re-use everything all the time. The less code, the better!\n- Keep it simple!\n\n# [BE LEAN!](https:\/\/www.youtube.com\/watch?v=jBlrLqsjIDw)\n# [Like Really LEAN!](https:\/\/www.youtube.com\/watch?v=X2YoHFuWkqs)","title":"Final Project Wireframes","slug":"web-development-project-wireframes","visibility":"internal","status":"published","duration":8,"description":"Create the wireframe stories for your final project","talents":[{"badge":"docu-lover","points":5}],"info-path":"..\/p\/final-project\/web-development\/wireframes\/info.json","name":"p","url":"..\/p\/final-project\/web-development\/wireframes\/","technology":"final-project","difficulty":"web-development","category":"final-project","folder-name":"wireframes"},{"readme":"..\/p\/javascript\/beginner\/conditional-profile-card\/","markdown":"# Conditional Profile Card\n\nAs a web developer, you will be creatings lots and lots of dynamic HTML using Javascript based algorithms.\n\nIn this exercise you have to create the HTML code needed to render a profile card based on a series of variables that could change in value during runtime. Here is an example of the profile card:\n\n![Conditional Profile Card](https:\/\/projects.breatheco.de\/json?slug=conditional-profile-card&preview)\n\n## Initial Variable Values\n\n| Name | Type | Default Value | Description |\n| --- | --- | --- | --- |\n| includeCover | boolean | true | it determins if the cover shoud be visible with an image or not |\n| background | string | null | the url of the image that will used as background for the profile cover |\n| avatarURL | string | null | the url for the profile avatar |\n| socialMediaPosition | string | \"right\" | it can be `left` or `right` and it determines where to place the social media bar |\n| twitter | string | null | the twitter username to be displayed on the profile |\n| github | string | null | the github username to be displayed on the profile |\n| linkedin | string | null | the linkedin username to be displayed on the profile |\n| instagram | string | null | the instagram username to be displayed on the profile |\n| name | string | null | The name of the user to be displayed on the profile |\n| lastname | string | null | The name of the user to be displayed on the profile |\n| role | string | null | The name of the user to be displayed on the profile |\n| country | string | null | The name of the user to be displayed on the profile |\n| city | string | null | the twitter username to be displayed on the profile |\n\n## Hard-Coded HTML\n\nThis is an example of a possible HTML output, you will have to replace the name, lastname, etc. With the values that these variables may have.\n```html\n<div class=\"widget\">\n  <div class=\"cover\"><img src=\"https:\/\/the_url.com\/for_the_background.png\" \/><\/div>\n  <img src=\"https:\/\/the_url.com\/for_the_image.png\" class=\"photo\" \/>\n  <h1>Ryan Boylett<\/h1>\n  <h2>Web Developer<\/h2>\n  <h3>Miami, USA<\/h3>\n  <ul class=\"position-right\">\n    <li><a href=\"https:\/\/twitter.com\/alesanchezr\"><i class=\"fa fa-twitter\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/github.com\/alesanchezr\"><i class=\"fa fa-github\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/linkedin.com\/alesanchezr\"><i class=\"fa fa-linkedin\"><\/i><\/a><\/li>\n    <li><a href=\"https:\/\/instagram.com\/alesanchezr\"><i class=\"fa fa-instagram\"><\/i><\/a><\/li>\n  <\/ul>\n<\/div>\n```\n\n## Installation\n\n1. Clone this repository to download the initial boilerplate: \n\n`git clone https:\/\/github.com\/breatheco-de\/exercise-conditional-profile-card`\n\n2. Get into the project folder: \n\n`cd exercise-conditional-profile-card`\n\n3. Install NPM packages: `npm install`\nNote: if you're using c9 make sure you are running in the latest version of node: \n\n4. Buid for the first time: `npm run build`\nNote: you will have to build every time you update index.js\n\n5. If you are using cloud 9, right click on the `public\/index.html` file and click \"run\" to start the server and get your public website link.\n\n6. Start updating the `render` function inside the `index.js` file, that is the only file you have to do `npm run build` again and refresh your public website url.\n\nIMPORTANT: every time you update any file you will have to build again in order to update the bundle.\n\n","preview":"..\/p\/javascript\/beginner\/conditional-profile-card\/\/preview.gif","title":"Conditional Profile Card Generator","slug":"conditional-profile-card","status":"published","solution":"https:\/\/github.com\/breatheco-de\/conditional-profile-card","duration":4,"description":"Practice conditions, render a profile card based on a series of variables that could change in value during runtime like: username, avatar, etc.","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"window-lover","points":3},{"badge":"abc","points":5},{"badge":"functional-developer","points":5}],"info-path":"..\/p\/javascript\/beginner\/conditional-profile-card\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/conditional-profile-card\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"conditional-profile-card"},{"readme":"..\/p\/javascript\/beginner\/domain-name-generator\/","markdown":"# The Domain Name Generator\n\nFinding a domain name is hard, why not automate it? :)\n\n## Instructions\n\nCreate a script that generate all the possible domain name combinations\nfrom a list of pronouns, adjectives and nouns, for example:\n\n```\n  var pronoun = ['the','our'];\n  var adj = ['great', 'big' ];\n  var noun = ['jogger','racoon'];\n```\n\nShould generate something like:\n\n```\nthegreatjogger.com\nthegreatracoon.com\nourgreatjogger.com\nourgreatracoon.com\nthebigjogger.com\nthebigracoon.com\nourbigjogger.com\nourbigracoon.com\n```\n\nHint: you'll need to use nested for loops in order to mix the different values together.\n\nYour tools: For loop, string concatenation.\n\n## A bit of history about the project (read only if you care)\n\nBefore the domain market was centralized and converted into a mafia \ncontrolled by Godaddy, Enom and some others. Earsth citizends like you and me \nwere able to buy a .com domain realtively easy. \n\nIn fact, this project was originally built in 2002 by one of 4Geeks teachers \nwhile he was trying to find domain names to buy for several projects.\n\n","title":"Domain Name Generator","slug":"domain-generator","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/domain-generator","duration":4,"description":"The domain mafia is far from over, with more domain extensions every day is a good idea to chase for great domain available to buy. Who knows, maybe you get lucky and become a millionaire!","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"window-lover","points":3},{"badge":"looper","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":5}],"info-path":"..\/p\/javascript\/beginner\/domain-name-generator\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/domain-name-generator\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"domain-name-generator"},{"video-id":"0J4SbVSjxvU","timeline":[{"seconds":"1","description":"Introduction"},{"seconds":"1:08","description":"Installation"},{"seconds":"3:45","description":"Explaining the structure"},{"seconds":"08:10","description":"First run (bundling + hello world)"},{"seconds":"10:05","description":"Where to start coding"},{"seconds":"12:25","description":"First lines of HTML"},{"seconds":"13:49","description":"First lines of Javascript"},{"seconds":"15:29","description":"How to display something on website refresh"},{"seconds":"16:30","description":"How to display something on The DOM"},{"seconds":"17:31","description":"Generating the excuse"},{"seconds":"27:45","description":"Final demonstration"},{"seconds":"28:16","description":"Changing the excuse on button click"}],"video-path":"..\/p\/javascript\/beginner\/excuse-generator\/video.json","readme":"..\/p\/javascript\/beginner\/excuse-generator\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  The Excuse Generator\n\nDisneyland for procrastinators and lazy people. \n\nThis project is ideal to are avoiding someone annoying, it takes no more than 20 lines of code and it can save you for the rest of your life!\n\n## The Goal\n\nWe wanted a project that used very little Javascript but still with a very fun application, the excuse generator takes\n20 lines of code, is super simple to understand and is the perfect first project for any beginner developer.\n\n## Instructions\n\nPlease create a small website that generates an excuse each time a button is pressed, it has to look like this: [Checkout the demo animation](https:\/\/projects.breatheco.de\/json?slug=excuse-generator&preview).\n\n## Discuss with your classmates the strategy first\n\nHow can we generate an excuse? How are sentences build?\n\n![Excuse generator explanation](https:\/\/github.com\/breatheco-de\/projects\/blob\/master\/p\/javascript\/beginner\/excuse-generator\/explanation.gif?raw=true)\n\nThe idea is to generate each part of the sentence randomly to come up with great excuses!\n\n## Hint\n\n1. Create a index.html with one excuse hard-coded, no js, just one excuse in pure plain HTML.\n2. The excuse must be inside an HTML tag that has an id assinged, for example:\n```html\n  <p id=\"excuse\">My dog eat my homework<\/p>\n```\n3. Using javascript, create a function that generates and returns a random excuse with the following structure:\n```js\nlet who = ['the dog','my granma','his turtle','my bird'];\nlet what = ['eat','pissed','crushed','broked'];\nlet when = ['before the class','right in time','when I finished','during my lunch','while I was praying'];\n```\n4. To create a consistent excuse you have to concatenate one item from each array in the proper order.\n5. Call that function onLoad and set the excuse into the innerHTML of the #excuse HTML element.\n\n\n## Technologies\n\nHTML, CSS3, Sass, Javascript, Webpack.\n\n## Fundamentals\nThis exercise covers the following fundamentals:\n1. Using external Javascript files in your project.\n2. How to work with Arrays.\n3. Generating random numbers.\n4. Concatenating strings.\n5. Using functions (at least a bit).\n6. Working with events (at least a bit).\n","preview":"..\/p\/javascript\/beginner\/excuse-generator\/\/preview.gif","title":"The Excuse Generator","slug":"excuse-generator","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/excuse-generator","duration":4,"description":"Disneyland for procrastinators. This excuse generator takes no more than 20 lines of code and can save you for the rest of your life!","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"window-lover","points":3},{"badge":"mouse-god","points":3},{"badge":"source-inspector","points":5},{"badge":"abc","points":5},{"badge":"functional-developer","points":5}],"info-path":"..\/p\/javascript\/beginner\/excuse-generator\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/excuse-generator\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"excuse-generator"},{"readme":"..\/p\/javascript\/beginner\/html5-form-validations\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  HTML5 Form Validations\n\nAfter building the HTML and CSS for this form, we need to make sure it prevents the user from submitting a form with the wrong information or format, in web development we call that: Form Validations.\n\nTo prevent a form submission we have to listen to the \"submit\" event that is triggered by the form itself when the user presses either: the enter\/return key or the submit button.\n\nHere is a little more about preventing an event from occurring: [https:\/\/www.youtube.com\/watch?v=I_fVO_NzT2g&t=401s](https:\/\/www.youtube.com\/watch?v=I_fVO_NzT2g&t=401s)\n\n![Form Validations Preview](https:\/\/projects.breatheco.de\/json?slug=html5-form-validations&preview)\n\n## Instructions\n\nAfter the user submits the form:\n1. Make sure to stop the flow of the submission using `preventDevault()`, [here is a little bit more about preventDefault()](https:\/\/www.youtube.com\/watch?v=3SNyh57XSIA).\n2. After preventing the submission make sure all the input values are correct and properly formatted.\n3. If there are one or more inputs with an invalid value, show a clear error on the top of the form with a very explicit message about what happened.\n2. Change the background color of the relevant inputs (the ones with incorrect data).\n\n## What to do if you are stuck?\n\nDon't get frustrated and ask for help! After trying on your own for 20min, it is time to stop working and ask for help.","preview":"..\/p\/javascript\/beginner\/html5-form-validations\/\/preview.gif","status":"published","title":"Use JS to validate an HTML Form","slug":"html5-form-validations","duration":4,"solution":"https:\/\/codepen.io\/alesanchezr\/pen\/zeaaVx","description":"Use Javascript to validate the inputs of an HTML form (on submit)","talents":[{"badge":"form-inputs","points":10},{"badge":"form-designer","points":10},{"badge":"select-everything","points":10},{"badge":"identator","points":5},{"badge":"tag-master","points":5},{"badge":"be-dry","points":5},{"badge":"abc","points":5}],"info-path":"..\/p\/javascript\/beginner\/html5-form-validations\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/html5-form-validations\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"html5-form-validations"},{"video-id":"kFrWxuKor_Y","timeline":[{"seconds":"1","description":"Introduction"},{"seconds":"52","description":"Instructions "},{"seconds":"3:00","description":"Installation"},{"seconds":"3:40","description":"Structure Explanation"},{"seconds":"4:52","description":"First project run"},{"seconds":"8:55","description":"Creating the HTML"},{"seconds":"10:00","description":"Creating the CSS"},{"seconds":"17:00","description":"Using : before and :after"},{"seconds":"21:12","description":"Creating the Suit CSS Classes"},{"seconds":"23:20","description":"Testing the suites with the inspector "},{"seconds":"24:44","description":"Coding the Javascript"},{"seconds":"26:49","description":"Genereting a random number and suite"},{"seconds":"31:03","description":"Final demonstration"}],"video-path":"..\/p\/javascript\/beginner\/random-card\/video.json","readme":"..\/p\/javascript\/beginner\/random-card\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32)  Random Card Dealer (generator)\n\nIn this project you will learn how to change your website styles during the runtime using [VanillaJS](https:\/\/stackoverflow.com\/questions\/20435653\/what-is-vanillajs) (plain normal js).\n\n## Instructions\n\nCreate and algorithm that randomly builds a card on every refresh:\n\n1. Every time the website refreshes a new random card needs to show\n2. The card must have one of the possible suites: Hearts, Spades, Clubs and Diamons.\n3. The card value must be one of the following: 1 to 10, King, Queen, Jack or Ace (no joker).\n\nIn the end, the project needs to look similar to [this demo](https:\/\/projects.breatheco.de\/json?slug=random-card&preview).\n\n### Hints\n\n- Remember that the first event on a website lifecycle is [onLoad (your code starts running there)](https:\/\/www.w3schools.com\/jsref\/event_onload.asp), you should generate a random number between 1 and 4 to pick a sute and another random number between 0 and 12 to pick a card number.\n- Create a general **.card** class that applies the general styles to each card, and one additional CSS class for each suite: .spade, .club, .heart & .diamond.\n- Apply the .card class to the entire div but only apply one of the suite classes at a time depending on what suite you want to apply. For example a 3 of hearts will have this HTML declaration:\n```\n    <div class='card heart'><\/div>\n```\n- You can use images, icons or HTML character entities to generate the sute symbol into the HTML [Here you can find the character entities](https:\/\/brajeshwar.github.io\/entities\/) for the :before and :after content.\n\n![https:\/\/ucarecdn.com\/7cd14b33-dd69-4680-aaf3-ab16afe2316b\/ScreenShot20190511at30921AM.png](https:\/\/ucarecdn.com\/7cd14b33-dd69-4680-aaf3-ab16afe2316b\/ScreenShot20190511at30921AM.png)","preview":"..\/p\/javascript\/beginner\/random-card\/\/preview.gif","title":"Random Card Generator","slug":"random-card","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/random-card","duration":4,"description":"Use your CSS\/HTML\/JS skills to randomly draw a poker card on every website refresh.","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"select-everything","points":10},{"badge":"position-vs-display","points":10},{"badge":"be-dry","points":10},{"badge":"css-inspector","points":5},{"badge":"window-lover","points":3},{"badge":"source-inspector","points":5},{"badge":"abc","points":6},{"badge":"functional-developer","points":6}],"info-path":"..\/p\/javascript\/beginner\/random-card\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/random-card\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"random-card"},{"video-id":"CMMNdoTJMJM","timeline":[{"seconds":"1","description":"Introduction"}],"video-path":"..\/p\/javascript\/beginner\/simple-counter-react\/video.json","readme":"..\/p\/javascript\/beginner\/simple-counter-react\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Simple Counter with React\n\nReact improves the creation of custom components, which you can render throughout your webapp using the **ReactDOM.render()** method. A custom component allows you to divide and conquer, separating logical and visual challenges into smaller pieces- giving you greater control over the display and functionalities of each part of the webapp.\n\nFor example, to create a bootstrap &#x3C;Card \/&#x3E; component you'd code this:\n\n```jsx\nfunction Card(props){\n    render (\n        <div className=\"card\">\n            <img className=\"card-img-top\" src=\"http:\/\/via.placeholder.com\/350x150\" alt=\"Card image cap\" \/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Card title<\/h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and fill the card's content.<\/p>\n                <a href=\"#\" className=\"btn btn-primary\">Go somewhere<\/a>\n            <\/div>\n        <\/div>\n    );\n}\n```\n\nAfter declaring it, you are able to **import** and **use** it in your webapp like this:\n\n```jsx\n\/\/import react into the bundle\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from '.\/component\/Card.jsx'\n\nReactDOM.render(<Card \/>, document.querySelector('#root'));\n```\n\nAditionally, you can pass information through the Card component using **props**:\n\n```html\n\n<!-- Use of the custom component -->\n<Card imageUrl=\"http:\/\/via.placeholder.com\/350x150\" title=\"A nice image\" \/>\n\n```\n\n... for usage within the render method of your Card component (notice the image src and card title):\n\n```jsx\n\/\/Declaration of custom component (Card.js)\n\nfunction Card(props){\n    render (\n        <div className=\"card\">\n            <img className=\"card-img-top\" src={props.imageUrl} alt=\"Card image cap\" \/>\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{props.title}<\/h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and fill the card's content.<\/p>\n                <a href=\"#\" className=\"btn btn-primary\">Go somewhere<\/a>\n            <\/div>\n        <\/div>\n    );\n}\n```\n\n# Instructions\n\nCreate a seconds-counter component, called ***SecondsCounter***. It should look [like this one](https:\/\/projects.breatheco.de\/json?slug=simple-counter-react&preview).\n\n- The whole purpose of the component is to display how many seconds have passed since the website finished loading (onLoad).\n- Use the ***ReactDOM.render()*** to render the component into the webapp.\n- Use the ***setInterval()*** function to re-render de component on every second.\n- The component does not need a local state, you can pass the number of seconds as **props** like this:\n```\n<SecondsCounter seconds={3434} \/>\n\n```\n- You can find the clock icon on the left of the component in [Font Awesome](https:\/\/fontawesome.com\/).\n\n# Bonus\n- Create an option to countdown from a given number.\n- Create stop, reset, and resume functionality\n- Create an alert when the user reaches a specified time, ie the user enters \"10\", an alert should render notifiying the user that their time was reached\n","preview":"..\/p\/javascript\/beginner\/simple-counter-react\/\/preview.gif","title":"Simple Counter","slug":"simple-counter-react","solution":"https:\/\/bitbucket.org\/codingacademy\/simple-counter-react","status":"published","duration":4,"description":"Use your react.js skills to make a simple counter component","talents":[{"badge":"functional-developer","points":6}],"info-path":"..\/p\/javascript\/beginner\/simple-counter-react\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/simple-counter-react\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"simple-counter-react"},{"video-id":"w06bq6_fRYw","timeline":[{"seconds":"1","description":"Introduction"}],"video-path":"..\/p\/javascript\/beginner\/traffic-light-react\/video.json","readme":"..\/p\/javascript\/beginner\/traffic-light-react\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Traffic Light with React\n\nIt is possible also to create react components using a class declaration.\n\nFor example, to create a &#x3C;TrafficLight \/&#x3E; component using class declaration you can write this code:\n```\nclass TrafficLight extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            \/\/your state properties here\n        }\n    }\n    render(){\n        return (\n            \/\/return your html here\n        )\n    }\n}\n```\n\nUsing class declaration is great beacuse it allows the components to have a state that can be changed during the component lifecycle or during the application runtime.\n\n# Instructions\n\nLet's simulate a traffic light [like this one](https:\/\/projects.breatheco.de\/json?slug=traffic-light-react&preview).\n\nThe light has to glow when clicked.\n\n- The whole purpose of the component is displaying a traffic light with read, yellow and green lights.\n- When any light is clicked (selected) it has to glow, but the other lights have to stop glowing.\n- The component must have a state that stores the current color that should be glowing, that is why you need to declare the component as a class (not as a function) like this:\n```js\nclass TrafficLight extends React.Component{\n    \/\/your constructor and render method here\n}\n```\n- Use the ReactDOM.render to render the component into the DOM like this\n```js\nReactDOM.render(<TrafficLight \/>, document.querySelector('#app'));\n```","preview":"..\/p\/javascript\/beginner\/traffic-light-react\/\/preview.gif","title":"Traffic Light","slug":"traffic-light-react","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/traffic-light-react","duration":4,"description":"Create a small react component with its own state and event listeners","talents":[{"badge":"functional-developer","points":6}],"info-path":"..\/p\/javascript\/beginner\/traffic-light-react\/info.json","name":"p","url":"..\/p\/javascript\/beginner\/traffic-light-react\/","visibility":"public","technology":"javascript","difficulty":"beginner","category":"javascript","folder-name":"traffic-light-react"},{"readme":"..\/p\/javascript\/junior\/calculator\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Calculator\n\nThe calculator is an ideal project to\nhttps:\/\/projects.breatheco.de\/json?slug=calculator&preview","title":"The Calculator","slug":"the-calculator","status":"draft","info-path":"..\/p\/javascript\/junior\/calculator\/info.json","name":"p","url":"..\/p\/javascript\/junior\/calculator\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"calculator"},{"video-id":"CmdPegEyyVs","menuname":"Learn Flux creating a Contact List","timeline":[{"seconds":"0","description":"Introduction"},{"seconds":"145","description":"Why Flux"},{"seconds":"320","description":"Reduct vs Flux"},{"seconds":"372","description":"React Component vs React Page\/View"},{"seconds":"518","description":"The basic workflow"},{"seconds":"660","description":"Flux Workflow in detail"},{"seconds":"795","description":"Start coding! (setup)"},{"seconds":"1000","description":"Simplifying the HTML"},{"seconds":"1115","description":"Action: Creating the \"addContact\" action"},{"seconds":"1220","description":"Store: Declaring the Flux Store"},{"seconds":"1412","description":"View: Listening to store changes (subscription)"},{"seconds":"1788","description":"Integrating everything together (View+Action+Store)"},{"seconds":"2215","description":"Debugging (How to know what is happening)"},{"seconds":"2518","description":"Deleting a contact (view+action+store)"},{"seconds":"3055","description":"Editing a contact (view+action+store)"},{"seconds":"4576","description":"Final summary"}],"video-path":"..\/p\/javascript\/junior\/contact-list\/video.json","readme":"..\/p\/javascript\/junior\/contact-list\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Contact Managment Application \n\nTechnologies: HTML, CSS, JS, React, React Router and Flux.\n\nHello! It is time to start doing professional front-end applications. This time\nwe will be creating a small contact management application that allows users to:\nCreate, Update, Delete and Read contacts. [Check it out here!](https:\/\/projects.breatheco.de\/json?slug=contact-list&preview)\n\n***Please use the Flux architecture for this:*** The Flux architecture is one of the most used proposal for web application architetures.\n\n### How to start?\n\nClone the repository with the boilerplate, it contains no real functionalities \nbut it has 99.99% of the HTML\/CSS that you'll need for the project, \nallowing you to focus on the functionality.\n\n### The project is divided in: \n\n#### Two different views: \n\n1. Contact: Contains the list of contacts.\n2. AddContact: It's just a form that you can use to create or update contatcs.\n\n#### There is one additional component:\nContactCard: Ideal component to display just one contact.\n\n## Expected functionalities\n\n- You have to add the code needed to make your application create, edit, \nand delete contacts from the list.\n- (Optional but is a plus) Ask the user for confirmation before deleting, use the \nModal component for that.\n\n## Steps to install this project\n\n##### 1. Clone the repository\n```\n$ git clone https:\/\/github.com\/breatheco-de\/exercise-contact-list.git\n```\n##### 2. Install the \/node_modules\n```\n$ npm install\n```\n##### 3. Run the webpack development server\n```\n$ npm run c9\n```\n\nThat is it! Start coding your ReactJS+Flux application.","preview":"..\/p\/javascript\/junior\/contact-list\/\/preview.gif","title":"Contact List App Using React & Flux","slug":"contact-list","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/contact-list","duration":24,"description":"Create a simple contact list application using the React.js framework and Flux Architecture","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":5},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"sass-master","points":5},{"badge":"git-creator","points":5},{"badge":"the-console","points":10},{"badge":"mouse-god","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5},{"badge":"model-master","points":5},{"badge":"control-freak","points":20},{"badge":"model-master","points":20}],"info-path":"..\/p\/javascript\/junior\/contact-list\/info.json","name":"p","url":"..\/p\/javascript\/junior\/contact-list\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"contact-list"},{"readme":"..\/p\/javascript\/junior\/contact-list-context\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Contact Managment Application \n\nTechnologies: HTML, CSS, JS, React, React Router and Context.\n\nHello! It is time to start doing professional front-end applications. This time\nwe will be creating a small contact management application that allows users to:\nRead, Create, Update and Delete contacts. [Check it out here!](https:\/\/projects.breatheco.de\/json?slug=contact-list&preview)\n\n***Please use the Context for this project:*** The boilerplate comes with the Context configured. Check the ```\/store``` folder.\n\n### How to start?\n\nClone the repository with the boilerplate, it contains no real functionalities \nbut it has 99.99% of the HTML\/CSS that you'll need for the project, \nallowing you to focus on the functionality.\n\n***Note: You'll need to code all functionalities.***\n\n### The project is divided in: \n\n#### Two different views: \n\n1. Contact: Contains the list of contacts.\n2. AddContact: It's just a form used to create or update contacts.\n\n#### One component:\nContactCard: displays just one contact.\n\n## TO-DO functionalities\n\n- You have to add the code needed to make your application handle contacts, specifically: \n    - create, \n    - update, \n    - and delete.\n- (Optional) Ask the user for confirmation before deleting, use the Modal component for that.\n\nAll the functionalities must be implemented in the ```actions``` object (store.js).\n\nHint: start with some dummy content in the store (store.js).\n\n```Fetch``` the data from the API: https:\/\/assets.breatheco.de\/apis\/fake\/contact\/\n\nHint: Use Postman to try the API endpoints before coding.  \n\n## Steps to install this project\n\n##### 1. Clone the repository\n```\n$ git clone https:\/\/github.com\/breatheco-de\/exercise-contact-list-context.git\n```\n##### 2. Install the \/node_modules\n```\n$ npm install\n```\n##### 3. Run the webpack development server\n```\n$ npm run start\n```\n\nThat is it! Start coding your React Application :)\n","preview":"..\/p\/javascript\/junior\/contact-list-context\/\/preview.gif","title":"Contact List App Using React & Context","slug":"contact-list-context","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/contact-list-context","duration":24,"description":"Create a simple contact list application using React.js","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":5},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"sass-master","points":5},{"badge":"git-creator","points":5},{"badge":"the-console","points":10},{"badge":"mouse-god","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5},{"badge":"model-master","points":5},{"badge":"control-freak","points":20},{"badge":"model-master","points":20}],"info-path":"..\/p\/javascript\/junior\/contact-list-context\/info.json","name":"p","url":"..\/p\/javascript\/junior\/contact-list-context\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"contact-list-context"},{"title":"Shuffle the Deck","slug":"deck-shuffler","status":"draft","info-path":"..\/p\/javascript\/junior\/deck-shuffler\/info.json","name":"p","url":"..\/p\/javascript\/junior\/deck-shuffler\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"deck-shuffler"},{"readme":"..\/p\/javascript\/junior\/hangman\/","markdown":"# The Hangman Game","title":"The Hangman","slug":"hangman","status":"draft","info-path":"..\/p\/javascript\/junior\/hangman\/info.json","name":"p","url":"..\/p\/javascript\/junior\/hangman\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"hangman"},{"readme":"..\/p\/javascript\/junior\/landing-page-with-react\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Landing page with React \n\nTechnologies: HTML, CSS, JS, React.\n\nOk, time to take it up a notch. Let's build [this landing page](https:\/\/blackrockdigital.github.io\/startbootstrap-heroic-features\/) using React Function Components.\nThe idea is to split Bootstrap components into different function Components, they'll be all imported in the main component Home.jsx\n\n***Please use Function Components for this***\n\nNote: the Cards have different content, think DRY (Don't repeat yourself) and declare only ***one*** component and use ```props``` to handle different content.\n\n### How to start?\n\nStart with the React boilerplate.\n\n## Steps to install this project\n\n##### 0. Make sure you have breathecode-cli installed in your environment. [Detailed instructions](https:\/\/www.npmjs.com\/package\/breathecode-cli)\n```\n$ npm install -g breathecode-cli\n```\n##### 1. Start the React boilerplate\n```\n$ breathecode start:react-project\n```\n###### (optional) Check if your folder has a ```package.json``` file, otherwise, move to that folder (```cd```):\n\n##### 2. Install the \/node_modules\n```\n$ npm install\n```\n##### 3. Run the webpack development server\n```\n$ npm run c9\n```\n\nThat is it! Start coding your first React website.\nHave fun!\n","preview":"..\/p\/javascript\/junior\/landing-page-with-react\/\/preview.gif","title":"Landing Page with React","slug":"landing-page-with-react","status":"published","solution":"https:\/\/blackrockdigital.github.io\/startbootstrap-heroic-features\/","duration":12,"description":"Create a simple landing page using React.js components","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":10},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":5},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"git-creator","points":10},{"badge":"the-console","points":10}],"info-path":"..\/p\/javascript\/junior\/landing-page-with-react\/info.json","name":"p","url":"..\/p\/javascript\/junior\/landing-page-with-react\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"landing-page-with-react"},{"readme":"..\/p\/javascript\/junior\/meetup-clone-react\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Meetup Clone with Context\n\nTechnologies: HTML, CSS, JS, React, React Hooks, React Router and React Context API.\n\nHello! It is time to begin creating professional front-end applications. This time\nwe will be building a small Meetup.com clone that allows users to Browse and RSVP events, very similar to how Meetup.com works.\n\n**Event**s the are center entity in the system, the main view (Home) will have a list of **Event**s organized by date.\nEach **Event** is linked to _a single **Group**_.\nA **Group** can be linked to _one or more_ **Event**s.\n\n_This project is optimized for groups of 2-3 students._\n\n## This project is meant to be done in two phases\n\nFirst we want to focus on the visuals, make sure the viewable structures are working correctly. \nSecondly, we should implement the dynamic data display.\n\n### Phase 1: Create the views, then link them with React Router in your Layout Component.\n\nEach group must create the projects ***view components***:\n\n- Home (List of Events)\n- Event detail (View of a specific Event)\n- Group detail (View for the Group with a list of upcomming events for the group)\n\n***NOTE:*** You should draw wireframes first to gather your ideas. Also, make sure to use dummy content initially. PLEASE USE MEETUP.COM AS A DESIGN REFERENCE!\n\n#### Each Group must have\n\n- Title\n- Description\n- Members\n\n#### Each Event must have\n\n- Title\n- Description\n- Date\n- Time\n- Group (This is an ID for the group)\n\nAfter you finish your wireframes, get to coding. Please make sure to only use functional components and if you need to define state variables or do something during the component lifecycle, use the corresponding hooks. (`useState()` and `useEffect()`)\n\n***Note:*** Think DRY (Don't repeat yourself) and declare only ***one*** component and use ```props``` to handle similar structure but different content. Context should be used only when you need to share data between many views. Always use props when you can and context sparingly.\n\n***REMEMBER:*** Anchor tags will cause a redirect, which you don't want in React. Be sure to import and use the ```Link``` component from React Router to implement the navigation between views.\n\n```jsx\n...\n\n<Link to=\"\/event\">\n    Title of event\n<\/Link>\n\n...\n```\n\n### Phase 2: Make the app dynamic by implementing React Context\n\nReact context is built into the flux boilerplate. If you are having trouble understanding how context works, please take a look at the demo component that comes with it. (In your views folder)\n\n***Use the store to fill the dummy content*** within the views\/components. The store is accessible using the ```Context.Consumer```\n\n#### Reference: Using the Context\n\nThe `store` structure (```\/store\/store.js```):\n\nBelow, you will find an example of the date for the Meetup clone. This consists of 2 arrays (events and meetups) and an abject for the user session.\n\nYou can replace your current store object with this data and even expand it to add more events and groups. Remember that this is placeholder data for now. Later on, we will be using fetch to pull the data in from an API.\n\n```javascript\nstore: {\n    events:[\n        {\n            ID: 36,\n            post_content: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed nec libero consectetur risus vehicula interdum eu at elit. Proin a commodo erat, eu molestie ipsum. Aliquam tristique nunc a est tristique, et convallis risus ullamcorper. Fusce nec massa ac enim pellentesque ornare. Pellentesque non sapien varius, pellentesque tellus sit amet, facilisis justo. Duis rhoncus nunc id elementum dapibus. Sed dictum lacinia vestibulum.\",\n            post_title: \"Lorem Event\",\n            meta_keys: {\n                day: \"20180428\",\n                time: \"07:00:00\",\n                _groupId: 9,\n                _rsvpNo: [\n                    \"robert\",\n                    \"jjtime\",\n                    \"username2\"\n                ],\n                _rsvpYes: [\n                    \"cheeselover\",\n                    \"neweradude\",\n                    \"james1996\"\n                ]\n            }\n        }\n    ],\n    Groups:[\n        {\n            ID: 9,\n            post_content: \"The nicest Meetup ever\",\n            post_title: \"Tech Enthusiasts\",\n            members: [\n                \"robert\",\n                \"jjtime\",\n                \"username2\",\n                \"cheeselover\",\n                \"neweradude\",\n                \"james1996\"\n            ]\n        }\n    ],\n    session:{\n        ID: 2,\n        username: \"theUser\",\n        user_friendly_name:\"Joey\",\n        token: \"qwerty12345asdfgzxcv\"\n    }\n};\n```\n\nIn order to have access to the global data from your store in one of your components, you must import the context consumer. See the example below.\n\n```jsx\n\nimport {Consumer} from '\/path\/to\/store\/appContext.jsx';\n\n...\n\n\/\/Then use the Consumer within your return\n    return(\n        <Consumer>\n            {\n                ({store}) => { \/\/When you destructure the store here, you can also pass actions.\n                    \/\/Then you can use the data structure within store into\n                    return (<span> hello, {store.events[0].post_title} <\/span>);\n                }\n            }\n        <\/Consumer>\n    );\n...\n\n```\n\nAll of your Fetch\/AJAX calls will be in the ```useEffect()``` section of the appContext.jsx file. Due to the way the boilerplate is built, this area handles the calls that are done only at the initial load of your application.\n\n## How to start\n\nStart with the React boilerplate.\n\n### Steps to use the boilerplate with Gitpod\n\n1. Login to `student.breatheco.de`\n2. From the left navigation, click on `<\/> Start New Project`\n3. In the main panel, select `New React Flux`\n\n### Steps to install the boilerplate locally (Mac\/Linux)\n\nNote: breathecode-cli uses nvm 8:\n\n```$ nvm install 8```\n\n```$ nvm use 8```\n\n#### 0. Make sure you have breathecode-cli installed in your environment. [Detailed instructions](https:\/\/www.npmjs.com\/package\/@breathecode\/breathecode-cli)\n\nIn your terminal, run the command:\n\n```bash\nnpm install -g breathecode-cli\n```\n\n#### 1. Start the React boilerplate\n\nIn your terminal, run the command:\n\n```bash\nbc start:react-project\n```\n\n#### 2. Install the \/node_modules\n\nIn your terminal, run the command:\n\n```bash\nnpm install\n```\n\n#### 3. Run the webpack development server\n\nIn your terminal, run the command:\n\n```bash\nnpm run dev-server\n```\n\nThat's it! Time to code.\n\n_\"The scariest moment is always before you start\"_\n\n-_Stephen King_\n","title":"The Meetup.com Clone using react.js","slug":"meetup-clone-react","status":"published","solution":"#","duration":24,"description":"Use React and HTTP Fetch to create a Meetup.com clone","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":5},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"sass-master","points":5},{"badge":"git-creator","points":5},{"badge":"the-console","points":10},{"badge":"mouse-god","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5},{"badge":"model-master","points":5},{"badge":"control-freak","points":20},{"badge":"model-master","points":20}],"info-path":"..\/p\/javascript\/junior\/meetup-clone-react\/info.json","name":"p","url":"..\/p\/javascript\/junior\/meetup-clone-react\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"meetup-clone-react"},{"title":"Memory Game","slug":"memory","status":"draft","info-path":"..\/p\/javascript\/junior\/memory\/info.json","name":"p","url":"..\/p\/javascript\/junior\/memory\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"memory"},{"readme":"..\/p\/javascript\/junior\/multi-view-react-website\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Multi view Website with React \n\nTechnologies: HTML, CSS, JS, React, react-router, react context.\n\nEnough with the landing pages and single view projects, it is time to build our first web app. \n\nThis is a collaborative project, the class will be separated in 4 groups and each will create a piece of a multi view website.\n\n### Pieces\/Groups:\n\n- NavBar\/Footer\/Login View (Session) |\nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/carousel\/ & https:\/\/getbootstrap.com\/docs\/4.1\/examples\/sign-in\/\n- Landing Page with Carousel (Products and Posts) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/carousel\/\n- Blog\/Post View (Posts) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/blog\/\n- Store\/Checkout (Products) | \nhttps:\/\/getbootstrap.com\/docs\/4.1\/examples\/product\/ & https:\/\/getbootstrap.com\/docs\/4.1\/examples\/checkout\/\n\n### This project is meant to be done in two phases\n\n#### Phase 1: set the views. React Router.\n\nEach group will have to create the correspondant ***view component*** with dummy content (initially) and as many \"smaller\" components as needed.\n\nNote: Think DRY (Don't repeat yourself) and declare only ***one*** component and use ```props``` to handle different content.\n\n#### Phase 2: make the app dynamic. React Context.\n\nEach group must use the Consumer given by the instructor in order to ***use the store to fill the content*** of the pieces:\n\n- Navbar: must show the user's username and picture (assume the user is logged in).\n- Login: show the login form.\n- Landing Page: must show 3 posts in the carousel, 3 post in a grid and 3 products in the products section.\n- Blog: must show 6 blog posts\n- Post View: must show clicked post details.\n\n##### Using the Context\n\nThe `store` structure:\n\n```javascript\nstore = {\n    posts:[\n        {\n            title: 'This is a World Post',\n            content: 'Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.',\n            date: 'Oct 15',\n            tags: ['World'],\n            author: 'Denise A',\n            image: 'https:\/\/venturebeat.com\/wp-content\/uploads\/2015\/09\/Screen-Shot-2015-09-03-at-13.43.14-e1441259794560.png',\n            thumbnail: 'https:\/\/media.takealot.com\/covers_tsins\/50045787\/50045787-1-listgrid.jpg'\n        },\n        ...\n    ],\n    \n    products:[\n        {\n            name: 'Vintage Phone',\n            image: 'https:\/\/images.pexels.com\/photos\/9165\/hand-top-white-old.jpg?auto=compress&cs=tinysrgb&h=500&w=500',\n            price: 300.67,\n            description: 'Embrace nostagia with a brand new flip phone'\n        },\n        ...\n    ],\n    \n    session:{\n        username:'Rigo',\n        email: 'rigocodes@gmail.com',\n        loggedIn: false\n    },\n    \n    cart:[\n        {\n            name: 'Polaroid Camera',\n            image: 'https:\/\/images.pexels.com\/photos\/191160\/pexels-photo-191160.jpeg?auto=compress&cs=tinysrgb&h=500&w=500',\n            price: 129.99,\n            description: 'Get instant photos'\n        },\n        ...\n    ]\n};\n```\n\nIn order to have access to the global data, you'll have to import the context's main file: \n```jsx\nimport {Context} from '\/path\/to\/store\/appContext.jsx';\n\n...\n\n\/\/Then use the Consumer within the render method\n    render(){\n        return(\n            <Context.Consumer>\n                {\n                    ({store}) => {\n                        \/\/Then you can use the data structure within store into \n                        return (<span> hello, {store.session.username} <\/span>);\n                        \n                    }\n                }\n            <\/Context.Consumer>\n        );\n    }\n...\n\n```\n\nHint: you can see an example of the ```Context.Consumer``` in action at: \n\n```\ndemo.jsx\n - demoList.jsx\n - demoProducts.jsx\n```\n\n### How to start?\n\n##### 1. Clone the instructor's initial repository\n```\n$ git clone <repository_url>\n```\n##### 2. Install the \/node_modules\n```\n$ npm install\n```\n##### 3. Run the webpack development server\n```\n$ npm run c9\n```\n\nDone!\n*tap* *tap* *tap* (Start coding!)\n","title":"Multi View React Web App","slug":"multi-view-react-website","status":"published","solution":"","duration":24,"description":"Create a web app using React router and Context","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":10},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":5},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"git-creator","points":10},{"badge":"the-console","points":10}],"info-path":"..\/p\/javascript\/junior\/multi-view-react-website\/info.json","name":"p","url":"..\/p\/javascript\/junior\/multi-view-react-website\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"multi-view-react-website"},{"readme":"..\/p\/javascript\/junior\/sorting-cards-with-bubble\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Sorting Cards with Bubble algorithm\n\nSorting is considered to be an important concept in many programming languages as it helps us locate elements in a faster and easier manner.\n\nThe bubble sorting algorithm is one of the easiest to learn and that is the first one normally taught. Here is a 5min explanation on how the bubble algorithm works:\n[https:\/\/www.youtube.com\/watch?v=xli_FI7CuzA](https:\/\/www.youtube.com\/watch?v=xli_FI7CuzA)\n\n## Instructions\n\n1. Create a function that generates a list of random cards with suits.\n1. Let the user speficy how much random cards the website should generate using a text input.\n2. Add a \"draw\" buton that when clicked it renders those cards on the website in a beautiful way.\n3. Add one \"sort\" button that sorts the cards using the `bubble` sorting algorithm.\n4. Save all the changes that you hard to do while sorting the list of cards in a new array.\n5. Display the entire log of changes one on top of each other.\n\nThis is an animated of how your application should look like:\n![Bubble Sorting Cards on a website](https:\/\/projects.breatheco.de\/json?slug=sorting-cards-with-bubble&preview)\n\nHint:\n\n1. Strategyze first, no one starts coding the solution before having a clear strategy.\n2. Stick to your strategy, forget about stackoverflow for strategy.\n3. Divide and conquer, try separating the exercise in smaller exercises, for example:\n    - Make the hardcoded CSS and HTML before trying to make it dynamic, that will give you a clear sense of what HTML code you need to build with your algorithm.\n    - Generate an array of random cards first, make sure is properly being generated (using the console.log) before trying to render it into the website.\n    - Make a function just for building the HTML of ONE card and then re-use it to render all.","preview":"..\/p\/javascript\/junior\/sorting-cards-with-bubble\/\/preview.gif","title":"Bubble Sorting Cards","slug":"sorting-cards-with-bubble","status":"published","solution":"https:\/\/jsfiddle.net\/BreatheCode\/x53kugn2\/116\/","duration":4,"description":"Practice building algorithms by doing a bubble-sorting algorithm and displaying it on a website","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"select-everything","points":10},{"badge":"position-vs-display","points":10},{"badge":"be-dry","points":10},{"badge":"css-inspector","points":5},{"badge":"window-lover","points":3},{"badge":"source-inspector","points":5},{"badge":"abc","points":6},{"badge":"functional-developer","points":6}],"info-path":"..\/p\/javascript\/junior\/sorting-cards-with-bubble\/info.json","name":"p","url":"..\/p\/javascript\/junior\/sorting-cards-with-bubble\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"sorting-cards-with-bubble"},{"readme":"..\/p\/javascript\/junior\/sorting-cards-with-select\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Sorting Cards using the selection algorithm\n\nthe \"Selection Soring Algorithm\" is also another simple example of how computers work when sorting list of things. Here is a 5min explanation on how the selection algorithm works:\n[https:\/\/www.youtube.com\/watch?v=g-PGLbMth_g](https:\/\/www.youtube.com\/watch?v=g-PGLbMth_g)\n\n## Instructions\n\n1. Create a function that generates a list of random cards with suits.\n1. Let the user speficy how much random cards the website should generate using a text input.\n2. Add a \"draw\" buton that when clicked it renders those cards on the website in a beautiful way.\n3. Add one \"sort\" button that sorts the cards using the `selection` sorting algorithm.\n4. Save all the changes that you hard to do while sorting the list of cards in a new array.\n5. Display the entire log of changes one on top of each other.\n\nThis is an example of how your application should look:\n\n![Bubble Sorting Cards on a website](https:\/\/projects.breatheco.de\/json?slug=sorting-cards-with-select&preview)\n\nHint:\n\n1. Strategyze first, no one starts coding the solution before having a clear strategy.\n2. Stick to your strategy, forget about stackoverflow for strategy.\n3. Divide and conquer, try separating the exercise in smaller exercises, for example:\n    - Make the hardcoded CSS and HTML before trying to make it dynamic, that will give you a clear sense of what HTML code you need to build with your algorithm.\n    - Generate an array of random cards first, make sure is properly being generated (using the console.log) before trying to render it into the website.\n    - Make a function just for building the HTML of ONE card and then re-use it to render all.","preview":"..\/p\/javascript\/junior\/sorting-cards-with-select\/\/preview.gif","title":"Sorting Cards with Select","slug":"sorting-cards-with-select","status":"published","solution":"https:\/\/jsfiddle.net\/BreatheCode\/8c36nrk5\/7\/","duration":4,"description":"Practice building algorithms by doing a selection-sorting algorithm and displaying it on a website","talents":[{"badge":"identator","points":6},{"badge":"tag-master","points":3},{"badge":"select-everything","points":10},{"badge":"position-vs-display","points":10},{"badge":"be-dry","points":10},{"badge":"css-inspector","points":5},{"badge":"window-lover","points":3},{"badge":"source-inspector","points":5},{"badge":"abc","points":6},{"badge":"functional-developer","points":6}],"info-path":"..\/p\/javascript\/junior\/sorting-cards-with-select\/info.json","name":"p","url":"..\/p\/javascript\/junior\/sorting-cards-with-select\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"sorting-cards-with-select"},{"title":"Tetris with JS","slug":"tetris-js","draft":true,"status":"draft","duration":16,"description":"Create a tetris game using js","talents":[{"badge":"tag-master","points":10}],"info-path":"..\/p\/javascript\/junior\/tetris\/info.json","name":"p","url":"..\/p\/javascript\/junior\/tetris\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"tetris"},{"readme":"..\/p\/javascript\/junior\/tictactoe-react\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) TicTacToe With React\n\nTime to start building cool stuff, let's code our first game!\n\n<p align=\"center\"><img height=\"300\" src=\"https:\/\/projects.breatheco.de\/json?slug=tictactoe-react&preview\" \/><\/p>\n\n## \ud83d\udcdd Instructions\n\nCreate a tictactoe in React.js just like [this one](https:\/\/projects.breatheco.de\/json?slug=tictactoe-react&preview). Remember to follow the recommended workflow to start coding:\n\n1. Design your sitemap: How many pages\/views?\n2. Designing your wireframe: What components and where?\n3. Start coding your components only rendering \"Hello world\" on each of them (to make sure they work).\n4. Create a list of all the possible user and system interactions (events) that occure during runtime (for example: The user clicks on a button to start the game)\n6. Create a javascript functions that will handle each of those events.\n7. `Console.log` on each of those funtions to make sure they are being called.\n9. Continue... whatch the video if you have any other doubts.\n\n### Concepts you wil learn:\n\n- State of the components (global variables)\n- Props\n- Render method\n- The function for checking the winner is a great learning algorithm\n\n### Video Tutorial:\n\nHere is a video explaining how to do it: [https:\/\/www.youtube.com\/watch?v=MQonrbY8Ezg&list=PLx0T51ydRO_7qabdLlT69keo68WmbXkrB](https:\/\/www.youtube.com\/watch?v=MQonrbY8Ezg&list=PLx0T51ydRO_7qabdLlT69keo68WmbXkrB)\n\n","preview":"..\/p\/javascript\/junior\/tictactoe-react\/\/preview.gif","title":"TicTacToe with React.js","slug":"tictactoe-react","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/tictactoe-react","duration":16,"description":"Create a simple tictactoe 2 player game (no AI), using the React.js framework","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":5},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"sass-master","points":5},{"badge":"git-creator","points":5},{"badge":"the-console","points":10},{"badge":"mouse-god","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5}],"info-path":"..\/p\/javascript\/junior\/tictactoe-react\/info.json","name":"p","url":"..\/p\/javascript\/junior\/tictactoe-react\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"tictactoe-react"},{"readme":"..\/p\/javascript\/junior\/todo-list\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) React TODO application\n\n<p align=\"center\">\n  <img height=\"200\" src=\"https:\/\/projects.breatheco.de\/json?slug=todo-list&preview\" \/>\n<\/p>\n\nCreate a TODO list application that allows users to add and delete tasks.\n\n## \ud83d\udcdd Instructions\n- You app needs to look [like this](https:\/\/projects.breatheco.de\/json?slug=todo-list&preview).\n- The tasks are added when the user press enter on the keyboard or you can have your own button.\n- The delete icon shows only when the task is hovered.\n- The use can add as many tasks as it wants.\n- When there is no tasks the list should \"No tasks, add a task\"\n- There is no way to update a task, the user will ahve to delete and create again.\n\n## \ud83d\udca1 Tips to finish this project\n\nDo not go straight to the code, think first and have a viable trategy.\n\n- What components will you create? Draw the project on a white paper and identify components.\n- Where are the stasks going to be stored in your component?\n- Read about [controlled components inputs in react.js](https:\/\/www.youtube.com\/watch?v=A6YxkyR_T8c), you will need to understand the concept.\n","preview":"..\/p\/javascript\/junior\/todo-list\/\/preview.gif","title":"Todolist Application Using React","slug":"todo-list","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/todo-list","duration":16,"description":"Create a simple todo web app using the React.js framework","talents":[{"badge":"tag-master","points":10},{"badge":"select-everything","points":5},{"badge":"be-dry","points":5},{"badge":"css-inspector","points":5},{"badge":"source-inspector","points":10},{"badge":"abc","points":5},{"badge":"functional-developer","points":10},{"badge":"js-inspector","points":10},{"badge":"sass-master","points":5},{"badge":"git-creator","points":5},{"badge":"the-console","points":10},{"badge":"mouse-god","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5},{"badge":"model-master","points":5},{"badge":"control-freak","points":5}],"info-path":"..\/p\/javascript\/junior\/todo-list\/info.json","name":"p","url":"..\/p\/javascript\/junior\/todo-list\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"todo-list"},{"readme":"..\/p\/javascript\/junior\/todo-list-with-fetch\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Second Part of the TODO list, adding fetch\n\nThis exercise is meant to be completed after the [TODO list react application](https:\/\/projects.breatheco.de\/d\/todo-list#readme) because the first part its the perfect boilerplate to start using API's.\n\nFor this second part, we will sync our todo list with a real database, using the following [RESTful](http:\/\/content.breatheco.de\/lesson\/understanding-rest-apis) and public API made for this exercise.\n\n\ud83d\udd17 Click here to access to the [TODO-list API documentation](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/).\n\nThis whole exercise is about asyncrunis programming because the interactions `from` and `to` the server need to be done async. That way the user does not have to wait for the information to arrive.\n\n## Instructions:\n\n- Make your to-do list sync with the backend API every time a task is added or deleted.\n- Add a clean all tasks button that will delete the entire list from the server and update the empty list on the front-end.\n\nThere are 3 critical moments in the application timeline (a.k.a. The runtime) to focus on your integration:\n- **After the list loads empty for the first time (componentDidMount)**: you should fetch (GET) the data from the API and update the tasks when the information finally arrives.\n- **When a new task is added**: You should PUT the new list on the server.\n- **When a task is deleted**: You should PUT the new list on the server.\n\n## Hint\n\nUse the following fetch call to synconize your tasks with the server every time there is a change on the list.\n\n```js\nfetch('http:\/\/assets.breatheco.de\/apis\/fake\/todos\/user\/alesanchezr', {\n      method: \"PUT\",\n      body: JSON.stringify(todos),\n      headers: {\n        \"Content-Type\": \"application\/json\"\n      }\n    })\n    .then(resp => {\n        console.log(resp.ok); \/\/ will be true if the response is successfull\n        console.log(resp.status); \/\/ the status code = 200 or code = 400 etc.\n        console.log(resp.text()); \/\/ will try return the exact result as string\n        return resp.json(); \/\/ (returns promise) will try to parse the result as json as return a promise that you can .then for results\n    })\n    .then(data => {\n        \/\/here is were your code should start after the fetch finishes\n        console.log(data); \/\/this will print on the console the exact object received from the server\n    })\n    .catch(error => {\n        \/\/error handling\n        console.log(error);\n    });\n```\n\nFor any other request, you have to keep changing the same variables on the fetch: The URL, the method and the payload.\n","preview":"..\/p\/javascript\/junior\/todo-list-with-fetch\/\/preview.gif","title":"Todolist Application Using React and Fetch","slug":"todo-list-with-fetch","status":"published","solution":"https:\/\/bitbucket.org\/codingacademy\/todo-list","duration":8,"description":"Create a simple todo web app using the React.js framework and use the API to sync with the server","talents":[{"badge":"tag-master","points":10}],"info-path":"..\/p\/javascript\/junior\/todo-list-with-fetch\/info.json","name":"p","url":"..\/p\/javascript\/junior\/todo-list-with-fetch\/","visibility":"public","technology":"javascript","difficulty":"junior","category":"javascript","folder-name":"todo-list-with-fetch"},{"readme":"..\/p\/javascript\/semi-senior\/battlefield\/","markdown":"# battleship-javascript\nA very very simple Battleship game written in plain JavaScript: http:\/\/learntocodela.github.io\/battleship-javascript\/\n\nRead about the game and its rules here: https:\/\/en.wikipedia.org\/wiki\/Battleship_(game)\n\n### Step 1: Create your files\n\nUseful references:\n- [Final HTML file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/index.html)\n- [Final CSS file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/style.css)\n- [Final JS file](https:\/\/github.com\/learntocodela\/battleship-javascript\/blob\/gh-pages\/battleship.js)\n- [CSS Relative and Absolute Positioning](http:\/\/learnlayout.com\/position.html)\n\n### Step 2: Create a grid on your HTML page for the game board\n\nUseful references:\n- [Document.getElementById()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/document\/getelementbyid\/)\n- [Document.createElement()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/document\/createelement\/)\n- [appendChild()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/node\/appendchild\/)\n- [style property](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/htmlelement\/style\/)\n- [Loops in JavaScript](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/javascript\/guide\/loops_and_iteration\/)\n\n### Step 3: Model the game board in JavaScript and place ships\n\nUseful references:\n- [Arrays in JavaScript](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/javascript\/reference\/global_objects\/array\/)\n\n### Step 4: Create event handler and write the game logic\n\nUseful references:\n- [Events in JavaScript](http:\/\/www.kirupa.com\/html5\/javascript_events.htm)\n- [Handling Events for Many Elements](http:\/\/www.kirupa.com\/html5\/handling_events_for_many_elements.htm)\n- [Handling Events - Eloquent JavaScript Chapter 14](http:\/\/eloquentjavascript.net\/14_event.html)\n\n### Step 5: Play the game!\n\nPlay the game here: http:\/\/learntocodela.github.io\/battleship-javascript\/\n\nFeatures to implement next:\n- Display game messages within the HTML page instead of using [alert()](https:\/\/developer.mozilla.org\/en-us\/docs\/web\/api\/Window\/alert\/)\n- Randomize placement of the ships at the start of each game\n- Make better graphics, maybe add sound effects?\n- Make a 2-player version of the game!\n","title":"Battlefield","slug":"battlefield","instructions":[{"content":"This will be the first instruction","minutes_duration":1},{"content":"This will be the second instruction","minutes_duration":1}],"info-path":"..\/p\/javascript\/semi-senior\/battlefield\/info.json","name":"p","url":"..\/p\/javascript\/semi-senior\/battlefield\/","status":"draft","visibility":"public","technology":"javascript","difficulty":"semi-senior","category":"javascript","folder-name":"battlefield"},{"readme":"..\/p\/javascript\/semi-senior\/music-player\/","markdown":"#MP3 Player\n\nLets create a MP3 player like Spotify.com!\n\n## Fundamentals\n\nThis exercise covers the following fundamentals:\n1. Advanced CSS and HTML\n2. The *audio* tag to emulate an HTML5 player.\n3. Javascriopt Modules.\n4. Javascript advanced programing practices.\n5. Workign With The DOM.","title":"Create an MP3 player like Spotify.com","slug":"media-player","status":"draft","description":"Use the audio tag to create your own media player","info-path":"..\/p\/javascript\/semi-senior\/music-player\/info.json","name":"p","url":"..\/p\/javascript\/semi-senior\/music-player\/","visibility":"public","technology":"javascript","difficulty":"semi-senior","category":"javascript","folder-name":"music-player"},{"readme":"..\/p\/javascript\/semi-senior\/music-player-react\/","markdown":"# Music Player React\n\nLet's create a MP3 player that works similar to Spotify, [here is the demo](https:\/\/projects.breatheco.de\/json\/?slug=music-player-react&preview\/).\n\nThe buttons should always remain at the bottom of the viewport (use position fixed for that).\nYou only need to implement the Play, Pause, Next and previous buttons.\n\n## \ud83d\udcdd Requierments\n- List the songs from [the Sounds API](http:\/\/assets.breatheco.de\/apis\/sound\/) using the Fetch API.\n- When the user clicks on a song, the player it must start playing it.\n- When the user clicks on the \"next\" button the player should start playing the next song from the list, if there is no next song then it should start over by playing the first song of the list, the same applies for the \"previous\" button.\n- Use the react ref attribute to get the audio tag from the DOM.\n- Make sure to have only one `<audio>` tag on the entire project, use `ref` to change its src url.\n\n## \ud83d\ude0e Feeling Confident?\n\nThe following features are not needed for the final solution, but you can develop them if you feel confident enough:\n\n- `+1` Implement implement volume control: two buttons, one to rise and one to lower the volume.\n- `+1` Repeat mode button: when activated, the current song will repeat forever until deativated.\n- `+2` Shuffle functionality: the songs will play randomly instead of in order.\n- `+5` Implement slider timeline: The slider will move with the song accordingly, if clicked the song will jump to that time.","preview":"..\/p\/javascript\/semi-senior\/music-player-react\/\/preview.gif","title":"Audio player like Spotify with React.js","slug":"music-player-react","status":"published","description":"Use the audio tag to create your own music player","solution":"https:\/\/bitbucket.org\/codingacademy\/music-player-react","duration":16,"talents":[{"badge":"tag-master","points":10}],"info-path":"..\/p\/javascript\/semi-senior\/music-player-react\/info.json","name":"p","url":"..\/p\/javascript\/semi-senior\/music-player-react\/","visibility":"public","technology":"javascript","difficulty":"semi-senior","category":"javascript","folder-name":"music-player-react"},{"readme":"..\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/","markdown":"# Starwars Blog Reading List\n\n_The force is strong with this exercise..._\n\n## Objective\n\nWe are going to be building a minimalist version of the [Star Wars Databank](https:\/\/www.starwars.com\/databank) with a React Later or Favorites list functionality.\n\n### Here is the demo!\n\n<p align=\"center\">\n   <img src=\"https:\/\/projects.breatheco.de\/json?slug=startwars-blog-reading-list&preview\" \/>\n<\/p>\n\n#### Building the grid of Characters and Planets\n\n- Create a React webapp that lists the _peope_, _vehicles_ and _planets_ **entities** provided by the [SWAPI](https:\/\/swapi.co\/documentation).\n\n<p align=\"center\">\n   <img height=\"100\" src=\"https:\/\/raw.githubusercontent.com\/nachovz\/projects\/master\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/sw_data.png\" \/>\n<\/p>\n\n#### Building a details view for Character or Planet\n\n- Each entity should have a short description (Bootstrap Card) and a details view (Bootstrap components):\n\n<p align=\"center\">\n   <img height=\"100\" src=\"https:\/\/raw.githubusercontent.com\/nachovz\/projects\/master\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/sw_data_details.png\" \/>\n<\/p>\n\n***Important***: The SWAPI doesn't provide the images, you can use placeholders or avoid the images altogether. The focus of this exercise is to practice *fetch*, *router* and *context*; you can focus on the color theme and simple layout to make it look good.\n\n***Important 2***: don't worry if the data you get from the SWAPI doesn't match the data you see in starwars.com.\n\nUse all the information provided by the SWAPI (check the docs and\/or the json responses).\n\n## Read Later or Favorites functionlity\n\nImplement a read-later funcionality, i.e, a button that allows the user to \"save\" the item (character, vehicle or planet) into a special list. This list will be shown at the bottom of the home page, it resembles the main list but only shows the \"saved\" elements.\n\n#### Use the Context\n\nTo ensure that the user can \"save\" the item, you must implement an action that can be accessible from anywhere within the app.\n\n## \ud83d\ude0e Feeling Confident?\n\nThe following features are not needed for the final solution, but you can develop them if you feel confident enough:\n\n- `+1` Prevent the website from fetching the Startwars API again if refreshed (you can use the localstorage to save the store on the local browser).\n- `+3` Implement a search bar with autocomplete for Characters and Planets. When the autocomplete is clicked it should take you to the Character or planet page.","preview":"..\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/\/preview.gif","title":"Starwars blog reading list","slug":"startwars-blog-reading-list","status":"published","duration":16,"description":"Create a simple to-read website for Star Wars fans. Use the SWAPI to fetch and React + React Router + Context to save the reading list.","talents":[{"badge":"tag-master","points":10}],"info-path":"..\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/info.json","name":"p","url":"..\/p\/javascript\/semi-senior\/startwars-blog-reading-list\/","visibility":"public","technology":"javascript","difficulty":"semi-senior","category":"javascript","folder-name":"startwars-blog-reading-list"},{"readme":"..\/p\/python\/beginner\/contact-list-api\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Contact List REST API in Flask\n\nCreating and maintaining REST APIs is THE everyday job for most of backend developers, so it is a skill that we need to mature. In this project we'll practice every step of the API development process.\n\nWe are going to build the API that manages a contact-list database and publicly expose the endpoints so client applications (including ours) can use it. This time we'll include *Groups*, a new entity that will allow the system to group *Contacts*. Example: Work, Family, Friends. **Hint**: we can implement this logic by using a *many-to-many* relationship between the two tables. \n\n## \ud83d\udcdd Instructions\n\nCreate an API with the following endpoints:\n\n1. Get a list of all the Contacts `GET \/contact\/all`\n2. Create a new Contact `POST \/contact`\n3. Get a specific Contact (with the Group objects it belongs to) `GET \/contact\/{contact_id}`\n4. Delete a Contact `DELETE \/contact\/{contact_id}`\n5. Update a Contact `UPDATE \/contact\/{contact_id}`\n6. Get a list of all the Group names and ids `GET \/group\/all`\n7. Create a new Group `POST \/group`\n8. Get a specific Group (with all Contact objects related to it) `GET \/group\/{group_id}`\n9. Update a Group name `UPDATE \/group\/{group_id}`\n10. Delete a Group `DELETE \/group\/{group_id}`\n\nA contact must have the following data-structure on the database:\n```python\n# Contact\n    id: (int, primary_key)\n    full_name: (string, mandatory)\n    email: (string, mandatory)\n    address: (string, optional)\n    phone: (string, optional)\n    groups: (list of foreign_key)\n\n# Group\n    id: (int, primary_key)\n    name: (string, mandatory)\n    contacts: (list of foreign_key)\n```\n\n## Formal API Documentation\n\n1. GET \/contact\/all\n```\n    REQUEST (application\/json)\n        type: GET\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: [\n            {\n                \"full_name\": \"Dave Bradley\",\n                \"email\": \"dave@gmail.com\",\n                \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n                \"phone\":\"7864445566\",\n                \"groups\": [2,3]\n            },\n            ...\n        ]\n```\n2. Create a new contact\n```\n    REQUEST (application\/json)\n        type: POST\n        path: \/contact\n        body: {\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n    RESPONSE (application\/json)\n        code: 200 | 400 | 500\n        body: {\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n```\n3. Get a specific Contact\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/contact\/{contact_id}\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [\n                {\n                    \"id\": 2,\n                    \"name\": \"Family\"\n                },{\n                    \"id\": 3,\n                    \"name\": \"Gamers\"\n                }\n             ]\n        }\n```\n4. Update a given contact \n```\n    REQUEST (application\/json)\n        type: PUT\n        path: \/contact\/{contact_id}\n        body: {\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 12\n            \"full_name\": \"Dave Bradley\",\n            \"email\": \"dave@gmail.com\",\n            \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n            \"phone\":\"7864445566\",\n            \"groups\": [2,3]\n        }\n```\n5. Delete a contact by id \n```\n    REQUEST (application\/json)\n        type: DELETE\n        path: \/contact\/{contact_id}\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: {\n            \"deleted\": {\n                \"id\": 12,\n                \"full_name\": \"Dave Bradley\",\n            }\n        }\n```\n6. List all Groups\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/group\/\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 500\n        body: {\n            \"data\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"Work\"\n                },{\n                    \"id\": 2,\n                    \"name\": \"Gamers\"\n                }\n            ]\n        }\n```\n7. Get a specific Group\n```\n    REQUEST (application\/json)\n        type: GET\n        path: \/group\/{group_id}\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 2\n            \"name\": \"Work\",\n            \"contacts\": [\n                {\n                    \"id\": 12\n                    \"full_name\": \"Dave Bradley\",\n                    \"email\": \"dave@gmail.com\",\n                    \"address\":\"47568 NW 34ST, 33434 FL, USA\",\n                    \"phone\":\"7864445566\",\n                    \"groups\": [2,3]\n                }\n             ]\n        }\n```\n8. Update a given group's id \n```\n    REQUEST (application\/json)\n        type: PUT\n        path: \/group\/{group_id}\n        body: {\n            \"name\": \"Beach Crew\",\n        }\n    RESPONSE (application\/json)\n        code: 200 | 404 | 400 | 500\n        body:{\n            \"id\": 2\n            \"name\": \"Beach Crew\",\n        }\n```\n9. Delete a group by id \n```\n    REQUEST (application\/json)\n        type: DELETE\n        path: \/group\/{group_id}\n        body: null\n    RESPONSE (application\/json)\n        code: 200 | 404 | 500\n        body: {\n            \"deleted\": {\n                \"id\": 2,\n                \"name\": \"Beach Crew\",\n            }\n        }\n```  \n  \n  \n## \ud83d\udca1 How to start?\n\n1. Start by reading the instructions very carefully.\n2. Build the database model class Contact and Group.\n3. Implement the add methods (POST) to be able to add some contacts and groups into the database to make sure you have dummy data.\n4. Create the GET(all) endpoints. List contacts and list groups.\n5. Implement the rest of the endpoints.\n6. Connect your React Contact List application using `fetch`.\n  \nHint: Use Postman as a testing tool before you connect your front end application (React Contact List).\n## \ud83d\udcd6 Fundamentals\n\nThis exercise will make you practice the following fundamentals:\n\n1. Reading API documentations\n2. Building an RESTful API\n2. Building data models\n3. SQL Databases\n4. REST API's\n5. Python Flask\n6. Fetch and async\n  \n  \n","preview":"..\/p\/python\/beginner\/contact-list-api\/\/preview.png","title":"Contact List API","slug":"contact-list-api","status":"published","duration":16,"description":"Create the data structures and endpoints to manage a contact list using a database","talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/contact-list-api\/info.json","name":"p","url":"..\/p\/python\/beginner\/contact-list-api\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"contact-list-api"},{"readme":"..\/p\/python\/beginner\/family-static-api\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Family Static API\n\nThe Doe Family needs a static API! We need to build the *data structures* and create API endpoint to interact with it using Postman.\n\n## \u26a0\ufe0f Download the boilerplate\n\nPlease download one of the following bolerplates to start coding your exercise or open it on gitpod.io:\n- Django: [https:\/\/github.com\/breatheco-de\/exercise-family-static-api-django](https:\/\/github.com\/breatheco-de\/exercise-family-static-api-django)\n- Flask: [https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello](https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello)\n\n- Create the code needed to developer the API endpoints described further below.\n- The only two files you have to edit are:\n\t- For Django: `api\/family_datastructure.py`, `api\/views.py`.\n\t- For Flask: `src\/family_datastructure.py`, `src\/main.py`.\n- We have prepared a set of automated tests that will give you an idea if your code is correct, run the tests by typing `$ pipenv run tests` on the command line.\n\n## Data structures\n\nEvery **member** of the Doe family must be a dictionary - equivalent of [Objects Literals in JS](https:\/\/www.dyn-web.com\/tutorials\/object-literal\/) - and have these values:\n```\n    + id: Int\n\t  \n    + first_name: String\n      \n    + last_name: String (Always Doe)\n      \n    + age: Int > 0\n      \n    + lucky_numbers: Array of int\n```\nThe **family** data-structure will be a class with the following structure:\n\n```python\nclass Family:\n\n\tdef __init__(self, last_name):\n\t\tself.last_name = last_name\n        # example list of members\n\t\tself._members = [{\n\t\t\t\"id\": self._generateId(),\n\t\t\t\"first_name\": \"John\"\n\t\t}]\n\n    \t# read-only: Use this method to generate random members ID's when adding members into the list\n    def _generateId(self):\n        return random.randint(0, 99999999) \/\/import random \n\n\tdef add_member(self, member):\n        ## you have to implement this method\n        ## append the member to the list of _members\n\t\tpass\n\n\tdef delete_member(self, id):\n        ## you have to implement this method\n        ## loop the list and delete the member with the given id\n\t\tpass\n\n\tdef update_member(self, id, member):\n        ## you have to implement this method\n        ## loop the list and replace the memeber with the given id\n\t\tpass\n\n\tdef get_member(self, id):\n        ## you have to implement this method\n        ## loop all the members and return the one with the given id\n\t\tpass\n\n\tdef get_all_members(self):\n\t\treturn self._members\n```\n\nNote: don't forget to Initialize the class: `doe_family = Family('Doe')` *before* the routes.\n\n## These are the initial Family Members\n\n```md\nJohn Doe\n33 Years old\nLucky Numbers: 7, 13, 22\n\nJane Doe\n35 Years old\nLucky Numbers: 10, 14, 3\n\nJimmy Doe\n5 Years old\nLucky Numbers: 1\n```\n\n## Endpoints\n\nThis API must have 4 endpoints. They all return JSON:\n\n### 1) Get all family members:\n\n```md\nGET \/members\n\nRESPONSE (content-type: Application\/JSON):\n{\n\tstatus_code: 200 if success. 400 if bad request (wrong info) screw up, 500 if the server encounter an error\n    body: { \n    \tmembers: [], \/\/Array of members.\n\t\tfamily_name: \"\", \/\/the family's last name.\n\t\tlucky_numbers: [], \/\/An array with all family member's lucky numbers.\n\t\tsum_of_lucky: Int \/\/Sum of all family member's lucky numbers.\n}\n```\nImportant: There are two fields that must be calculated on runtime:\n- lucky_numbers is the concatenation of all the lucky numbers from the family members.\n- sum_of_lucky is the sum of all the lucky numbers of the family members.\n\n\n### 2) Retrieve one member\nWhich returns the member of the family where `id == member_id`.\n\n```md\nGET \/member\/<int:member_id>\n\nRESPONSE (content_type: Application\/JSON):\n{\n\tstatus_code: 200 if success. 400 if bad request (wrong info) screw up, 500 if the server encounter an error\n    body: {} \/\/the member's json object\n}\n```\n\n\n\n### 3) Add (POST) new member\n\n```md\nPOST \/member\n\nREQUEST (content_type: Application\/JSON):\n{\n    body: { \/\/the new member's json object\n\t\tname: String,\n\t\tage: Int,\n\t\tlucky_numbers: []\n\t}\n}\n\nRESPONSE (content_type: Application\/JSON):\n{\t\n\tstatus_code: 200 if success. 400 if bad request (wrong info) screw up, 500 if the server encounter an error\n\tdone: True\n}\n```\n\n\n\n### 4) DELETE one member\n\n```md\nPOST \/member\/<int:member_id>\n\nRESPONSE (content_type: Application\/JSON):\n{\n    status_code: 200 if success. 400 if bad request (wrong info) screw up, 500 if the server encounter an error\n    done: True\n}\n```\n\n## Requirements\n\n- All requests and reponses should be in content\/type: application\/json\n- Response codes must be `200` for success, `400` for bad request or `404` for not found.\n- This exercise does not include a database, everything must be done in Runtime (RAM).\n","title":"Family Static API with Flask","slug":"family-static-api","status":"published","duration":8,"description":"Create an API to show family members","talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/family-static-api\/info.json","name":"p","url":"..\/p\/python\/beginner\/family-static-api\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"family-static-api"},{"readme":"..\/p\/python\/beginner\/family-tree-static-api\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Family Tree Static API\n\nBased on the technologies\/strategies we've learn build a static API that handles a family tree. You're free to use your own family information, you can use fake data too.\n\n## Requirements\n\nYour API must have, at least, 7 members spread throughout 3 generations:\n\n**grandparent -> parent -> current generation**\n\nThe family tree must be represented as a object tree structure, i.e.: each person (node in the tree) must have: id, name, lastname, age, and a reference (id) to its parents and children (if any).\n\nThe API must expose an endpoint that returns the full list of family members ordered by oldest to younger.\n\nThe API must expose an endpoint that returns a specific member of the family tree by their id (which should be unique) and the information about its children and parents.\n\n### Technologies\n\nThe API must be developed using **Flask** and each endpoint must return a *valid* **JSON** file.\n\n### Hints\n\nYou may want to draw (pen and paper) the tree structure to have a \"visual\" structure in mind. Use the lines to display the references between parents and children.\n\nThe references should be the members' id number.\n\nCreate your data structures before you create the endpoints, use global variables.\n  ","title":"Family Tree Static API with Flask","slug":"family-tree-static-api","status":"published","duration":8,"description":"Create an API to read from a family tree structure","talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/family-tree-static-api\/info.json","name":"p","url":"..\/p\/python\/beginner\/family-tree-static-api\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"family-tree-static-api"},{"readme":"..\/p\/python\/beginner\/queue-management-api\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) SMS Queue Management System\n\nLets create a Queue System: Queue system are heavily used in Goverment institutions, airports, banks and many other venues looking to organize the incoming traffic.\nQueue systems can also be used to load balancing for different applications like:\n- Stablishing priorities in web servers incoming requests.\n- Inmigration and visa applicantions that need to be prioritized.\n- Network packages.\n- etc.\n\n## \ud83d\udcdd Instructions\n\n1. Clone the following boilerplate for [python\/django](https:\/\/github.com\/breatheco-de\/exercise-queue-management-django) and the following for [python\/flask](https:\/\/github.com\/4GeeksAcademy\/flask-rest-hello).\n2. The API has to integrate with Twillio API to be able to send SMS to notify users when their turn has arrived.\n3. Create an API that allows clients to manage a simple Queue, use the following data-structure to implement the queue:\n\n```py\nclass Queue:\n\n    def __init__(self):\n        self._queue = []\n        # depending on the _mode, the queue has to behave like a FIFO or LIFO\n        self._mode = 'FIFO'\n\n    def enqueue(self, item):\n    def dequeue(self):\n    def get_queue(self):\n    def size(self):\n        return len(self._queue) \n```\n\n## Example worlflow\n\n1. The API receives a request tp add Bob into the queue (`POST \/new`) with any particular priority (FIFO or LIFO).\n2. The API ads Bob and notifies him with an SMS confirmation, the SMS must say how many people are in front of him on the line.\n3. The system now waits until the enpoint `GET \/next` gets executed to process the person on the queue.\n4. Every time a `GET \/next` request is received, the next person on the queue gets processed until it is Bob's turn.\n5. When Bob is processed, the system sends him another SMS to let him know that his turn has arrived and deletes him from the list.\n\n## More details\n\n1. You have to create 3 endpoints for your API:\n\n- POST `\/new`: Will recive information about a user and ad him into the queue.  \n- GET `\/next`: Will process one spot of the queue.  \n- GET `\/all`: Will return a list with everyone that is pending to be processed (the current queue) . \n\n## \ud83d\udcd6 Fundamentals\n\nThis exercise will make you practice the following fundamentals:\n\n1. Here you can find the information on [how to send an sms with twillio](https:\/\/www.twilio.com\/docs\/sms\/send-messages), you will have to register and account (free) and also register a number (free)\n4. Building an RESTful API\n5. Complex Data Structures.\n6. Queue (FIFO vs FILO)\n7. SMS.\n","slug":"queue-management-api","title":"Queue Managment API","description":"Cloud-based queue management API","status":"published","live-url":"","duration":8,"technologies":["flask","python","json","static files","logging"],"talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/queue-management-api\/info.json","name":"p","demo":"","url":"..\/p\/python\/beginner\/queue-management-api\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"queue-management-api"},{"readme":"..\/p\/python\/beginner\/queue-management-cli\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Queue Management System CLI\n\nLets create a Queue System: Queue system are heavily used in Goverment institutions, airports, banks and many other venues looking to organize the incoming traffic.\nQueue systems can also be used to load balancing for different applications like:\n- Stablishing priorities in web servers incoming requests.\n- Inmigration and visa applicantions that need to be prioritized.\n- Network packages.\n- etc.\n\n## \ud83d\udcdd Instructions\n\n1. Clone the [following boilerplate](https:\/\/github.com\/breatheco-de\/exercise-queue-management-cli)\n2. Create an APP that allows the user to manage a simple Queue: Add a person, Remove person, get current line (queue).\n3. The application also needs to be able to export the queue to a file named `queue.json`.\n4. Use the following data-structure to implement the queue:\n\n```python\nclass Queue:\n\n    def __init__(self, mode, current_queue=[]):\n        self.queue = current_queue\n        # depending on the _mode, the queue has to behave like a FIFO or LIFO\n        if mode is None:\n            raise \"Please specify a queue mode FIFO or LIFO\"\n        else:\n            self.mode = mode\n    \n    def enqueue(self, item):\n        pass\n    def dequeue(self):\n        pass\n    def get_queue(self):\n        pass\n    def size(self):\n        return len(self.queue) \n```\n\n## Example worlflow\n\n1. The CLI show the menu, and the user selects the option to add \"Bob\" into the queue.\n2. The application ads Bob and notifies confirmation on the console and must say how many people are in front of him on the line.\n3. The system now shows the menu (starts again) awaiting for the user to pick another option.\n4. If the user picks the option to remove from the Queue, the next person on the queue gets eliminated and confirmation message shows.\n5. If the user picks to see the entire queue state, a list of everyone gets printed with their respective position in the queue.\n6. If the user picks to export entire queue, a JSON file with a list of everyone gets created.\n\n## \ud83d\udcd6 Fundamentals\n\nThis exercise will make you practice the following fundamentals:\n\n1. Executing python files from the command line.\n2. Get user input from the command line.\n3. Loops, conditionals and functions.\n4. Using plain-text files to store data.\n5. Complex Data Structures.\n6. Queue (FIFO vs FILO)\n7. SMS.\n","slug":"queue-management-cli","title":"Queue Managment CLI","description":"Terminal-based queue management application","solution":"https:\/\/github.com\/breatheco-de\/queue-managment-cli","status":"published","live-url":"","duration":8,"technologies":["terminal","python","json","static files","logging"],"talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/queue-management-cli\/info.json","name":"p","demo":"","url":"..\/p\/python\/beginner\/queue-management-cli\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"queue-management-cli"},{"readme":"..\/p\/python\/beginner\/tictactoe-api-django\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) TicTacToe API With Django & REST\n\nThis project is a small API implementation for the TicTacToe Project.\n\n## Instructions\n\nUsing the [django framework](https:\/\/www.djangoproject.com\/) and the [DjangoRest](http:\/\/www.django-rest-framework.org\/) library develop an API that implements the following API bellow, there is no need for implementing any autentication protocol right now.\n\n1. Get all games logged\n```\n\t[GET] \/games\n\tPARAMS: None\n\tREQUEST BODY: None\n\tRESPONSE BODY:\n\t[\n\t\t{\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n```\n2. Add new game to the log\n```\n\t[POST] \/game\n\tPARAMS: None\n\tREQUEST BODY:\n\t[\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n\tRESPONSE BODY:\n\t[\n\t\t{\n\t\t\t\"id\": 1,\n\t\t\t\"player1\": \"Rose\",\n\t\t\t\"player2\": \"Emily\",\n\t\t\t\"winner\": \"Rose\"\n\t\t},\n\t\t...\n\t]\n```\n3. Delete all games log\n```\n\t[DELETE] \/games\n\tPARAMS: None\n\tREQUEST BODY: NONE\n\tRESPONSE BODY:\n\t{\n\t\tcode: 200,\n\t\tmessage: \"ok\"\n\t}\n```\n","title":"TicTacToe REST API with django","slug":"tictactoe-api","status":"published","live-url":"https:\/\/assets.breatheco.de\/apis\/tictactoe\/","duration":16,"description":"Create a rest API with django-rest","talents":[{"badge":"functional-developer","points":10},{"badge":"git-creator","points":5},{"badge":"the-console","points":5},{"badge":"conditionals","points":5},{"badge":"looper","points":5},{"badge":"abstract-configer","points":5},{"badge":"package-composer","points":5},{"badge":"the-console","points":5},{"badge":"docu-lover","points":10},{"badge":"transaction-master","points":10},{"badge":"client-vs-server","points":10},{"badge":"http-requester","points":10},{"badge":"speak-json","points":5},{"badge":"model-master","points":10},{"badge":"migrator","points":10},{"badge":"crud-master","points":10},{"badge":"speak-json","points":5},{"badge":"speak-json","points":5}],"info-path":"..\/p\/python\/beginner\/tictactoe-api-django\/info.json","name":"p","demo":"https:\/\/assets.breatheco.de\/apis\/tictactoe\/","url":"..\/p\/python\/beginner\/tictactoe-api-django\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"tictactoe-api-django"},{"readme":"..\/p\/python\/beginner\/todo-list-api\/","markdown":"# ![alt text](https:\/\/assets.breatheco.de\/apis\/img\/images.php?blob&random&cat=icon&tags=breathecode,32) Todo List API\n\nThis project can be considered the continuation of the [TodoList Application with React and Fetch](https:\/\/projects.breatheco.de\/d\/todo-list-with-fetch#readme).\nWe are going to replicated\/code this exact api: [http:\/\/assets.breatheco.de\/apis\/fake\/todos\/](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/)\n\n## \ud83d\udcdd Instructions\n\nCreate an API that connects to a MySQL database and implements the [Following Endpoints](http:\/\/assets.breatheco.de\/apis\/fake\/todos\/).\n\n1. `[GET] \/todos\/user\/<username>` Get list of todo's for a particular user.\n2. `[POST] \/todos\/user\/<username>` Create a new todo list of a particular user.\n3. `[PUT] \/todos\/user\/<username>` Update the entire list of todo's of a particular user.\n4. `[DELETE] \/todos\/user\/<username>` Delete a user and all of their todo's.\n\n## \ud83d\udcd6 Fundamentals\n\nThis exercise will make you practice the following fundamentals:\n\n1. Building an RESTful API.\n2. Building a database with SQLAlchemy.\n3. Database Migrations.","slug":"todo-list-api","title":"Todo List API","description":"Todo List API using Flask or Django","status":"published","live-url":"","duration":8,"technologies":["flask","python","json","logging"],"talents":[{"badge":"identator","points":10}],"info-path":"..\/p\/python\/beginner\/todo-list-api\/info.json","name":"p","demo":"","url":"..\/p\/python\/beginner\/todo-list-api\/","visibility":"public","technology":"python","difficulty":"beginner","category":"python","folder-name":"todo-list-api"}]